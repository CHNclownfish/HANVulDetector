digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
bytes(a).length != bytes(b).length

IRs:
TMP_19 = CONVERT a to bytes
REF_42 -> LENGTH TMP_19
TMP_20 = CONVERT b to bytes
REF_43 -> LENGTH TMP_20
TMP_21(bool) = REF_42 != REF_43
CONDITION TMP_21"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: RETURN 3

EXPRESSION:
keccak256(bytes)(abi.encode(a)) == keccak256(bytes)(abi.encode(b))

IRs:
TMP_22(bytes) = SOLIDITY_CALL abi.encode()(a)
TMP_23(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_22)
TMP_24(bytes) = SOLIDITY_CALL abi.encode()(b)
TMP_25(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_24)
TMP_26(bool) = TMP_23 == TMP_25
RETURN TMP_26"];
}
