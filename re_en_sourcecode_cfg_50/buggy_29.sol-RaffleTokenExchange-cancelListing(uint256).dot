digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
listing = listingsById[id]

IRs:
REF_78(RaffleTokenExchange.Listing) -> listingsById[id]
listing(RaffleTokenExchange.Listing) := REF_78(RaffleTokenExchange.Listing)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(listing.active,This listing was turned inactive already!)

IRs:
REF_79(bool) -> listing.active
TMP_115(None) = SOLIDITY_CALL require(bool,string)(REF_79,This listing was turned inactive already!)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(listing.seller == msg.sender || owner == msg.sender,Only the listing owner or the contract owner can cancel the listing!)

IRs:
REF_80(address) -> listing.seller
TMP_116(bool) = REF_80 == msg.sender
TMP_117(bool) = owner == msg.sender
TMP_118(bool) = TMP_116 || TMP_117
TMP_119(None) = SOLIDITY_CALL require(bool,string)(TMP_118,Only the listing owner or the contract owner can cancel the listing!)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
listing.active = false

IRs:
REF_81(bool) -> listing.active
REF_81 (->listing) := False(bool)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Canceled(id)

IRs:
Emit Canceled(id)"];
}
