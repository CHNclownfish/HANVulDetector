digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
toBurn = tokens.mul(burnPercent).div(1000)

IRs:
TMP_286(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['tokens', 'burnPercent'] 
TMP_287(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_286', '1000'] 
toBurn(uint256) := TMP_287(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
toSend = tokens.sub(toBurn)

IRs:
TMP_288(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['tokens', 'toBurn'] 
toSend(uint256) := TMP_288(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[from] = balances[from].sub(tokens)

IRs:
REF_178(uint256) -> balances[from]
REF_179(uint256) -> balances[from]
TMP_289(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_179', 'tokens'] 
REF_178 (->balances) := TMP_289(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens)

IRs:
REF_181(mapping(address => uint256)) -> allowed[from]
REF_182(uint256) -> REF_181[msg.sender]
REF_183(mapping(address => uint256)) -> allowed[from]
REF_184(uint256) -> REF_183[msg.sender]
TMP_290(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_184', 'tokens'] 
REF_182 (->allowed) := TMP_290(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[to] = balances[to].add(toSend)

IRs:
REF_186(uint256) -> balances[to]
REF_187(uint256) -> balances[to]
TMP_291(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_187', 'toSend'] 
REF_186 (->balances) := TMP_291(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(from,to,toSend)

IRs:
Emit Transfer(from.to.toSend)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[address(0)] = balances[address(0)].add(toBurn)

IRs:
TMP_293 = CONVERT 0 to address
REF_189(uint256) -> balances[TMP_293]
TMP_294 = CONVERT 0 to address
REF_190(uint256) -> balances[TMP_294]
TMP_295(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_190', 'toBurn'] 
REF_189 (->balances) := TMP_295(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(from,address(0),toBurn)

IRs:
TMP_296 = CONVERT 0 to address
Emit Transfer(from.TMP_296.toBurn)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
}
