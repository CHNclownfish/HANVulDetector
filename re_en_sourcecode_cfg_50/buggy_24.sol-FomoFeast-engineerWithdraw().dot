digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
avaliableAmount = engineerFunds

IRs:
avaliableAmount(uint256) := engineerFunds(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
avaliableAmount > 0

IRs:
TMP_266(bool) = avaliableAmount > 0
CONDITION TMP_266"];
2->3[label="True"];
2->6[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
engineerFunds = 0

IRs:
engineerFunds(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
engineerWithdrawAmount = engineerWithdrawAmount.add(avaliableAmount)

IRs:
TMP_267(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['engineerWithdrawAmount', 'avaliableAmount'] 
engineerWithdrawAmount(uint256) := TMP_267(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
msg.sender.transfer(avaliableAmount)

IRs:
Transfer dest:msg.sender value:avaliableAmount"];
5->6;
6[label="Node Type: END_IF 6
"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyEngineer()

IRs:
MODIFIER_CALL, FomoFeast.onlyEngineer()()"];
7->1;
}
