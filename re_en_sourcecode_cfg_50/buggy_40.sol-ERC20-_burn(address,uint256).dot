digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(account != address(0),ERC20: burn from the zero address)

IRs:
TMP_90 = CONVERT 0 to address
TMP_91(bool) = account != TMP_90
TMP_92(None) = SOLIDITY_CALL require(bool,string)(TMP_91,ERC20: burn from the zero address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_totalSupply = _totalSupply.sub(value)

IRs:
TMP_93(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_totalSupply', 'value'] 
_totalSupply(uint256) := TMP_93(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_balances[account] = _balances[account].sub(value)

IRs:
REF_59(uint256) -> _balances[account]
REF_60(uint256) -> _balances[account]
TMP_94(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_60', 'value'] 
REF_59 (->_balances) := TMP_94(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(account,address(0),value)

IRs:
TMP_95 = CONVERT 0 to address
Emit Transfer(account.TMP_95.value)"];
}
