digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
(success) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)()

IRs:
TUPLE_2(bool,bytes) = LOW_LEVEL_CALL, dest:lastPlayer_re_ent9, function:call, arguments:[''] value:jackpot_re_ent9 
success(bool)= UNPACK TUPLE_2 index: 0 "];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
! success

IRs:
TMP_13 = ! success 
CONDITION TMP_13"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
revert()()

IRs:
TMP_14(None) = SOLIDITY_CALL revert()()"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
lastPlayer_re_ent9 = msg.sender

IRs:
lastPlayer_re_ent9(address) := msg.sender(address)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
jackpot_re_ent9 = address(this).balance

IRs:
TMP_15 = CONVERT this to address
REF_12 -> BALANCE TMP_15
jackpot_re_ent9(uint256) := REF_12(uint256)"];
}
