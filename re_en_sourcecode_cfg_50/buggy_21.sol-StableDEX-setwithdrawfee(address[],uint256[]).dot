digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin)

IRs:
TMP_180(bool) = msg.sender == admin
TMP_181(None) = SOLIDITY_CALL require(bool)(TMP_180)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(addr.length < 10 && feeamount.length < 10 && addr.length == feeamount.length)

IRs:
REF_127 -> LENGTH addr
TMP_182(bool) = REF_127 < 10
REF_128 -> LENGTH feeamount
TMP_183(bool) = REF_128 < 10
TMP_184(bool) = TMP_182 && TMP_183
REF_129 -> LENGTH addr
REF_130 -> LENGTH feeamount
TMP_185(bool) = REF_129 == REF_130
TMP_186(bool) = TMP_184 && TMP_185
TMP_187(None) = SOLIDITY_CALL require(bool)(TMP_186)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->9;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < addr.length

IRs:
REF_131 -> LENGTH addr
TMP_188(bool) = i < REF_131
CONDITION TMP_188"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
withdrawfee[addr[i]] = feeamount[i]

IRs:
REF_132(address) -> addr[i]
REF_133(uint256) -> withdrawfee[REF_132]
REF_134(uint256) -> feeamount[i]
REF_133 (->withdrawfee) := REF_134(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_189(uint8) := i(uint8)
i(uint8) = i + 1"];
8->6;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
}
