digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(! safeGuard,System Paused by Admin)

IRs:
TMP_220 = ! safeGuard 
TMP_221(None) = SOLIDITY_CALL require(bool,string)(TMP_220,System Paused by Admin)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
hash = keccak256(bytes)(abi.encodePacked(this,tokenGet,amountGet,tokenGive,amountGive,expires,nonce))

IRs:
TMP_222(bytes) = SOLIDITY_CALL abi.encodePacked()(this,tokenGet,amountGet,tokenGive,amountGive,expires,nonce)
TMP_223(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_222)
hash(bytes32) := TMP_223(bytes32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(((orders[user][hash] || ecrecover(bytes32,uint8,bytes32,bytes32)(keccak256(bytes)(abi.encodePacked(Ethereum Signed Message:
32,hash)),v,r,s) == user) && block.number <= expires && orderFills[user][hash].add(amount) <= amountGet))

IRs:
REF_142(mapping(bytes32 => bool)) -> orders[user]
REF_143(bool) -> REF_142[hash]
TMP_224(bytes) = SOLIDITY_CALL abi.encodePacked()(Ethereum Signed Message:
32,hash)
TMP_225(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_224)
TMP_226(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(TMP_225,v,r,s)
TMP_227(bool) = TMP_226 == user
TMP_228(bool) = REF_143 || TMP_227
TMP_229(bool) = block.number <= expires
TMP_230(bool) = TMP_228 && TMP_229
REF_145(mapping(bytes32 => uint256)) -> orderFills[user]
REF_146(uint256) -> REF_145[hash]
TMP_231(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_146', 'amount'] 
TMP_232(bool) = TMP_231 <= amountGet
TMP_233(bool) = TMP_230 && TMP_232
TMP_234(None) = SOLIDITY_CALL require(bool)(TMP_233)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tradeBalances(tokenGet,amountGet,tokenGive,amountGive,user,amount)

IRs:
INTERNAL_CALL, BitpayerDEX.tradeBalances(address,uint256,address,uint256,address,uint256)(tokenGet,amountGet,tokenGive,amountGive,user,amount)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
orderFills[user][hash] = orderFills[user][hash].add(amount)

IRs:
REF_148(mapping(bytes32 => uint256)) -> orderFills[user]
REF_149(uint256) -> REF_148[hash]
REF_150(mapping(bytes32 => uint256)) -> orderFills[user]
REF_151(uint256) -> REF_150[hash]
TMP_236(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_151', 'amount'] 
REF_149 (->orderFills) := TMP_236(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Trade(now,tokenGet,amount,tokenGive,amountGive * amount / amountGet,user,msg.sender)

IRs:
TMP_237(uint256) = amountGive * amount
TMP_238(uint256) = TMP_237 / amountGet
Emit Trade(now.tokenGet.amount.tokenGive.TMP_238.user.msg.sender)"];
}
