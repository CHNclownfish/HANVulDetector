digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->17;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(type_ == 0 || type_ == 1)

IRs:
TMP_114(bool) = type_ == 0
TMP_115(bool) = type_ == 1
TMP_116(bool) = TMP_114 || TMP_115
TMP_117(None) = SOLIDITY_CALL require(bool)(TMP_116)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
type_ == 0

IRs:
TMP_118(bool) = type_ == 0
CONDITION TMP_118"];
2->3[label="True"];
2->9[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(tokenaddr == address(0))

IRs:
TMP_119 = CONVERT 0 to address
TMP_120(bool) = tokenaddr == TMP_119
TMP_121(None) = SOLIDITY_CALL require(bool)(TMP_120)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(amount > 0 && amount <= userDetails[msg.sender][address(0)] && withdrawfee[address(0)] < amount)

IRs:
TMP_122(bool) = amount > 0
REF_73(mapping(address => uint256)) -> userDetails[msg.sender]
TMP_123 = CONVERT 0 to address
REF_74(uint256) -> REF_73[TMP_123]
TMP_124(bool) = amount <= REF_74
TMP_125(bool) = TMP_122 && TMP_124
TMP_126 = CONVERT 0 to address
REF_75(uint256) -> withdrawfee[TMP_126]
TMP_127(bool) = REF_75 < amount
TMP_128(bool) = TMP_125 && TMP_127
TMP_129(None) = SOLIDITY_CALL require(bool)(TMP_128)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(amount <= address(this).balance)

IRs:
TMP_130 = CONVERT this to address
REF_76 -> BALANCE TMP_130
TMP_131(bool) = amount <= REF_76
TMP_132(None) = SOLIDITY_CALL require(bool)(TMP_131)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
msg.sender.transfer(amount.sub(withdrawfee[address(0)]))

IRs:
TMP_133 = CONVERT 0 to address
REF_79(uint256) -> withdrawfee[TMP_133]
TMP_134(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['amount', 'REF_79'] 
Transfer dest:msg.sender value:TMP_134"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
userDetails[msg.sender][address(0)] = userDetails[msg.sender][address(0)].sub(amount)

IRs:
REF_80(mapping(address => uint256)) -> userDetails[msg.sender]
TMP_136 = CONVERT 0 to address
REF_81(uint256) -> REF_80[TMP_136]
REF_82(mapping(address => uint256)) -> userDetails[msg.sender]
TMP_137 = CONVERT 0 to address
REF_83(uint256) -> REF_82[TMP_137]
TMP_138(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_83', 'amount'] 
REF_81 (->userDetails) := TMP_138(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
feeAmount[admin][address(0)] = feeAmount[admin][address(0)].add(withdrawfee[address(0)])

IRs:
REF_85(mapping(address => uint256)) -> feeAmount[admin]
TMP_139 = CONVERT 0 to address
REF_86(uint256) -> REF_85[TMP_139]
REF_87(mapping(address => uint256)) -> feeAmount[admin]
TMP_140 = CONVERT 0 to address
REF_88(uint256) -> REF_87[TMP_140]
TMP_141 = CONVERT 0 to address
REF_90(uint256) -> withdrawfee[TMP_141]
TMP_142(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_88', 'REF_90'] 
REF_86 (->feeAmount) := TMP_142(uint256)"];
8->14;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(tokenaddr != address(0) && tokendetails[tokenaddr].status == true)

IRs:
TMP_143 = CONVERT 0 to address
TMP_144(bool) = tokenaddr != TMP_143
REF_91(StableDEX.tokens) -> tokendetails[tokenaddr]
REF_92(bool) -> REF_91.status
TMP_145(bool) = REF_92 == True
TMP_146(bool) = TMP_144 && TMP_145
TMP_147(None) = SOLIDITY_CALL require(bool)(TMP_146)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(amount > 0 && amount <= userDetails[msg.sender][tokenaddr] && withdrawfee[tokenaddr] < amount)

IRs:
TMP_148(bool) = amount > 0
REF_93(mapping(address => uint256)) -> userDetails[msg.sender]
REF_94(uint256) -> REF_93[tokenaddr]
TMP_149(bool) = amount <= REF_94
TMP_150(bool) = TMP_148 && TMP_149
REF_95(uint256) -> withdrawfee[tokenaddr]
TMP_151(bool) = REF_95 < amount
TMP_152(bool) = TMP_150 && TMP_151
TMP_153(None) = SOLIDITY_CALL require(bool)(TMP_152)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
Token(tokenaddr).transfer(msg.sender,(amount.sub(withdrawfee[tokenaddr])))

IRs:
TMP_154 = CONVERT tokenaddr to Token
REF_98(uint256) -> withdrawfee[tokenaddr]
TMP_155(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['amount', 'REF_98'] 
TMP_156(bool) = HIGH_LEVEL_CALL, dest:TMP_154(Token), function:transfer, arguments:['msg.sender', 'TMP_155']  "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
userDetails[msg.sender][tokenaddr] = userDetails[msg.sender][tokenaddr].sub(amount)

IRs:
REF_99(mapping(address => uint256)) -> userDetails[msg.sender]
REF_100(uint256) -> REF_99[tokenaddr]
REF_101(mapping(address => uint256)) -> userDetails[msg.sender]
REF_102(uint256) -> REF_101[tokenaddr]
TMP_157(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_102', 'amount'] 
REF_100 (->userDetails) := TMP_157(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
feeAmount[admin][tokenaddr] = feeAmount[admin][tokenaddr].add(withdrawfee[tokenaddr])

IRs:
REF_104(mapping(address => uint256)) -> feeAmount[admin]
REF_105(uint256) -> REF_104[tokenaddr]
REF_106(mapping(address => uint256)) -> feeAmount[admin]
REF_107(uint256) -> REF_106[tokenaddr]
REF_109(uint256) -> withdrawfee[tokenaddr]
TMP_158(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_107', 'REF_109'] 
REF_105 (->feeAmount) := TMP_158(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
DepositandWithdraw(msg.sender,tokenaddr,amount,1)

IRs:
Emit DepositandWithdraw(msg.sender.tokenaddr.amount.1)"];
15->16;
16[label="Node Type: RETURN 16

EXPRESSION:
true

IRs:
RETURN True"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
dexstatuscheck()

IRs:
MODIFIER_CALL, StableDEX.dexstatuscheck()()"];
17->1;
}
