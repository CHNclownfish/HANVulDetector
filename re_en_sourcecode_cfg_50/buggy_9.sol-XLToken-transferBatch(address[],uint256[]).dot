digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_tos.length == _values.length)

IRs:
REF_170 -> LENGTH _tos
REF_171 -> LENGTH _values
TMP_255(bool) = REF_170 == REF_171
TMP_256(None) = SOLIDITY_CALL require(bool)(TMP_255)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->8;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < _tos.length

IRs:
REF_172 -> LENGTH _tos
TMP_257(bool) = i < REF_172
CONDITION TMP_257"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
transfer(_tos[i],_values[i])

IRs:
REF_173(address) -> _tos[i]
REF_174(uint256) -> _values[i]
TMP_258(bool) = INTERNAL_CALL, TokenERC20.transfer(address,uint256)(REF_173,REF_174)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_259(uint256) := i(uint256)
i(uint256) = i + 1"];
7->5;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
