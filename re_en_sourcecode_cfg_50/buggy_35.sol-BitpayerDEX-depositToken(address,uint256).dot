digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(token != address(0))

IRs:
TMP_180 = CONVERT 0 to address
TMP_181(bool) = token != TMP_180
TMP_182(None) = SOLIDITY_CALL require(bool)(TMP_181)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(ERC20Essential(token).transferFrom(msg.sender,address(this),amount))

IRs:
TMP_183 = CONVERT token to ERC20Essential
TMP_184 = CONVERT this to address
TMP_185(bool) = HIGH_LEVEL_CALL, dest:TMP_183(ERC20Essential), function:transferFrom, arguments:['msg.sender', 'TMP_184', 'amount']  
TMP_186(None) = SOLIDITY_CALL require(bool)(TMP_185)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokens[token][msg.sender] = tokens[token][msg.sender].add(amount)

IRs:
REF_111(mapping(address => uint256)) -> tokens[token]
REF_112(uint256) -> REF_111[msg.sender]
REF_113(mapping(address => uint256)) -> tokens[token]
REF_114(uint256) -> REF_113[msg.sender]
TMP_187(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_114', 'amount'] 
REF_112 (->tokens) := TMP_187(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Deposit(now,token,msg.sender,amount,tokens[token][msg.sender])

IRs:
REF_116(mapping(address => uint256)) -> tokens[token]
REF_117(uint256) -> REF_116[msg.sender]
Emit Deposit(now.token.msg.sender.amount.REF_117)"];
}
