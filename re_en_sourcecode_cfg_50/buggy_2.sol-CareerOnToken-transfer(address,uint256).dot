digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_to != address(this) && ! isTransPaused && balances[msg.sender] >= _value && balances[_to] + _value > balances[_to])

IRs:
TMP_46 = CONVERT this to address
TMP_47(bool) = _to != TMP_46
TMP_48 = ! isTransPaused 
TMP_49(bool) = TMP_47 && TMP_48
REF_34(uint256) -> balances[msg.sender]
TMP_50(bool) = REF_34 >= _value
TMP_51(bool) = TMP_49 && TMP_50
REF_35(uint256) -> balances[_to]
TMP_52(uint256) = REF_35 + _value
REF_36(uint256) -> balances[_to]
TMP_53(bool) = TMP_52 > REF_36
TMP_54(bool) = TMP_51 && TMP_53
TMP_55(None) = SOLIDITY_CALL assert(bool)(TMP_54)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_37(uint256) -> balances[msg.sender]
REF_37(-> balances) = REF_37 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _value

IRs:
REF_38(uint256) -> balances[_to]
REF_38(-> balances) = REF_38 + _value"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
msg.sender == owner

IRs:
TMP_56(bool) = msg.sender == owner
CONDITION TMP_56"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(address(this),_to,_value)

IRs:
TMP_57 = CONVERT this to address
Emit Transfer(TMP_57._to._value)"];
5->7;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender._to._value)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
