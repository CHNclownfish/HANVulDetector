digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0x0))

IRs:
TMP_225 = CONVERT 0 to address
TMP_226(bool) = _to != TMP_225
TMP_227(None) = SOLIDITY_CALL require(bool)(TMP_226)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_178(uint256) -> balanceOf[_from]
TMP_228(bool) = REF_178 >= _value
TMP_229(None) = SOLIDITY_CALL require(bool)(TMP_228)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balanceOf[_to] + _value >= balanceOf[_to])

IRs:
REF_179(uint256) -> balanceOf[_to]
TMP_230(uint256) = REF_179 + _value
REF_180(uint256) -> balanceOf[_to]
TMP_231(bool) = TMP_230 >= REF_180
TMP_232(None) = SOLIDITY_CALL require(bool)(TMP_231)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(! frozenAccount[_from])

IRs:
REF_181(bool) -> frozenAccount[_from]
TMP_233 = ! REF_181 
TMP_234(None) = SOLIDITY_CALL require(bool)(TMP_233)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(! frozenAccount[_to])

IRs:
REF_182(bool) -> frozenAccount[_to]
TMP_235 = ! REF_182 
TMP_236(None) = SOLIDITY_CALL require(bool)(TMP_235)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balanceOf[_from] -= _value

IRs:
REF_183(uint256) -> balanceOf[_from]
REF_183(-> balanceOf) = REF_183 - _value"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balanceOf[_to] += _value

IRs:
REF_184(uint256) -> balanceOf[_to]
REF_184(-> balanceOf) = REF_184 + _value"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from._to._value)"];
}
