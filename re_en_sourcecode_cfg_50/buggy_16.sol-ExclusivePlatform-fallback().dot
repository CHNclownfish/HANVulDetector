digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(crowdsaleIsOn && msg.value >= minimumBuy)

IRs:
TMP_168(bool) = msg.value >= minimumBuy
TMP_169(bool) = crowdsaleIsOn && TMP_168
TMP_170(None) = SOLIDITY_CALL require(bool)(TMP_169)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
totalBuy = (XPLPerEther.mul(msg.value)).div(1000000000000000000)

IRs:
TMP_171(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['XPLPerEther', 'msg.value'] 
TMP_172(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_171', '1000000000000000000'] 
totalBuy(uint256) := TMP_172(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalBuy = getBonus(totalBuy)

IRs:
TMP_173(uint256) = INTERNAL_CALL, ExclusivePlatform.getBonus(uint256)(totalBuy)
totalBuy(uint256) := TMP_173(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
doTransfer(owner,msg.sender,totalBuy)

IRs:
INTERNAL_CALL, ExclusivePlatform.doTransfer(address,address,uint256)(owner,msg.sender,totalBuy)"];
}
