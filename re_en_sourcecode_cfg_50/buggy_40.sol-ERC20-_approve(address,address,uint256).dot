digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(owner != address(0),ERC20: approve from the zero address)

IRs:
TMP_100 = CONVERT 0 to address
TMP_101(bool) = owner != TMP_100
TMP_102(None) = SOLIDITY_CALL require(bool,string)(TMP_101,ERC20: approve from the zero address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(spender != address(0),ERC20: approve to the zero address)

IRs:
TMP_103 = CONVERT 0 to address
TMP_104(bool) = spender != TMP_103
TMP_105(None) = SOLIDITY_CALL require(bool,string)(TMP_104,ERC20: approve to the zero address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_allowances[owner][spender] = value

IRs:
REF_66(mapping(address => uint256)) -> _allowances[owner]
REF_67(uint256) -> REF_66[spender]
REF_67 (->_allowances) := value(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Approval(owner,spender,value)

IRs:
Emit Approval(owner.spender.value)"];
}
