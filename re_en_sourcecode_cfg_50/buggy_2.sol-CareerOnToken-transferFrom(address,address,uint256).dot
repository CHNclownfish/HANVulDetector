digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_to != address(this) && ! isTransPaused && balances[msg.sender] >= _value && balances[_to] + _value > balances[_to] && allowed[_from][msg.sender] >= _value)

IRs:
TMP_65 = CONVERT this to address
TMP_66(bool) = _to != TMP_65
TMP_67 = ! isTransPaused 
TMP_68(bool) = TMP_66 && TMP_67
REF_40(uint256) -> balances[msg.sender]
TMP_69(bool) = REF_40 >= _value
TMP_70(bool) = TMP_68 && TMP_69
REF_41(uint256) -> balances[_to]
TMP_71(uint256) = REF_41 + _value
REF_42(uint256) -> balances[_to]
TMP_72(bool) = TMP_71 > REF_42
TMP_73(bool) = TMP_70 && TMP_72
REF_43(mapping(address => uint256)) -> allowed[_from]
REF_44(uint256) -> REF_43[msg.sender]
TMP_74(bool) = REF_44 >= _value
TMP_75(bool) = TMP_73 && TMP_74
TMP_76(None) = SOLIDITY_CALL assert(bool)(TMP_75)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] += _value

IRs:
REF_45(uint256) -> balances[_to]
REF_45(-> balances) = REF_45 + _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] -= _value

IRs:
REF_46(uint256) -> balances[_from]
REF_46(-> balances) = REF_46 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_47(mapping(address => uint256)) -> allowed[_from]
REF_48(uint256) -> REF_47[msg.sender]
REF_48(-> allowed) = REF_48 - _value"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_from == owner

IRs:
TMP_77(bool) = _from == owner
CONDITION TMP_77"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(address(this),_to,_value)

IRs:
TMP_78 = CONVERT this to address
Emit Transfer(TMP_78._to._value)"];
6->8;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from._to._value)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
}
