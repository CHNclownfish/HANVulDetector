digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gameList[_fixtureId].timestamp = _timestamp

IRs:
REF_55(WhiteBetting.GameInfo) -> gameList[_fixtureId]
REF_56(uint256) -> REF_55.timestamp
REF_56 (->gameList) := _timestamp(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
gameList[_fixtureId].odd_homeTeam = _odd_homeTeam

IRs:
REF_57(WhiteBetting.GameInfo) -> gameList[_fixtureId]
REF_58(uint32) -> REF_57.odd_homeTeam
REF_58 (->gameList) := _odd_homeTeam(uint32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
gameList[_fixtureId].odd_drawTeam = _odd_drawTeam

IRs:
REF_59(WhiteBetting.GameInfo) -> gameList[_fixtureId]
REF_60(uint32) -> REF_59.odd_drawTeam
REF_60 (->gameList) := _odd_drawTeam(uint32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
gameList[_fixtureId].odd_awayTeam = _odd_awayTeam

IRs:
REF_61(WhiteBetting.GameInfo) -> gameList[_fixtureId]
REF_62(uint32) -> REF_61.odd_awayTeam
REF_62 (->gameList) := _odd_awayTeam(uint32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
gameList[_fixtureId].odd_over = _odd_over

IRs:
REF_63(WhiteBetting.GameInfo) -> gameList[_fixtureId]
REF_64(uint32) -> REF_63.odd_over
REF_64 (->gameList) := _odd_over(uint32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
gameList[_fixtureId].odd_under = _odd_under

IRs:
REF_65(WhiteBetting.GameInfo) -> gameList[_fixtureId]
REF_66(uint32) -> REF_65.odd_under
REF_66 (->gameList) := _odd_under(uint32)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw

IRs:
REF_67(WhiteBetting.GameInfo) -> gameList[_fixtureId]
REF_68(uint32) -> REF_67.odd_homeTeamAndDraw
REF_68 (->gameList) := _odd_homeTeamAndDraw(uint32)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam

IRs:
REF_69(WhiteBetting.GameInfo) -> gameList[_fixtureId]
REF_70(uint32) -> REF_69.odd_homeAndAwayTeam
REF_70 (->gameList) := _odd_homeAndAwayTeam(uint32)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw

IRs:
REF_71(WhiteBetting.GameInfo) -> gameList[_fixtureId]
REF_72(uint32) -> REF_71.odd_awayTeamAndDraw
REF_72 (->gameList) := _odd_awayTeamAndDraw(uint32)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
gameList[_fixtureId].open_status = _open_status

IRs:
REF_73(WhiteBetting.GameInfo) -> gameList[_fixtureId]
REF_74(uint8) -> REF_73.open_status
REF_74 (->gameList) := _open_status(uint8)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
gameList[_fixtureId].isDone = false

IRs:
REF_75(WhiteBetting.GameInfo) -> gameList[_fixtureId]
REF_76(bool) -> REF_75.isDone
REF_76 (->gameList) := False(bool)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
SetGame(_fixtureId,_timestamp,_odd_homeTeam,_odd_drawTeam,_odd_awayTeam,_odd_over,_odd_under,_odd_homeTeamAndDraw,_odd_homeAndAwayTeam,_odd_awayTeamAndDraw,_open_status)

IRs:
Emit SetGame(_fixtureId._timestamp._odd_homeTeam._odd_drawTeam._odd_awayTeam._odd_over._odd_under._odd_homeTeamAndDraw._odd_homeAndAwayTeam._odd_awayTeamAndDraw._open_status)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, WhiteBetting.onlyOwner()()"];
13->1;
}
