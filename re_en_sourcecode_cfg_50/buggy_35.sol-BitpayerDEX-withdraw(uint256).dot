digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(! safeGuard,System Paused by Admin)

IRs:
TMP_164 = ! safeGuard 
TMP_165(None) = SOLIDITY_CALL require(bool,string)(TMP_164,System Paused by Admin)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(tokens[address(0)][msg.sender] >= amount)

IRs:
TMP_166 = CONVERT 0 to address
REF_97(mapping(address => uint256)) -> tokens[TMP_166]
REF_98(uint256) -> REF_97[msg.sender]
TMP_167(bool) = REF_98 >= amount
TMP_168(None) = SOLIDITY_CALL require(bool)(TMP_167)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].sub(amount)

IRs:
TMP_169 = CONVERT 0 to address
REF_99(mapping(address => uint256)) -> tokens[TMP_169]
REF_100(uint256) -> REF_99[msg.sender]
TMP_170 = CONVERT 0 to address
REF_101(mapping(address => uint256)) -> tokens[TMP_170]
REF_102(uint256) -> REF_101[msg.sender]
TMP_171(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_102', 'amount'] 
REF_100 (->tokens) := TMP_171(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
msg.sender.transfer(amount)

IRs:
Transfer dest:msg.sender value:amount"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Withdraw(now,address(0),msg.sender,amount,tokens[address(0)][msg.sender])

IRs:
TMP_173 = CONVERT 0 to address
TMP_174 = CONVERT 0 to address
REF_105(mapping(address => uint256)) -> tokens[TMP_174]
REF_106(uint256) -> REF_105[msg.sender]
Emit Withdraw(now.TMP_173.msg.sender.amount.REF_106)"];
}
