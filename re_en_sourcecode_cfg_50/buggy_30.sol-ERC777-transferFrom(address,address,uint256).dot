digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(recipient != address(0),ERC777: transfer to the zero address)

IRs:
TMP_88 = CONVERT 0 to address
TMP_89(bool) = recipient != TMP_88
TMP_90(None) = SOLIDITY_CALL require(bool,string)(TMP_89,ERC777: transfer to the zero address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(holder != address(0),ERC777: transfer from the zero address)

IRs:
TMP_91 = CONVERT 0 to address
TMP_92(bool) = holder != TMP_91
TMP_93(None) = SOLIDITY_CALL require(bool,string)(TMP_92,ERC777: transfer from the zero address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
spender = msg.sender

IRs:
spender(address) := msg.sender(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_callTokensToSend(spender,holder,recipient,amount,,)

IRs:
INTERNAL_CALL, ERC777._callTokensToSend(address,address,address,uint256,bytes,bytes)(spender,holder,recipient,amount,,)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_move(spender,holder,recipient,amount,,)

IRs:
INTERNAL_CALL, ERC777._move(address,address,address,uint256,bytes,bytes)(spender,holder,recipient,amount,,)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_approve(holder,spender,_allowances[holder][spender].sub(amount))

IRs:
REF_45(mapping(address => uint256)) -> _allowances[holder]
REF_46(uint256) -> REF_45[spender]
TMP_96(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_46', 'amount'] 
INTERNAL_CALL, ERC777._approve(address,address,uint256)(holder,spender,TMP_96)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_callTokensReceived(spender,holder,recipient,amount,,,false)

IRs:
INTERNAL_CALL, ERC777._callTokensReceived(address,address,address,uint256,bytes,bytes,bool)(spender,holder,recipient,amount,,,False)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
