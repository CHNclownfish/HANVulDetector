digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_amount >= XPLPerEther.mul(5)

IRs:
TMP_155(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['XPLPerEther', '5'] 
TMP_156(bool) = _amount >= TMP_155
CONDITION TMP_156"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
((20 * _amount).div(100)).add(_amount)

IRs:
TMP_157(uint256) = 20 * _amount
TMP_158(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_157', '100'] 
TMP_159(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_158', '_amount'] 
RETURN TMP_159"];
3[label="Node Type: IF 3

EXPRESSION:
_amount >= XPLPerEther

IRs:
TMP_160(bool) = _amount >= XPLPerEther
CONDITION TMP_160"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((5 * _amount).div(100)).add(_amount)

IRs:
TMP_161(uint256) = 5 * _amount
TMP_162(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_161', '100'] 
TMP_163(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_162', '_amount'] 
RETURN TMP_163"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
_amount

IRs:
RETURN _amount"];
}
