digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_to != address(0),ERC20: transfer to the zero address)

IRs:
TMP_104 = CONVERT 0 to address
TMP_105(bool) = _to != TMP_104
TMP_106(None) = SOLIDITY_CALL require(bool,string)(TMP_105,ERC20: transfer to the zero address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_balances[_from] = _balances[_from].sub(_value)

IRs:
REF_67(uint256) -> _balances[_from]
REF_68(uint256) -> _balances[_from]
TMP_107(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_68', '_value'] 
REF_67 (->_balances) := TMP_107(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_balances[_to] = _balances[_to].add(_value)

IRs:
REF_70(uint256) -> _balances[_to]
REF_71(uint256) -> _balances[_to]
TMP_108(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_71', '_value'] 
REF_70 (->_balances) := TMP_108(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from._to._value)"];
}
