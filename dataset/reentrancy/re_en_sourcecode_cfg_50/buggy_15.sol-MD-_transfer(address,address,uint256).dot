digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0x0))

IRs:
TMP_43 = CONVERT 0 to address
TMP_44(bool) = _to != TMP_43
TMP_45(None) = SOLIDITY_CALL require(bool)(TMP_44)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_23(uint256) -> balanceOf[_from]
TMP_46(bool) = REF_23 >= _value
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balanceOf[_to] + _value >= balanceOf[_to])

IRs:
REF_24(uint256) -> balanceOf[_to]
TMP_48(uint256) = REF_24 + _value
REF_25(uint256) -> balanceOf[_to]
TMP_49(bool) = TMP_48 >= REF_25
TMP_50(None) = SOLIDITY_CALL require(bool)(TMP_49)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
previousBalances = balanceOf[_from] + balanceOf[_to]

IRs:
REF_26(uint256) -> balanceOf[_from]
REF_27(uint256) -> balanceOf[_to]
TMP_51(uint256) = REF_26 + REF_27
previousBalances(uint256) := TMP_51(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balanceOf[_from] -= _value

IRs:
REF_28(uint256) -> balanceOf[_from]
REF_28(-> balanceOf) = REF_28 - _value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balanceOf[_to] += _value

IRs:
REF_29(uint256) -> balanceOf[_to]
REF_29(-> balanceOf) = REF_29 + _value"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from._to._value)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
assert(bool)(balanceOf[_from] + balanceOf[_to] == previousBalances)

IRs:
REF_30(uint256) -> balanceOf[_from]
REF_31(uint256) -> balanceOf[_to]
TMP_53(uint256) = REF_30 + REF_31
TMP_54(bool) = TMP_53 == previousBalances
TMP_55(None) = SOLIDITY_CALL assert(bool)(TMP_54)"];
}
