digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owncount = getHashOwnersCount(hash)

IRs:
TMP_90(uint256) = INTERNAL_CALL, digitalNotary.getHashOwnersCount(bytes32)(hash)
owncount(uint256) := TMP_90(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(owncount > 0)

IRs:
TMP_91(bool) = owncount > 0
TMP_92(None) = SOLIDITY_CALL require(bool)(TMP_91)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(indx < owncount)

IRs:
TMP_93(bool) = indx < owncount
TMP_94(None) = SOLIDITY_CALL require(bool)(TMP_93)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(HashList[hash][indx].owner,HashList[hash][indx].registrationtime)

IRs:
REF_66(digitalNotary.HashRegistration[]) -> HashList[hash]
REF_67(digitalNotary.HashRegistration) -> REF_66[indx]
REF_68(address) -> REF_67.owner
REF_69(digitalNotary.HashRegistration[]) -> HashList[hash]
REF_70(digitalNotary.HashRegistration) -> REF_69[indx]
REF_71(uint256) -> REF_70.registrationtime
RETURN REF_68,REF_71"];
}
