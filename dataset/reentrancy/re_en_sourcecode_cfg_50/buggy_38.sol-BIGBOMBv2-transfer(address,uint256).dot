digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(value <= _balances[msg.sender])

IRs:
REF_79(uint256) -> _balances[msg.sender]
TMP_112(bool) = value <= REF_79
TMP_113(None) = SOLIDITY_CALL require(bool)(TMP_112)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(to != address(0))

IRs:
TMP_114 = CONVERT 0 to address
TMP_115(bool) = to != TMP_114
TMP_116(None) = SOLIDITY_CALL require(bool)(TMP_115)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
tokensToBurn = findfourPercent(value)

IRs:
TMP_117(uint256) = INTERNAL_CALL, BIGBOMBv2.findfourPercent(uint256)(value)
tokensToBurn(uint256) := TMP_117(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
tokensToTransfer = value.sub(tokensToBurn)

IRs:
TMP_118(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['value', 'tokensToBurn'] 
tokensToTransfer(uint256) := TMP_118(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_balances[msg.sender] = _balances[msg.sender].sub(value)

IRs:
REF_81(uint256) -> _balances[msg.sender]
REF_82(uint256) -> _balances[msg.sender]
TMP_119(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_82', 'value'] 
REF_81 (->_balances) := TMP_119(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_balances[to] = _balances[to].add(tokensToTransfer)

IRs:
REF_84(uint256) -> _balances[to]
REF_85(uint256) -> _balances[to]
TMP_120(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_85', 'tokensToTransfer'] 
REF_84 (->_balances) := TMP_120(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_totalSupply = _totalSupply.sub(tokensToBurn)

IRs:
TMP_121(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_totalSupply', 'tokensToBurn'] 
_totalSupply(uint256) := TMP_121(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(msg.sender,to,tokensToTransfer)

IRs:
Emit Transfer(msg.sender.to.tokensToTransfer)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(msg.sender,address(0),tokensToBurn)

IRs:
TMP_123 = CONVERT 0 to address
Emit Transfer(msg.sender.TMP_123.tokensToBurn)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
}
