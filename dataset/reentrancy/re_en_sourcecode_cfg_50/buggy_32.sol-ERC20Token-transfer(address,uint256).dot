digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(_value)

IRs:
REF_35(uint256) -> balances[msg.sender]
REF_36(uint256) -> balances[msg.sender]
TMP_59(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_36', '_value'] 
REF_35 (->balances) := TMP_59(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_38(uint256) -> balances[_to]
REF_39(uint256) -> balances[_to]
TMP_60(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_39', '_value'] 
REF_38 (->balances) := TMP_60(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender._to._value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
