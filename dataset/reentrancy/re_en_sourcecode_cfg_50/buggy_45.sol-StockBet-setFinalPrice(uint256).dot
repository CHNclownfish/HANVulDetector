digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
finalPrice = _value

IRs:
finalPrice(uint256) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
FinalPriceSet(finalPrice)

IRs:
Emit FinalPriceSet(finalPrice)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
finalPrice > initialPrice

IRs:
TMP_112(bool) = finalPrice > initialPrice
CONDITION TMP_112"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
result = UP

IRs:
result(uint256) := UP(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
result = DOWN

IRs:
result(uint256) := DOWN(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
guesses[result].guesses_number > 0

IRs:
REF_87(StockBet.Guess) -> guesses[result]
REF_88(uint256) -> REF_87.guesses_number
TMP_113(bool) = REF_88 > 0
CONDITION TMP_113"];
7->8[label="True"];
7->11[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
state = State.PLAYERS_WIN

IRs:
REF_89(StockBet.State) -> State.PLAYERS_WIN
state(StockBet.State) := REF_89(StockBet.State)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
splitJackpot = getBalance() / guesses[result].guesses_number

IRs:
TMP_114(uint256) = INTERNAL_CALL, StockBet.getBalance()()
REF_90(StockBet.Guess) -> guesses[result]
REF_91(uint256) -> REF_90.guesses_number
TMP_115(uint256) = TMP_114 / REF_91
splitJackpot(uint256) := TMP_115(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
PlayersWin(result,splitJackpot)

IRs:
Emit PlayersWin(result.splitJackpot)"];
10->13;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
state = State.OWNER_WIN

IRs:
REF_92(StockBet.State) -> State.OWNER_WIN
state(StockBet.State) := REF_92(StockBet.State)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
OwnerWins(owner)

IRs:
Emit OwnerWins(owner)"];
12->13;
13[label="Node Type: END_IF 13
"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
byOracle()

IRs:
MODIFIER_CALL, StockBet.byOracle()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
inState(State.CLOSED)

IRs:
REF_93(StockBet.State) -> State.CLOSED
MODIFIER_CALL, StockBet.inState(StockBet.State)(REF_93)"];
15->1;
}
