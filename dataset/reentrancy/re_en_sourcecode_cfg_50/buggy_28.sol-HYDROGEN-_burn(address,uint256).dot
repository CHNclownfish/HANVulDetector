digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(amount != 0)

IRs:
TMP_188(bool) = amount != 0
TMP_189(None) = SOLIDITY_CALL require(bool)(TMP_188)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(amount <= _balances[account])

IRs:
REF_149(uint256) -> _balances[account]
TMP_190(bool) = amount <= REF_149
TMP_191(None) = SOLIDITY_CALL require(bool)(TMP_190)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_totalSupply = _totalSupply.sub(amount)

IRs:
TMP_192(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_totalSupply', 'amount'] 
_totalSupply(uint256) := TMP_192(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_balances[account] = _balances[account].sub(amount)

IRs:
REF_151(uint256) -> _balances[account]
REF_152(uint256) -> _balances[account]
TMP_193(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_152', 'amount'] 
REF_151 (->_balances) := TMP_193(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(account,address(0),amount)

IRs:
TMP_194 = CONVERT 0 to address
Emit Transfer(account.TMP_194.amount)"];
}
