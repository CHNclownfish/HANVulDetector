digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(initialized)

IRs:
TMP_197(None) = SOLIDITY_CALL require(bool)(initialized)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
p = proposals[proposalNumber]

IRs:
REF_124(MindsyncPlatform.Proposal) -> proposals[proposalNumber]
p(MindsyncPlatform.Proposal) := REF_124(MindsyncPlatform.Proposal)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(msg.sender == chairmanAddress)

IRs:
TMP_198(bool) = msg.sender == chairmanAddress
TMP_199(None) = SOLIDITY_CALL require(bool)(TMP_198)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(signProposal == true)

IRs:
TMP_200(bool) = signProposal == True
TMP_201(None) = SOLIDITY_CALL require(bool)(TMP_200)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
p.signedByChairman = signProposal

IRs:
REF_125(bool) -> p.signedByChairman
REF_125 (->p) := signProposal(bool)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ProposalSignedByChairman(proposalNumber,signProposal,msg.sender)

IRs:
Emit ProposalSignedByChairman(proposalNumber.signProposal.msg.sender)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
proposalNumber

IRs:
RETURN proposalNumber"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyTokenholders()

IRs:
MODIFIER_CALL, MindsyncPlatform.onlyTokenholders()()"];
8->1;
}
