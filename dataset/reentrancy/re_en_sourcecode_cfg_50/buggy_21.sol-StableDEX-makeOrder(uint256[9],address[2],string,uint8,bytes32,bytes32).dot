digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->59;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == feeAddress)

IRs:
TMP_216(bool) = msg.sender == feeAddress
TMP_217(None) = SOLIDITY_CALL require(bool)(TMP_216)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(verify((message),v,r,s) == traderAddresses[1])

IRs:
TMP_218(address) = INTERNAL_CALL, StableDEX.verify(string,uint8,bytes32,bytes32)(message,v,r,s)
REF_144(address) -> traderAddresses[1]
TMP_219(bool) = TMP_218 == REF_144
TMP_220(None) = SOLIDITY_CALL require(bool)(TMP_219)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
orderiD = tradeDetails[0]

IRs:
REF_145(uint256) -> tradeDetails[0]
orderiD(uint256) := REF_145(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
Order[orderiD].status == 0

IRs:
REF_146(StableDEX.orders) -> Order[orderiD]
REF_147(uint256) -> REF_146.status
TMP_221(bool) = REF_147 == 0
CONDITION TMP_221"];
5->6[label="True"];
5->24[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
tradeDetails[6] == 0

IRs:
REF_148(uint256) -> tradeDetails[6]
TMP_222(bool) = REF_148 == 0
CONDITION TMP_222"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
amount__ = tradeDetails[3]

IRs:
REF_149(uint256) -> tradeDetails[3]
amount__(uint256) := REF_149(uint256)"];
7->11;
8[label="Node Type: IF 8

EXPRESSION:
tradeDetails[6] == 1

IRs:
REF_150(uint256) -> tradeDetails[6]
TMP_223(bool) = REF_150 == 1
CONDITION TMP_223"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
amount__ = tradeDetails[1]

IRs:
REF_151(uint256) -> tradeDetails[1]
amount__(uint256) := REF_151(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
require(bool)(amount__ > 0 && amount__ <= userDetails[traderAddresses[1]][traderAddresses[0]])

IRs:
TMP_224(bool) = amount__ > 0
REF_152(address) -> traderAddresses[1]
REF_153(mapping(address => uint256)) -> userDetails[REF_152]
REF_154(address) -> traderAddresses[0]
REF_155(uint256) -> REF_153[REF_154]
TMP_225(bool) = amount__ <= REF_155
TMP_226(bool) = TMP_224 && TMP_225
TMP_227(None) = SOLIDITY_CALL require(bool)(TMP_226)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
Order[orderiD].userAddress = traderAddresses[1]

IRs:
REF_156(StableDEX.orders) -> Order[orderiD]
REF_157(address) -> REF_156.userAddress
REF_158(address) -> traderAddresses[1]
REF_157 (->Order) := REF_158(address)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
Order[orderiD].type_ = tradeDetails[6]

IRs:
REF_159(StableDEX.orders) -> Order[orderiD]
REF_160(uint256) -> REF_159.type_
REF_161(uint256) -> tradeDetails[6]
REF_160 (->Order) := REF_161(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
Order[orderiD].price = tradeDetails[2]

IRs:
REF_162(StableDEX.orders) -> Order[orderiD]
REF_163(uint256) -> REF_162.price
REF_164(uint256) -> tradeDetails[2]
REF_163 (->Order) := REF_164(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
Order[orderiD].amount = tradeDetails[1]

IRs:
REF_165(StableDEX.orders) -> Order[orderiD]
REF_166(uint256) -> REF_165.amount
REF_167(uint256) -> tradeDetails[1]
REF_166 (->Order) := REF_167(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
Order[orderiD].total = tradeDetails[3]

IRs:
REF_168(StableDEX.orders) -> Order[orderiD]
REF_169(uint256) -> REF_168.total
REF_170(uint256) -> tradeDetails[3]
REF_169 (->Order) := REF_170(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
Order[orderiD].tradeTotal = tradeDetails[3]

IRs:
REF_171(StableDEX.orders) -> Order[orderiD]
REF_172(uint256) -> REF_171.tradeTotal
REF_173(uint256) -> tradeDetails[3]
REF_172 (->Order) := REF_173(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
Order[orderiD]._decimal = tradeDetails[7]

IRs:
REF_174(StableDEX.orders) -> Order[orderiD]
REF_175(uint256) -> REF_174._decimal
REF_176(uint256) -> tradeDetails[7]
REF_175 (->Order) := REF_176(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
Order[orderiD].tokenAddress = traderAddresses[0]

IRs:
REF_177(StableDEX.orders) -> Order[orderiD]
REF_178(address) -> REF_177.tokenAddress
REF_179(address) -> traderAddresses[0]
REF_178 (->Order) := REF_179(address)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
userDetails[traderAddresses[1]][traderAddresses[0]] = userDetails[traderAddresses[1]][traderAddresses[0]].sub(amount__)

IRs:
REF_180(address) -> traderAddresses[1]
REF_181(mapping(address => uint256)) -> userDetails[REF_180]
REF_182(address) -> traderAddresses[0]
REF_183(uint256) -> REF_181[REF_182]
REF_184(address) -> traderAddresses[1]
REF_185(mapping(address => uint256)) -> userDetails[REF_184]
REF_186(address) -> traderAddresses[0]
REF_187(uint256) -> REF_185[REF_186]
TMP_228(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_187', 'amount__'] 
REF_183 (->userDetails) := TMP_228(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
Order[orderiD].tradeAmount = tradeDetails[1]

IRs:
REF_189(StableDEX.orders) -> Order[orderiD]
REF_190(uint256) -> REF_189.tradeAmount
REF_191(uint256) -> tradeDetails[1]
REF_190 (->Order) := REF_191(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
Order[orderiD].status = 1

IRs:
REF_192(StableDEX.orders) -> Order[orderiD]
REF_193(uint256) -> REF_192.status
REF_193 (->Order) := 1(uint256)"];
23->27;
24[label="Node Type: IF 24

EXPRESSION:
Order[orderiD].status == 1 && tradeDetails[8] == 0

IRs:
REF_194(StableDEX.orders) -> Order[orderiD]
REF_195(uint256) -> REF_194.status
TMP_229(bool) = REF_195 == 1
REF_196(uint256) -> tradeDetails[8]
TMP_230(bool) = REF_196 == 0
TMP_231(bool) = TMP_229 && TMP_230
CONDITION TMP_231"];
24->25[label="True"];
24->26[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
cancelOrder(orderiD)

IRs:
TMP_232(bool) = INTERNAL_CALL, StableDEX.cancelOrder(uint256)(orderiD)"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: IF 28

EXPRESSION:
Order[orderiD].status == 1 && tradeDetails[1] > 0 && tradeDetails[8] > 0 && Order[tradeDetails[8]].status == 1 && tradeDetails[3] > 0

IRs:
REF_197(StableDEX.orders) -> Order[orderiD]
REF_198(uint256) -> REF_197.status
TMP_233(bool) = REF_198 == 1
REF_199(uint256) -> tradeDetails[1]
TMP_234(bool) = REF_199 > 0
TMP_235(bool) = TMP_233 && TMP_234
REF_200(uint256) -> tradeDetails[8]
TMP_236(bool) = REF_200 > 0
TMP_237(bool) = TMP_235 && TMP_236
REF_201(uint256) -> tradeDetails[8]
REF_202(StableDEX.orders) -> Order[REF_201]
REF_203(uint256) -> REF_202.status
TMP_238(bool) = REF_203 == 1
TMP_239(bool) = TMP_237 && TMP_238
REF_204(uint256) -> tradeDetails[3]
TMP_240(bool) = REF_204 > 0
TMP_241(bool) = TMP_239 && TMP_240
CONDITION TMP_241"];
28->29[label="True"];
28->57[label="False"];
29[label="Node Type: EXPRESSION 29

EXPRESSION:
Order[orderiD].tradeAmount = Order[orderiD].tradeAmount.sub(tradeDetails[1])

IRs:
REF_205(StableDEX.orders) -> Order[orderiD]
REF_206(uint256) -> REF_205.tradeAmount
REF_207(StableDEX.orders) -> Order[orderiD]
REF_208(uint256) -> REF_207.tradeAmount
REF_210(uint256) -> tradeDetails[1]
TMP_242(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_208', 'REF_210'] 
REF_206 (->Order) := TMP_242(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
Order[tradeDetails[8]].tradeAmount = Order[tradeDetails[8]].tradeAmount.sub(tradeDetails[1])

IRs:
REF_211(uint256) -> tradeDetails[8]
REF_212(StableDEX.orders) -> Order[REF_211]
REF_213(uint256) -> REF_212.tradeAmount
REF_214(uint256) -> tradeDetails[8]
REF_215(StableDEX.orders) -> Order[REF_214]
REF_216(uint256) -> REF_215.tradeAmount
REF_218(uint256) -> tradeDetails[1]
TMP_243(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_216', 'REF_218'] 
REF_213 (->Order) := TMP_243(uint256)"];
30->31;
31[label="Node Type: IF 31

EXPRESSION:
tradeDetails[2] > 0

IRs:
REF_219(uint256) -> tradeDetails[2]
TMP_244(bool) = REF_219 > 0
CONDITION TMP_244"];
31->32[label="True"];
31->33[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
userDetails[Order[orderiD].userAddress][Order[orderiD].tokenAddress] = userDetails[Order[orderiD].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[2])

IRs:
REF_220(StableDEX.orders) -> Order[orderiD]
REF_221(address) -> REF_220.userAddress
REF_222(mapping(address => uint256)) -> userDetails[REF_221]
REF_223(StableDEX.orders) -> Order[orderiD]
REF_224(address) -> REF_223.tokenAddress
REF_225(uint256) -> REF_222[REF_224]
REF_226(StableDEX.orders) -> Order[orderiD]
REF_227(address) -> REF_226.userAddress
REF_228(mapping(address => uint256)) -> userDetails[REF_227]
REF_229(StableDEX.orders) -> Order[orderiD]
REF_230(address) -> REF_229.tokenAddress
REF_231(uint256) -> REF_228[REF_230]
REF_233(uint256) -> tradeDetails[2]
TMP_245(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_231', 'REF_233'] 
REF_225 (->userDetails) := TMP_245(uint256)"];
32->33;
33[label="Node Type: END_IF 33
"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
Order[orderiD].tradeTotal = Order[orderiD].tradeTotal.sub(((tradeDetails[1].mul(Order[orderiD].price)).div(Order[orderiD]._decimal)))

IRs:
REF_234(StableDEX.orders) -> Order[orderiD]
REF_235(uint256) -> REF_234.tradeTotal
REF_236(StableDEX.orders) -> Order[orderiD]
REF_237(uint256) -> REF_236.tradeTotal
REF_239(uint256) -> tradeDetails[1]
REF_241(StableDEX.orders) -> Order[orderiD]
REF_242(uint256) -> REF_241.price
TMP_246(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_239', 'REF_242'] 
REF_244(StableDEX.orders) -> Order[orderiD]
REF_245(uint256) -> REF_244._decimal
TMP_247(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_246', 'REF_245'] 
TMP_248(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_237', 'TMP_247'] 
REF_235 (->Order) := TMP_248(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
Order[tradeDetails[8]].tradeTotal = Order[tradeDetails[8]].tradeTotal.sub(((tradeDetails[1].mul(Order[tradeDetails[8]].price)).div(Order[tradeDetails[8]]._decimal)))

IRs:
REF_246(uint256) -> tradeDetails[8]
REF_247(StableDEX.orders) -> Order[REF_246]
REF_248(uint256) -> REF_247.tradeTotal
REF_249(uint256) -> tradeDetails[8]
REF_250(StableDEX.orders) -> Order[REF_249]
REF_251(uint256) -> REF_250.tradeTotal
REF_253(uint256) -> tradeDetails[1]
REF_255(uint256) -> tradeDetails[8]
REF_256(StableDEX.orders) -> Order[REF_255]
REF_257(uint256) -> REF_256.price
TMP_249(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_253', 'REF_257'] 
REF_259(uint256) -> tradeDetails[8]
REF_260(StableDEX.orders) -> Order[REF_259]
REF_261(uint256) -> REF_260._decimal
TMP_250(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_249', 'REF_261'] 
TMP_251(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_251', 'TMP_250'] 
REF_248 (->Order) := TMP_251(uint256)"];
35->36;
36[label="Node Type: IF 36

EXPRESSION:
tradeDetails[6] == 1 || tradeDetails[6] == 3

IRs:
REF_262(uint256) -> tradeDetails[6]
TMP_252(bool) = REF_262 == 1
REF_263(uint256) -> tradeDetails[6]
TMP_253(bool) = REF_263 == 3
TMP_254(bool) = TMP_252 || TMP_253
CONDITION TMP_254"];
36->37[label="True"];
36->40[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress] = userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[1])

IRs:
REF_264(StableDEX.orders) -> Order[orderiD]
REF_265(address) -> REF_264.userAddress
REF_266(mapping(address => uint256)) -> userDetails[REF_265]
REF_267(uint256) -> tradeDetails[8]
REF_268(StableDEX.orders) -> Order[REF_267]
REF_269(address) -> REF_268.tokenAddress
REF_270(uint256) -> REF_266[REF_269]
REF_271(StableDEX.orders) -> Order[orderiD]
REF_272(address) -> REF_271.userAddress
REF_273(mapping(address => uint256)) -> userDetails[REF_272]
REF_274(uint256) -> tradeDetails[8]
REF_275(StableDEX.orders) -> Order[REF_274]
REF_276(address) -> REF_275.tokenAddress
REF_277(uint256) -> REF_273[REF_276]
REF_279(uint256) -> tradeDetails[1]
TMP_255(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_277', 'REF_279'] 
REF_270 (->userDetails) := TMP_255(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
userDetails[Order[orderiD].userAddress][traderAddresses[0]] = userDetails[Order[orderiD].userAddress][traderAddresses[0]].sub(tradeDetails[4])

IRs:
REF_280(StableDEX.orders) -> Order[orderiD]
REF_281(address) -> REF_280.userAddress
REF_282(mapping(address => uint256)) -> userDetails[REF_281]
REF_283(address) -> traderAddresses[0]
REF_284(uint256) -> REF_282[REF_283]
REF_285(StableDEX.orders) -> Order[orderiD]
REF_286(address) -> REF_285.userAddress
REF_287(mapping(address => uint256)) -> userDetails[REF_286]
REF_288(address) -> traderAddresses[0]
REF_289(uint256) -> REF_287[REF_288]
REF_291(uint256) -> tradeDetails[4]
TMP_256(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_289', 'REF_291'] 
REF_284 (->userDetails) := TMP_256(uint256)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
feeAmount[admin][traderAddresses[0]] = feeAmount[admin][traderAddresses[0]].add(tradeDetails[4])

IRs:
REF_292(mapping(address => uint256)) -> feeAmount[admin]
REF_293(address) -> traderAddresses[0]
REF_294(uint256) -> REF_292[REF_293]
REF_295(mapping(address => uint256)) -> feeAmount[admin]
REF_296(address) -> traderAddresses[0]
REF_297(uint256) -> REF_295[REF_296]
REF_299(uint256) -> tradeDetails[4]
TMP_257(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_297', 'REF_299'] 
REF_294 (->feeAmount) := TMP_257(uint256)"];
39->42;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress] = userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[1].sub(tradeDetails[4]))

IRs:
REF_300(StableDEX.orders) -> Order[orderiD]
REF_301(address) -> REF_300.userAddress
REF_302(mapping(address => uint256)) -> userDetails[REF_301]
REF_303(uint256) -> tradeDetails[8]
REF_304(StableDEX.orders) -> Order[REF_303]
REF_305(address) -> REF_304.tokenAddress
REF_306(uint256) -> REF_302[REF_305]
REF_307(StableDEX.orders) -> Order[orderiD]
REF_308(address) -> REF_307.userAddress
REF_309(mapping(address => uint256)) -> userDetails[REF_308]
REF_310(uint256) -> tradeDetails[8]
REF_311(StableDEX.orders) -> Order[REF_310]
REF_312(address) -> REF_311.tokenAddress
REF_313(uint256) -> REF_309[REF_312]
REF_315(uint256) -> tradeDetails[1]
REF_317(uint256) -> tradeDetails[4]
TMP_258(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_315', 'REF_317'] 
TMP_259(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_313', 'TMP_258'] 
REF_306 (->userDetails) := TMP_259(uint256)"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
feeAmount[admin][Order[tradeDetails[8]].tokenAddress] = feeAmount[admin][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[4])

IRs:
REF_318(mapping(address => uint256)) -> feeAmount[admin]
REF_319(uint256) -> tradeDetails[8]
REF_320(StableDEX.orders) -> Order[REF_319]
REF_321(address) -> REF_320.tokenAddress
REF_322(uint256) -> REF_318[REF_321]
REF_323(mapping(address => uint256)) -> feeAmount[admin]
REF_324(uint256) -> tradeDetails[8]
REF_325(StableDEX.orders) -> Order[REF_324]
REF_326(address) -> REF_325.tokenAddress
REF_327(uint256) -> REF_323[REF_326]
REF_329(uint256) -> tradeDetails[4]
TMP_260(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_327', 'REF_329'] 
REF_322 (->feeAmount) := TMP_260(uint256)"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: IF 43

EXPRESSION:
tradeDetails[6] == 2 || tradeDetails[6] == 3

IRs:
REF_330(uint256) -> tradeDetails[6]
TMP_261(bool) = REF_330 == 2
REF_331(uint256) -> tradeDetails[6]
TMP_262(bool) = REF_331 == 3
TMP_263(bool) = TMP_261 || TMP_262
CONDITION TMP_263"];
43->44[label="True"];
43->47[label="False"];
44[label="Node Type: EXPRESSION 44

EXPRESSION:
userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress] = userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[3])

IRs:
REF_332(uint256) -> tradeDetails[8]
REF_333(StableDEX.orders) -> Order[REF_332]
REF_334(address) -> REF_333.userAddress
REF_335(mapping(address => uint256)) -> userDetails[REF_334]
REF_336(StableDEX.orders) -> Order[orderiD]
REF_337(address) -> REF_336.tokenAddress
REF_338(uint256) -> REF_335[REF_337]
REF_339(uint256) -> tradeDetails[8]
REF_340(StableDEX.orders) -> Order[REF_339]
REF_341(address) -> REF_340.userAddress
REF_342(mapping(address => uint256)) -> userDetails[REF_341]
REF_343(StableDEX.orders) -> Order[orderiD]
REF_344(address) -> REF_343.tokenAddress
REF_345(uint256) -> REF_342[REF_344]
REF_347(uint256) -> tradeDetails[3]
TMP_264(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_345', 'REF_347'] 
REF_338 (->userDetails) := TMP_264(uint256)"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
userDetails[Order[tradeDetails[8]].userAddress][traderAddresses[0]] = userDetails[Order[tradeDetails[8]].userAddress][traderAddresses[0]].sub(tradeDetails[5])

IRs:
REF_348(uint256) -> tradeDetails[8]
REF_349(StableDEX.orders) -> Order[REF_348]
REF_350(address) -> REF_349.userAddress
REF_351(mapping(address => uint256)) -> userDetails[REF_350]
REF_352(address) -> traderAddresses[0]
REF_353(uint256) -> REF_351[REF_352]
REF_354(uint256) -> tradeDetails[8]
REF_355(StableDEX.orders) -> Order[REF_354]
REF_356(address) -> REF_355.userAddress
REF_357(mapping(address => uint256)) -> userDetails[REF_356]
REF_358(address) -> traderAddresses[0]
REF_359(uint256) -> REF_357[REF_358]
REF_361(uint256) -> tradeDetails[5]
TMP_265(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_359', 'REF_361'] 
REF_353 (->userDetails) := TMP_265(uint256)"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
feeAmount[admin][traderAddresses[0]] = feeAmount[admin][traderAddresses[0]].add(tradeDetails[5])

IRs:
REF_362(mapping(address => uint256)) -> feeAmount[admin]
REF_363(address) -> traderAddresses[0]
REF_364(uint256) -> REF_362[REF_363]
REF_365(mapping(address => uint256)) -> feeAmount[admin]
REF_366(address) -> traderAddresses[0]
REF_367(uint256) -> REF_365[REF_366]
REF_369(uint256) -> tradeDetails[5]
TMP_266(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_367', 'REF_369'] 
REF_364 (->feeAmount) := TMP_266(uint256)"];
46->49;
47[label="Node Type: EXPRESSION 47

EXPRESSION:
userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress] = userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[3].sub(tradeDetails[5]))

IRs:
REF_370(uint256) -> tradeDetails[8]
REF_371(StableDEX.orders) -> Order[REF_370]
REF_372(address) -> REF_371.userAddress
REF_373(mapping(address => uint256)) -> userDetails[REF_372]
REF_374(StableDEX.orders) -> Order[orderiD]
REF_375(address) -> REF_374.tokenAddress
REF_376(uint256) -> REF_373[REF_375]
REF_377(uint256) -> tradeDetails[8]
REF_378(StableDEX.orders) -> Order[REF_377]
REF_379(address) -> REF_378.userAddress
REF_380(mapping(address => uint256)) -> userDetails[REF_379]
REF_381(StableDEX.orders) -> Order[orderiD]
REF_382(address) -> REF_381.tokenAddress
REF_383(uint256) -> REF_380[REF_382]
REF_385(uint256) -> tradeDetails[3]
REF_387(uint256) -> tradeDetails[5]
TMP_267(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_385', 'REF_387'] 
TMP_268(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_383', 'TMP_267'] 
REF_376 (->userDetails) := TMP_268(uint256)"];
47->48;
48[label="Node Type: EXPRESSION 48

EXPRESSION:
feeAmount[admin][Order[orderiD].tokenAddress] = feeAmount[admin][Order[orderiD].tokenAddress].add(tradeDetails[5])

IRs:
REF_388(mapping(address => uint256)) -> feeAmount[admin]
REF_389(StableDEX.orders) -> Order[orderiD]
REF_390(address) -> REF_389.tokenAddress
REF_391(uint256) -> REF_388[REF_390]
REF_392(mapping(address => uint256)) -> feeAmount[admin]
REF_393(StableDEX.orders) -> Order[orderiD]
REF_394(address) -> REF_393.tokenAddress
REF_395(uint256) -> REF_392[REF_394]
REF_397(uint256) -> tradeDetails[5]
TMP_269(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_395', 'REF_397'] 
REF_391 (->feeAmount) := TMP_269(uint256)"];
48->49;
49[label="Node Type: END_IF 49
"];
49->50;
50[label="Node Type: IF 50

EXPRESSION:
Order[tradeDetails[8]].tradeAmount == 0

IRs:
REF_398(uint256) -> tradeDetails[8]
REF_399(StableDEX.orders) -> Order[REF_398]
REF_400(uint256) -> REF_399.tradeAmount
TMP_270(bool) = REF_400 == 0
CONDITION TMP_270"];
50->51[label="True"];
50->52[label="False"];
51[label="Node Type: EXPRESSION 51

EXPRESSION:
Order[tradeDetails[8]].status = 2

IRs:
REF_401(uint256) -> tradeDetails[8]
REF_402(StableDEX.orders) -> Order[REF_401]
REF_403(uint256) -> REF_402.status
REF_403 (->Order) := 2(uint256)"];
51->52;
52[label="Node Type: END_IF 52
"];
52->53;
53[label="Node Type: IF 53

EXPRESSION:
Order[orderiD].tradeAmount == 0

IRs:
REF_404(StableDEX.orders) -> Order[orderiD]
REF_405(uint256) -> REF_404.tradeAmount
TMP_271(bool) = REF_405 == 0
CONDITION TMP_271"];
53->54[label="True"];
53->55[label="False"];
54[label="Node Type: EXPRESSION 54

EXPRESSION:
Order[orderiD].status = 2

IRs:
REF_406(StableDEX.orders) -> Order[orderiD]
REF_407(uint256) -> REF_406.status
REF_407 (->Order) := 2(uint256)"];
54->55;
55[label="Node Type: END_IF 55
"];
55->56;
56[label="Node Type: EXPRESSION 56

EXPRESSION:
orderPairStatus[orderiD][tradeDetails[8]] = true

IRs:
REF_408(mapping(uint256 => bool)) -> orderPairStatus[orderiD]
REF_409(uint256) -> tradeDetails[8]
REF_410(bool) -> REF_408[REF_409]
REF_410 (->orderPairStatus) := True(bool)"];
56->57;
57[label="Node Type: END_IF 57
"];
57->58;
58[label="Node Type: RETURN 58

EXPRESSION:
true

IRs:
RETURN True"];
59[label="Node Type: EXPRESSION 59

EXPRESSION:
dexstatuscheck()

IRs:
MODIFIER_CALL, StableDEX.dexstatuscheck()()"];
59->1;
}
