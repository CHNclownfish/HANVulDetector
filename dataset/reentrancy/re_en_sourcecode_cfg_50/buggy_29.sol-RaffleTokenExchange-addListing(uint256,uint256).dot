digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(raffleContract.balanceOf(msg.sender) >= initialAmount,Amount to sell is higher than balance!)

IRs:
TMP_102(uint256) = HIGH_LEVEL_CALL, dest:raffleContract(RaffleToken), function:balanceOf, arguments:['msg.sender']  
TMP_103(bool) = TMP_102 >= initialAmount
TMP_104(None) = SOLIDITY_CALL require(bool,string)(TMP_103,Amount to sell is higher than balance!)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(raffleContract.allowance(msg.sender,address(this)) >= initialAmount,Allowance is to small (increase allowance)!)

IRs:
TMP_105 = CONVERT this to address
TMP_106(uint256) = HIGH_LEVEL_CALL, dest:raffleContract(RaffleToken), function:allowance, arguments:['msg.sender', 'TMP_105']  
TMP_107(bool) = TMP_106 >= initialAmount
TMP_108(None) = SOLIDITY_CALL require(bool,string)(TMP_107,Allowance is to small (increase allowance)!)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
id = nextListingId ++

IRs:
TMP_109(uint256) := nextListingId(uint256)
nextListingId(uint256) = nextListingId + 1
id(uint256) := TMP_109(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
listing = listingsById[id]

IRs:
REF_65(RaffleTokenExchange.Listing) -> listingsById[id]
listing(RaffleTokenExchange.Listing) := REF_65(RaffleTokenExchange.Listing)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
listing.initialAmount = initialAmount

IRs:
REF_66(uint256) -> listing.initialAmount
REF_66 (->listing) := initialAmount(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
listing.amountLeft = initialAmount

IRs:
REF_67(uint256) -> listing.amountLeft
REF_67 (->listing) := initialAmount(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
listing.pricePerToken = pricePerToken

IRs:
REF_68(uint256) -> listing.pricePerToken
REF_68 (->listing) := pricePerToken(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
listing.seller = msg.sender

IRs:
REF_69(address) -> listing.seller
REF_69 (->listing) := msg.sender(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
listing.active = true

IRs:
REF_70(bool) -> listing.active
REF_70 (->listing) := True(bool)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
Listed(id,listing.pricePerToken,listing.initialAmount,listing.seller)

IRs:
REF_71(uint256) -> listing.pricePerToken
REF_72(uint256) -> listing.initialAmount
REF_73(address) -> listing.seller
Emit Listed(id.REF_71.REF_72.REF_73)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
onlyUnpaused()

IRs:
MODIFIER_CALL, RaffleTokenExchange.onlyUnpaused()()"];
11->1;
}
