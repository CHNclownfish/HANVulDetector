digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(sender != address(0),ERC20: transfer from the zero address)

IRs:
TMP_98 = CONVERT 0 to address
TMP_99(bool) = sender != TMP_98
TMP_100(None) = SOLIDITY_CALL require(bool,string)(TMP_99,ERC20: transfer from the zero address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(recipient != address(0),ERC20: transfer to the zero address)

IRs:
TMP_101 = CONVERT 0 to address
TMP_102(bool) = recipient != TMP_101
TMP_103(None) = SOLIDITY_CALL require(bool,string)(TMP_102,ERC20: transfer to the zero address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
senderTimeElasped = now - (_balances[sender].time)

IRs:
REF_55(LollypopToken.transferMapping) -> _balances[sender]
REF_56(uint256) -> REF_55.time
TMP_104(uint256) = now - REF_56
senderTimeElasped(uint256) := TMP_104(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
recipientTimeElasped = now - (_balances[recipient].time)

IRs:
REF_57(LollypopToken.transferMapping) -> _balances[recipient]
REF_58(uint256) -> REF_57.time
TMP_105(uint256) = now - REF_58
recipientTimeElasped(uint256) := TMP_105(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
senderTimeElasped >= minAgeOfToken && (_totalSupply < _maxTotalSupply)

IRs:
TMP_106(bool) = senderTimeElasped >= minAgeOfToken
TMP_107(bool) = _totalSupply < _maxTotalSupply
TMP_108(bool) = TMP_106 && TMP_107
CONDITION TMP_108"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
bonus = calculateBonus(senderTimeElasped,balanceOf(sender))

IRs:
TMP_109(uint256) = INTERNAL_CALL, LollypopToken.balanceOf(address)(sender)
TMP_110(uint256) = INTERNAL_CALL, LollypopToken.calculateBonus(uint256,uint256)(senderTimeElasped,TMP_109)
bonus(uint256) := TMP_110(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
mint(sender,bonus)

IRs:
INTERNAL_CALL, LollypopToken.mint(address,uint256)(sender,bonus)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
recipientTimeElasped >= minAgeOfToken && (_totalSupply < _maxTotalSupply) && sender != recipient

IRs:
TMP_112(bool) = recipientTimeElasped >= minAgeOfToken
TMP_113(bool) = _totalSupply < _maxTotalSupply
TMP_114(bool) = TMP_112 && TMP_113
TMP_115(bool) = sender != recipient
TMP_116(bool) = TMP_114 && TMP_115
CONDITION TMP_116"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
bonus_scope_0 = calculateBonus(recipientTimeElasped,balanceOf(recipient))

IRs:
TMP_117(uint256) = INTERNAL_CALL, LollypopToken.balanceOf(address)(recipient)
TMP_118(uint256) = INTERNAL_CALL, LollypopToken.calculateBonus(uint256,uint256)(recipientTimeElasped,TMP_117)
bonus_scope_0(uint256) := TMP_118(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
mint(recipient,bonus_scope_0)

IRs:
INTERNAL_CALL, LollypopToken.mint(address,uint256)(recipient,bonus_scope_0)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_balances[sender].amount = _balances[sender].amount.sub(amount)

IRs:
REF_59(LollypopToken.transferMapping) -> _balances[sender]
REF_60(uint256) -> REF_59.amount
REF_61(LollypopToken.transferMapping) -> _balances[sender]
REF_62(uint256) -> REF_61.amount
TMP_120(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_62', 'amount'] 
REF_60 (->_balances) := TMP_120(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_balances[recipient].amount = _balances[recipient].amount.add(amount)

IRs:
REF_64(LollypopToken.transferMapping) -> _balances[recipient]
REF_65(uint256) -> REF_64.amount
REF_66(LollypopToken.transferMapping) -> _balances[recipient]
REF_67(uint256) -> REF_66.amount
TMP_121(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_67', 'amount'] 
REF_65 (->_balances) := TMP_121(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_balances[sender].time = now

IRs:
REF_69(LollypopToken.transferMapping) -> _balances[sender]
REF_70(uint256) -> REF_69.time
REF_70 (->_balances) := now(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_balances[recipient].time = now

IRs:
REF_71(LollypopToken.transferMapping) -> _balances[recipient]
REF_72(uint256) -> REF_71.time
REF_72 (->_balances) := now(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
Transfer(sender,recipient,amount)

IRs:
Emit Transfer(sender.recipient.amount)"];
}
