digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tradingFeeXfer = calculatePercentage(amount,tradingFee)

IRs:
TMP_240(uint256) = INTERNAL_CALL, BitpayerDEX.calculatePercentage(uint256,uint256)(amount,tradingFee)
tradingFeeXfer(uint256) := TMP_240(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokens[tokenGet][msg.sender] = tokens[tokenGet][msg.sender].sub(amount.add(tradingFeeXfer))

IRs:
REF_153(mapping(address => uint256)) -> tokens[tokenGet]
REF_154(uint256) -> REF_153[msg.sender]
REF_155(mapping(address => uint256)) -> tokens[tokenGet]
REF_156(uint256) -> REF_155[msg.sender]
TMP_241(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['amount', 'tradingFeeXfer'] 
TMP_242(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_156', 'TMP_241'] 
REF_154 (->tokens) := TMP_242(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokens[tokenGet][user] = tokens[tokenGet][user].add(amount.sub(tradingFeeXfer))

IRs:
REF_159(mapping(address => uint256)) -> tokens[tokenGet]
REF_160(uint256) -> REF_159[user]
REF_161(mapping(address => uint256)) -> tokens[tokenGet]
REF_162(uint256) -> REF_161[user]
TMP_243(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['amount', 'tradingFeeXfer'] 
TMP_244(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_162', 'TMP_243'] 
REF_160 (->tokens) := TMP_244(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokens[address(0)][feeAccount] = tokens[address(0)][feeAccount].add(tradingFeeXfer)

IRs:
TMP_245 = CONVERT 0 to address
REF_165(mapping(address => uint256)) -> tokens[TMP_245]
REF_166(uint256) -> REF_165[feeAccount]
TMP_246 = CONVERT 0 to address
REF_167(mapping(address => uint256)) -> tokens[TMP_246]
REF_168(uint256) -> REF_167[feeAccount]
TMP_247(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_168', 'tradingFeeXfer'] 
REF_166 (->tokens) := TMP_247(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokens[tokenGive][user] = tokens[tokenGive][user].sub(amountGive.mul(amount) / amountGet)

IRs:
REF_170(mapping(address => uint256)) -> tokens[tokenGive]
REF_171(uint256) -> REF_170[user]
REF_172(mapping(address => uint256)) -> tokens[tokenGive]
REF_173(uint256) -> REF_172[user]
TMP_248(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['amountGive', 'amount'] 
TMP_249(uint256) = TMP_248 / amountGet
TMP_250(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_173', 'TMP_249'] 
REF_171 (->tokens) := TMP_250(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tokens[tokenGive][msg.sender] = tokens[tokenGive][msg.sender].add(amountGive.mul(amount) / amountGet)

IRs:
REF_176(mapping(address => uint256)) -> tokens[tokenGive]
REF_177(uint256) -> REF_176[msg.sender]
REF_178(mapping(address => uint256)) -> tokens[tokenGive]
REF_179(uint256) -> REF_178[msg.sender]
TMP_251(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['amountGive', 'amount'] 
TMP_252(uint256) = TMP_251 / amountGet
TMP_253(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_179', 'TMP_252'] 
REF_177 (->tokens) := TMP_253(uint256)"];
}
