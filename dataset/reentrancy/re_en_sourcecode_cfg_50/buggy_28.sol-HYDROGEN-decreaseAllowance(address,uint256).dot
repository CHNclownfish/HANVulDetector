digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(spender != address(0))

IRs:
TMP_167 = CONVERT 0 to address
TMP_168(bool) = spender != TMP_167
TMP_169(None) = SOLIDITY_CALL require(bool)(TMP_168)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue))

IRs:
REF_130(mapping(address => uint256)) -> _allowed[msg.sender]
REF_131(uint256) -> REF_130[spender]
REF_132(mapping(address => uint256)) -> _allowed[msg.sender]
REF_133(uint256) -> REF_132[spender]
TMP_170(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_133', 'subtractedValue'] 
REF_131 (->_allowed) := TMP_170(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,spender,_allowed[msg.sender][spender])

IRs:
REF_135(mapping(address => uint256)) -> _allowed[msg.sender]
REF_136(uint256) -> REF_135[spender]
Emit Approval(msg.sender.spender.REF_136)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
