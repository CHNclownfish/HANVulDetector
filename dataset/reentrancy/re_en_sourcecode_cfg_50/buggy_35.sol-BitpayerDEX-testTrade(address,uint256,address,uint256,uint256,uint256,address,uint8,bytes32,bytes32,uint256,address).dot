digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! (tokens[tokenGet][sender] >= amount && availableVolume(tokenGet,amountGet,tokenGive,amountGive,expires,nonce,user,v,r,s) >= amount)

IRs:
REF_184(mapping(address => uint256)) -> tokens[tokenGet]
REF_185(uint256) -> REF_184[sender]
TMP_258(bool) = REF_185 >= amount
TMP_259(uint256) = INTERNAL_CALL, BitpayerDEX.availableVolume(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)(tokenGet,amountGet,tokenGive,amountGive,expires,nonce,user,v,r,s)
TMP_260(bool) = TMP_259 >= amount
TMP_261(bool) = TMP_258 && TMP_260
TMP_262 = ! TMP_261 
CONDITION TMP_262"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
