digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances[msg.sender] >= tokens)

IRs:
REF_62(uint256) -> balances[msg.sender]
TMP_76(bool) = REF_62 >= tokens
TMP_77(None) = SOLIDITY_CALL require(bool)(TMP_76)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(tokens > 0)

IRs:
TMP_78(bool) = tokens > 0
TMP_79(None) = SOLIDITY_CALL require(bool)(TMP_78)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][spender] = tokens

IRs:
REF_63(mapping(address => uint256)) -> allowed[msg.sender]
REF_64(uint256) -> REF_63[spender]
REF_64 (->allowed) := tokens(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Approval(msg.sender,spender,tokens)

IRs:
Emit Approval(msg.sender.spender.tokens)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
}
