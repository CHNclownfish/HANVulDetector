digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(amount <= _allowed[account][msg.sender])

IRs:
REF_157(mapping(address => uint256)) -> _allowed[account]
REF_158(uint256) -> REF_157[msg.sender]
TMP_200(bool) = amount <= REF_158
TMP_201(None) = SOLIDITY_CALL require(bool)(TMP_200)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount)

IRs:
REF_159(mapping(address => uint256)) -> _allowed[account]
REF_160(uint256) -> REF_159[msg.sender]
REF_161(mapping(address => uint256)) -> _allowed[account]
REF_162(uint256) -> REF_161[msg.sender]
TMP_202(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_162', 'amount'] 
REF_160 (->_allowed) := TMP_202(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_burn(account,amount)

IRs:
INTERNAL_CALL, HYDROGEN._burn(address,uint256)(account,amount)"];
}
