digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_cap >= _initialSupply)

IRs:
TMP_185(bool) = _cap >= _initialSupply
TMP_186(None) = SOLIDITY_CALL require(bool)(TMP_185)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
cap = _cap

IRs:
cap(uint256) := _cap(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
decimals = _decimals

IRs:
decimals(uint8) := _decimals(uint8)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_totalSupply = _initialSupply

IRs:
_totalSupply(uint256) := _initialSupply(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_balances[owner] = _totalSupply

IRs:
REF_125(uint256) -> _balances[owner]
REF_125 (->_balances) := _totalSupply(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(address(0),owner,_totalSupply)

IRs:
TMP_187 = CONVERT 0 to address
Emit Transfer(TMP_187.owner._totalSupply)"];
}
