digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenAmount > 0 && tokendetails[tokenaddr].status == true)

IRs:
TMP_100(bool) = tokenAmount > 0
REF_61(StableDEX.tokens) -> tokendetails[tokenaddr]
REF_62(bool) -> REF_61.status
TMP_101(bool) = REF_62 == True
TMP_102(bool) = TMP_100 && TMP_101
TMP_103(None) = SOLIDITY_CALL require(bool)(TMP_102)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(tokenallowance(tokenaddr,msg.sender) > 0)

IRs:
TMP_104(uint256) = INTERNAL_CALL, StableDEX.tokenallowance(address,address)(tokenaddr,msg.sender)
TMP_105(bool) = TMP_104 > 0
TMP_106(None) = SOLIDITY_CALL require(bool)(TMP_105)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
userDetails[msg.sender][tokenaddr] = userDetails[msg.sender][tokenaddr].add(tokenAmount)

IRs:
REF_63(mapping(address => uint256)) -> userDetails[msg.sender]
REF_64(uint256) -> REF_63[tokenaddr]
REF_65(mapping(address => uint256)) -> userDetails[msg.sender]
REF_66(uint256) -> REF_65[tokenaddr]
TMP_107(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_66', 'tokenAmount'] 
REF_64 (->userDetails) := TMP_107(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Token(tokenaddr).transferFrom(msg.sender,address(this),tokenAmount)

IRs:
TMP_108 = CONVERT tokenaddr to Token
TMP_109 = CONVERT this to address
TMP_110(bool) = HIGH_LEVEL_CALL, dest:TMP_108(Token), function:transferFrom, arguments:['msg.sender', 'TMP_109', 'tokenAmount']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
DepositandWithdraw(msg.sender,tokenaddr,tokenAmount,0)

IRs:
Emit DepositandWithdraw(msg.sender.tokenaddr.tokenAmount.0)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
dexstatuscheck()

IRs:
MODIFIER_CALL, StableDEX.dexstatuscheck()()"];
7->1;
}
