digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
listing = listingsById[id]

IRs:
REF_53(RaffleTokenExchange.Listing) -> listingsById[id]
listing(RaffleTokenExchange.Listing) := REF_53(RaffleTokenExchange.Listing)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(listing.active,This listing was turned inactive already!)

IRs:
REF_54(bool) -> listing.active
TMP_65(None) = SOLIDITY_CALL require(bool,string)(REF_54,This listing was turned inactive already!)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(listing.seller == msg.sender || owner == msg.sender,Only the listing owner or the contract owner can cancel the listing!)

IRs:
REF_55(address) -> listing.seller
TMP_66(bool) = REF_55 == msg.sender
TMP_67(bool) = owner == msg.sender
TMP_68(bool) = TMP_66 || TMP_67
TMP_69(None) = SOLIDITY_CALL require(bool,string)(TMP_68,Only the listing owner or the contract owner can cancel the listing!)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
listing.active = false

IRs:
REF_56(bool) -> listing.active
REF_56 (->listing) := False(bool)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Canceled(id)

IRs:
Emit Canceled(id)"];
}
