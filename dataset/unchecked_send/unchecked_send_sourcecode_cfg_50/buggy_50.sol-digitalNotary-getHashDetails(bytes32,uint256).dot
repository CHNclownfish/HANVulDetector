digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owncount = getHashOwnersCount(hash)

IRs:
TMP_37(uint256) = INTERNAL_CALL, digitalNotary.getHashOwnersCount(bytes32)(hash)
owncount(uint256) := TMP_37(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(owncount > 0)

IRs:
TMP_38(bool) = owncount > 0
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(indx < owncount)

IRs:
TMP_40(bool) = indx < owncount
TMP_41(None) = SOLIDITY_CALL require(bool)(TMP_40)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(HashList[hash][indx].owner,HashList[hash][indx].registrationtime)

IRs:
REF_27(digitalNotary.HashRegistration[]) -> HashList[hash]
REF_28(digitalNotary.HashRegistration) -> REF_27[indx]
REF_29(address) -> REF_28.owner
REF_30(digitalNotary.HashRegistration[]) -> HashList[hash]
REF_31(digitalNotary.HashRegistration) -> REF_30[indx]
REF_32(uint256) -> REF_31.registrationtime
RETURN REF_29,REF_32"];
}
