digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value > 0)

IRs:
TMP_36(bool) = msg.value > 0
TMP_37(None) = SOLIDITY_CALL require(bool)(TMP_36)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
userDetails[msg.sender][address(0)] = userDetails[msg.sender][address(0)].add(msg.value)

IRs:
REF_26(mapping(address => uint256)) -> userDetails[msg.sender]
TMP_38 = CONVERT 0 to address
REF_27(uint256) -> REF_26[TMP_38]
REF_28(mapping(address => uint256)) -> userDetails[msg.sender]
TMP_39 = CONVERT 0 to address
REF_29(uint256) -> REF_28[TMP_39]
TMP_40(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_29', 'msg.value'] 
REF_27 (->userDetails) := TMP_40(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
DepositandWithdraw(msg.sender,address(0),msg.value,0)

IRs:
TMP_41 = CONVERT 0 to address
Emit DepositandWithdraw(msg.sender.TMP_41.msg.value.0)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dexstatuscheck()

IRs:
MODIFIER_CALL, StableDEX.dexstatuscheck()()"];
5->1;
}
