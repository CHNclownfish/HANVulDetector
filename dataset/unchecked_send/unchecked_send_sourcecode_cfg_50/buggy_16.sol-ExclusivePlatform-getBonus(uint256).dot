digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_amount >= XPLPerEther.mul(5)

IRs:
TMP_57(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['XPLPerEther', '5'] 
TMP_58(bool) = _amount >= TMP_57
CONDITION TMP_58"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
((20 * _amount).div(100)).add(_amount)

IRs:
TMP_59(uint256) = 20 * _amount
TMP_60(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_59', '100'] 
TMP_61(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_60', '_amount'] 
RETURN TMP_61"];
3[label="Node Type: IF 3

EXPRESSION:
_amount >= XPLPerEther

IRs:
TMP_62(bool) = _amount >= XPLPerEther
CONDITION TMP_62"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((5 * _amount).div(100)).add(_amount)

IRs:
TMP_63(uint256) = 5 * _amount
TMP_64(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_63', '100'] 
TMP_65(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_64', '_amount'] 
RETURN TMP_65"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
_amount

IRs:
RETURN _amount"];
}
