digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->17;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(gameList[_fixtureId].open_status == 3)

IRs:
REF_79(WhiteBetting.GameInfo) -> gameList[_fixtureId]
REF_80(uint8) -> REF_79.open_status
TMP_59(bool) = REF_80 == 3
TMP_60(None) = SOLIDITY_CALL require(bool)(TMP_59)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(gameList[_fixtureId].isDone == false)

IRs:
REF_81(WhiteBetting.GameInfo) -> gameList[_fixtureId]
REF_82(bool) -> REF_81.isDone
TMP_61(bool) = REF_82 == False
TMP_62(None) = SOLIDITY_CALL require(bool)(TMP_61)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(betList[_fixtureId][0].player != address(0))

IRs:
REF_83(WhiteBetting.BetFixture[]) -> betList[_fixtureId]
REF_84(WhiteBetting.BetFixture) -> REF_83[0]
REF_85(address) -> REF_84.player
TMP_63 = CONVERT 0 to address
TMP_64(bool) = REF_85 != TMP_63
TMP_65(None) = SOLIDITY_CALL require(bool)(TMP_64)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->14;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < betList[_fixtureId].length

IRs:
REF_86(WhiteBetting.BetFixture[]) -> betList[_fixtureId]
REF_87 -> LENGTH REF_86
TMP_66(bool) = i < REF_87
CONDITION TMP_66"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
selectedTeam = betList[_fixtureId][i].selectedTeam

IRs:
REF_88(WhiteBetting.BetFixture[]) -> betList[_fixtureId]
REF_89(WhiteBetting.BetFixture) -> REF_88[i]
REF_90(uint16) -> REF_89.selectedTeam
selectedTeam(uint16) := REF_90(uint16)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
returnEth = (betList[_fixtureId][i].stake * betList[_fixtureId][i].odd) / 1000

IRs:
REF_91(WhiteBetting.BetFixture[]) -> betList[_fixtureId]
REF_92(WhiteBetting.BetFixture) -> REF_91[i]
REF_93(uint256) -> REF_92.stake
REF_94(WhiteBetting.BetFixture[]) -> betList[_fixtureId]
REF_95(WhiteBetting.BetFixture) -> REF_94[i]
REF_96(uint32) -> REF_95.odd
TMP_67(uint256) = REF_93 * REF_96
TMP_68(uint256) = TMP_67 / 1000
returnEth(uint256) := TMP_68(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
(selectedTeam == 1 && _homeDrawAway == 1) || (selectedTeam == 2 && _homeDrawAway == 2) || (selectedTeam == 3 && _homeDrawAway == 3) || (selectedTeam == 4 && _overUnder == 1) || (selectedTeam == 5 && _overUnder == 2) || (selectedTeam == 6 && (_homeDrawAway == 1 || _homeDrawAway == 2)) || (selectedTeam == 7 && (_homeDrawAway == 1 || _homeDrawAway == 3)) || (selectedTeam == 8 && (_homeDrawAway == 3 || _homeDrawAway == 2))

IRs:
TMP_69(bool) = selectedTeam == 1
TMP_70(bool) = _homeDrawAway == 1
TMP_71(bool) = TMP_69 && TMP_70
TMP_72(bool) = selectedTeam == 2
TMP_73(bool) = _homeDrawAway == 2
TMP_74(bool) = TMP_72 && TMP_73
TMP_75(bool) = TMP_71 || TMP_74
TMP_76(bool) = selectedTeam == 3
TMP_77(bool) = _homeDrawAway == 3
TMP_78(bool) = TMP_76 && TMP_77
TMP_79(bool) = TMP_75 || TMP_78
TMP_80(bool) = selectedTeam == 4
TMP_81(bool) = _overUnder == 1
TMP_82(bool) = TMP_80 && TMP_81
TMP_83(bool) = TMP_79 || TMP_82
TMP_84(bool) = selectedTeam == 5
TMP_85(bool) = _overUnder == 2
TMP_86(bool) = TMP_84 && TMP_85
TMP_87(bool) = TMP_83 || TMP_86
TMP_88(bool) = selectedTeam == 6
TMP_89(bool) = _homeDrawAway == 1
TMP_90(bool) = _homeDrawAway == 2
TMP_91(bool) = TMP_89 || TMP_90
TMP_92(bool) = TMP_88 && TMP_91
TMP_93(bool) = TMP_87 || TMP_92
TMP_94(bool) = selectedTeam == 7
TMP_95(bool) = _homeDrawAway == 1
TMP_96(bool) = _homeDrawAway == 3
TMP_97(bool) = TMP_95 || TMP_96
TMP_98(bool) = TMP_94 && TMP_97
TMP_99(bool) = TMP_93 || TMP_98
TMP_100(bool) = selectedTeam == 8
TMP_101(bool) = _homeDrawAway == 3
TMP_102(bool) = _homeDrawAway == 2
TMP_103(bool) = TMP_101 || TMP_102
TMP_104(bool) = TMP_100 && TMP_103
TMP_105(bool) = TMP_99 || TMP_104
CONDITION TMP_105"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
betList[_fixtureId][i].player.transfer(returnEth)

IRs:
REF_97(WhiteBetting.BetFixture[]) -> betList[_fixtureId]
REF_98(WhiteBetting.BetFixture) -> REF_97[i]
REF_99(address) -> REF_98.player
Transfer dest:REF_99 value:returnEth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
i ++

IRs:
TMP_107(uint256) := i(uint256)
i(uint256) = i + 1"];
13->7;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
gameList[_fixtureId].open_status = 5

IRs:
REF_101(WhiteBetting.GameInfo) -> gameList[_fixtureId]
REF_102(uint8) -> REF_101.open_status
REF_102 (->gameList) := 5(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
gameList[_fixtureId].isDone = true

IRs:
REF_103(WhiteBetting.GameInfo) -> gameList[_fixtureId]
REF_104(bool) -> REF_103.isDone
REF_104 (->gameList) := True(bool)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
GivePrizeMoney(_fixtureId,_homeDrawAway,_overUnder)

IRs:
Emit GivePrizeMoney(_fixtureId._homeDrawAway._overUnder)"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, WhiteBetting.onlyOwner()()"];
17->1;
}
