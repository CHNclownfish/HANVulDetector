digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = initialSupply * 10 ** uint256(decimals)

IRs:
TMP_9 = CONVERT decimals to uint256
TMP_10(uint256) = 10 ** TMP_9
TMP_11(uint256) = initialSupply * TMP_10
totalSupply(uint256) := TMP_11(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balanceOf[msg.sender] = totalSupply

IRs:
REF_9(uint256) -> balanceOf[msg.sender]
REF_9 (->balanceOf) := totalSupply(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
name = tokenName

IRs:
name(string) := tokenName(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
symbol = tokenSymbol

IRs:
symbol(string) := tokenSymbol(string)"];
}
