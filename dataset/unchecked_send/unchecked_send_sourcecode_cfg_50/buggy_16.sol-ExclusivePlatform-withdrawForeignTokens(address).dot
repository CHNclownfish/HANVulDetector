digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
token = ERC20Interface(tokenAddress)

IRs:
TMP_135 = CONVERT tokenAddress to ERC20Interface
token(ERC20Interface) := TMP_135(ERC20Interface)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
amount = token.balanceOf(address(this))

IRs:
TMP_136 = CONVERT this to address
TMP_137(uint256) = HIGH_LEVEL_CALL, dest:token(ERC20Interface), function:balanceOf, arguments:['TMP_136']  
amount(uint256) := TMP_137(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
token.transfer(owner,amount)

IRs:
TMP_138(bool) = HIGH_LEVEL_CALL, dest:token(ERC20Interface), function:transfer, arguments:['owner', 'amount']  
RETURN TMP_138"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
