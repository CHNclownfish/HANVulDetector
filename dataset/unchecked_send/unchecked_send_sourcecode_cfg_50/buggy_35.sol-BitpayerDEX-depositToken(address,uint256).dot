digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(token != address(0))

IRs:
TMP_92 = CONVERT 0 to address
TMP_93(bool) = token != TMP_92
TMP_94(None) = SOLIDITY_CALL require(bool)(TMP_93)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(ERC20Essential(token).transferFrom(msg.sender,address(this),amount))

IRs:
TMP_95 = CONVERT token to ERC20Essential
TMP_96 = CONVERT this to address
TMP_97(bool) = HIGH_LEVEL_CALL, dest:TMP_95(ERC20Essential), function:transferFrom, arguments:['msg.sender', 'TMP_96', 'amount']  
TMP_98(None) = SOLIDITY_CALL require(bool)(TMP_97)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokens[token][msg.sender] = tokens[token][msg.sender].add(amount)

IRs:
REF_54(mapping(address => uint256)) -> tokens[token]
REF_55(uint256) -> REF_54[msg.sender]
REF_56(mapping(address => uint256)) -> tokens[token]
REF_57(uint256) -> REF_56[msg.sender]
TMP_99(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_57', 'amount'] 
REF_55 (->tokens) := TMP_99(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Deposit(now,token,msg.sender,amount,tokens[token][msg.sender])

IRs:
REF_59(mapping(address => uint256)) -> tokens[token]
REF_60(uint256) -> REF_59[msg.sender]
Emit Deposit(now.token.msg.sender.amount.REF_60)"];
}
