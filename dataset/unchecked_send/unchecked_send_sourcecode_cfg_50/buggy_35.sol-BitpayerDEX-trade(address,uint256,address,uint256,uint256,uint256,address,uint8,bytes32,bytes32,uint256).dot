digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(! safeGuard,System Paused by Admin)

IRs:
TMP_119 = ! safeGuard 
TMP_120(None) = SOLIDITY_CALL require(bool,string)(TMP_119,System Paused by Admin)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
hash = keccak256(bytes)(abi.encodePacked(this,tokenGet,amountGet,tokenGive,amountGive,expires,nonce))

IRs:
TMP_121(bytes) = SOLIDITY_CALL abi.encodePacked()(this,tokenGet,amountGet,tokenGive,amountGive,expires,nonce)
TMP_122(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_121)
hash(bytes32) := TMP_122(bytes32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(((orders[user][hash] || ecrecover(bytes32,uint8,bytes32,bytes32)(keccak256(bytes)(abi.encodePacked(Ethereum Signed Message:
32,hash)),v,r,s) == user) && block.number <= expires && orderFills[user][hash].add(amount) <= amountGet))

IRs:
REF_81(mapping(bytes32 => bool)) -> orders[user]
REF_82(bool) -> REF_81[hash]
TMP_123(bytes) = SOLIDITY_CALL abi.encodePacked()(Ethereum Signed Message:
32,hash)
TMP_124(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_123)
TMP_125(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(TMP_124,v,r,s)
TMP_126(bool) = TMP_125 == user
TMP_127(bool) = REF_82 || TMP_126
TMP_128(bool) = block.number <= expires
TMP_129(bool) = TMP_127 && TMP_128
REF_84(mapping(bytes32 => uint256)) -> orderFills[user]
REF_85(uint256) -> REF_84[hash]
TMP_130(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_85', 'amount'] 
TMP_131(bool) = TMP_130 <= amountGet
TMP_132(bool) = TMP_129 && TMP_131
TMP_133(None) = SOLIDITY_CALL require(bool)(TMP_132)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tradeBalances(tokenGet,amountGet,tokenGive,amountGive,user,amount)

IRs:
INTERNAL_CALL, BitpayerDEX.tradeBalances(address,uint256,address,uint256,address,uint256)(tokenGet,amountGet,tokenGive,amountGive,user,amount)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
orderFills[user][hash] = orderFills[user][hash].add(amount)

IRs:
REF_87(mapping(bytes32 => uint256)) -> orderFills[user]
REF_88(uint256) -> REF_87[hash]
REF_89(mapping(bytes32 => uint256)) -> orderFills[user]
REF_90(uint256) -> REF_89[hash]
TMP_135(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_90', 'amount'] 
REF_88 (->orderFills) := TMP_135(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Trade(now,tokenGet,amount,tokenGive,amountGive * amount / amountGet,user,msg.sender)

IRs:
TMP_136(uint256) = amountGive * amount
TMP_137(uint256) = TMP_136 / amountGet
Emit Trade(now.tokenGet.amount.tokenGive.TMP_137.user.msg.sender)"];
}
