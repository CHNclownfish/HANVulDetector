digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0x0))

IRs:
TMP_13 = CONVERT 0 to address
TMP_14(bool) = _to != TMP_13
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_11(uint256) -> balanceOf[_from]
TMP_16(bool) = REF_11 >= _value
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balanceOf[_to] + _value >= balanceOf[_to])

IRs:
REF_12(uint256) -> balanceOf[_to]
TMP_18(uint256) = REF_12 + _value
REF_13(uint256) -> balanceOf[_to]
TMP_19(bool) = TMP_18 >= REF_13
TMP_20(None) = SOLIDITY_CALL require(bool)(TMP_19)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
previousBalances = balanceOf[_from] + balanceOf[_to]

IRs:
REF_14(uint256) -> balanceOf[_from]
REF_15(uint256) -> balanceOf[_to]
TMP_21(uint256) = REF_14 + REF_15
previousBalances(uint256) := TMP_21(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balanceOf[_from] -= _value

IRs:
REF_16(uint256) -> balanceOf[_from]
REF_16(-> balanceOf) = REF_16 - _value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balanceOf[_to] += _value

IRs:
REF_17(uint256) -> balanceOf[_to]
REF_17(-> balanceOf) = REF_17 + _value"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from._to._value)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
assert(bool)(balanceOf[_from] + balanceOf[_to] == previousBalances)

IRs:
REF_18(uint256) -> balanceOf[_from]
REF_19(uint256) -> balanceOf[_to]
TMP_23(uint256) = REF_18 + REF_19
TMP_24(bool) = TMP_23 == previousBalances
TMP_25(None) = SOLIDITY_CALL assert(bool)(TMP_24)"];
}
