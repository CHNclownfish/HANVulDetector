digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(crowdsaleIsOn && msg.value >= minimumBuy)

IRs:
TMP_67(bool) = msg.value >= minimumBuy
TMP_68(bool) = crowdsaleIsOn && TMP_67
TMP_69(None) = SOLIDITY_CALL require(bool)(TMP_68)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
totalBuy = (XPLPerEther.mul(msg.value)).div(1000000000000000000)

IRs:
TMP_70(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['XPLPerEther', 'msg.value'] 
TMP_71(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_70', '1000000000000000000'] 
totalBuy(uint256) := TMP_71(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalBuy = getBonus(totalBuy)

IRs:
TMP_72(uint256) = INTERNAL_CALL, ExclusivePlatform.getBonus(uint256)(totalBuy)
totalBuy(uint256) := TMP_72(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
doTransfer(owner,msg.sender,totalBuy)

IRs:
INTERNAL_CALL, ExclusivePlatform.doTransfer(address,address,uint256)(owner,msg.sender,totalBuy)"];
}
