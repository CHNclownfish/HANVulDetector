digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0x0))

IRs:
TMP_24 = CONVERT 0 to address
TMP_25(bool) = _to != TMP_24
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_15(uint256) -> balanceOf[_from]
TMP_27(bool) = REF_15 >= _value
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balanceOf[_to] + _value > balanceOf[_to])

IRs:
REF_16(uint256) -> balanceOf[_to]
TMP_29(uint256) = REF_16 + _value
REF_17(uint256) -> balanceOf[_to]
TMP_30(bool) = TMP_29 > REF_17
TMP_31(None) = SOLIDITY_CALL require(bool)(TMP_30)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
previousBalances = balanceOf[_from] + balanceOf[_to]

IRs:
REF_18(uint256) -> balanceOf[_from]
REF_19(uint256) -> balanceOf[_to]
TMP_32(uint256) = REF_18 + REF_19
previousBalances(uint256) := TMP_32(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balanceOf[_from] -= _value

IRs:
REF_20(uint256) -> balanceOf[_from]
REF_20(-> balanceOf) = REF_20 - _value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balanceOf[_to] += _value

IRs:
REF_21(uint256) -> balanceOf[_to]
REF_21(-> balanceOf) = REF_21 + _value"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from._to._value)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
assert(bool)(balanceOf[_from] + balanceOf[_to] == previousBalances)

IRs:
REF_22(uint256) -> balanceOf[_from]
REF_23(uint256) -> balanceOf[_to]
TMP_34(uint256) = REF_22 + REF_23
TMP_35(bool) = TMP_34 == previousBalances
TMP_36(None) = SOLIDITY_CALL assert(bool)(TMP_35)"];
}
