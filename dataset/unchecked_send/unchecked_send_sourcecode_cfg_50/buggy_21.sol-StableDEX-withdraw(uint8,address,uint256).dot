digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->17;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(type_ == 0 || type_ == 1)

IRs:
TMP_59(bool) = type_ == 0
TMP_60(bool) = type_ == 1
TMP_61(bool) = TMP_59 || TMP_60
TMP_62(None) = SOLIDITY_CALL require(bool)(TMP_61)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
type_ == 0

IRs:
TMP_63(bool) = type_ == 0
CONDITION TMP_63"];
2->3[label="True"];
2->9[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(tokenaddr == address(0))

IRs:
TMP_64 = CONVERT 0 to address
TMP_65(bool) = tokenaddr == TMP_64
TMP_66(None) = SOLIDITY_CALL require(bool)(TMP_65)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(amount > 0 && amount <= userDetails[msg.sender][address(0)] && withdrawfee[address(0)] < amount)

IRs:
TMP_67(bool) = amount > 0
REF_41(mapping(address => uint256)) -> userDetails[msg.sender]
TMP_68 = CONVERT 0 to address
REF_42(uint256) -> REF_41[TMP_68]
TMP_69(bool) = amount <= REF_42
TMP_70(bool) = TMP_67 && TMP_69
TMP_71 = CONVERT 0 to address
REF_43(uint256) -> withdrawfee[TMP_71]
TMP_72(bool) = REF_43 < amount
TMP_73(bool) = TMP_70 && TMP_72
TMP_74(None) = SOLIDITY_CALL require(bool)(TMP_73)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(amount <= address(this).balance)

IRs:
TMP_75 = CONVERT this to address
REF_44 -> BALANCE TMP_75
TMP_76(bool) = amount <= REF_44
TMP_77(None) = SOLIDITY_CALL require(bool)(TMP_76)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
msg.sender.transfer(amount.sub(withdrawfee[address(0)]))

IRs:
TMP_78 = CONVERT 0 to address
REF_47(uint256) -> withdrawfee[TMP_78]
TMP_79(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['amount', 'REF_47'] 
Transfer dest:msg.sender value:TMP_79"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
userDetails[msg.sender][address(0)] = userDetails[msg.sender][address(0)].sub(amount)

IRs:
REF_48(mapping(address => uint256)) -> userDetails[msg.sender]
TMP_81 = CONVERT 0 to address
REF_49(uint256) -> REF_48[TMP_81]
REF_50(mapping(address => uint256)) -> userDetails[msg.sender]
TMP_82 = CONVERT 0 to address
REF_51(uint256) -> REF_50[TMP_82]
TMP_83(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_51', 'amount'] 
REF_49 (->userDetails) := TMP_83(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
feeAmount[admin][address(0)] = feeAmount[admin][address(0)].add(withdrawfee[address(0)])

IRs:
REF_53(mapping(address => uint256)) -> feeAmount[admin]
TMP_84 = CONVERT 0 to address
REF_54(uint256) -> REF_53[TMP_84]
REF_55(mapping(address => uint256)) -> feeAmount[admin]
TMP_85 = CONVERT 0 to address
REF_56(uint256) -> REF_55[TMP_85]
TMP_86 = CONVERT 0 to address
REF_58(uint256) -> withdrawfee[TMP_86]
TMP_87(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_56', 'REF_58'] 
REF_54 (->feeAmount) := TMP_87(uint256)"];
8->14;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(tokenaddr != address(0) && tokendetails[tokenaddr].status == true)

IRs:
TMP_88 = CONVERT 0 to address
TMP_89(bool) = tokenaddr != TMP_88
REF_59(StableDEX.tokens) -> tokendetails[tokenaddr]
REF_60(bool) -> REF_59.status
TMP_90(bool) = REF_60 == True
TMP_91(bool) = TMP_89 && TMP_90
TMP_92(None) = SOLIDITY_CALL require(bool)(TMP_91)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(amount > 0 && amount <= userDetails[msg.sender][tokenaddr] && withdrawfee[tokenaddr] < amount)

IRs:
TMP_93(bool) = amount > 0
REF_61(mapping(address => uint256)) -> userDetails[msg.sender]
REF_62(uint256) -> REF_61[tokenaddr]
TMP_94(bool) = amount <= REF_62
TMP_95(bool) = TMP_93 && TMP_94
REF_63(uint256) -> withdrawfee[tokenaddr]
TMP_96(bool) = REF_63 < amount
TMP_97(bool) = TMP_95 && TMP_96
TMP_98(None) = SOLIDITY_CALL require(bool)(TMP_97)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
Token(tokenaddr).transfer(msg.sender,(amount.sub(withdrawfee[tokenaddr])))

IRs:
TMP_99 = CONVERT tokenaddr to Token
REF_66(uint256) -> withdrawfee[tokenaddr]
TMP_100(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['amount', 'REF_66'] 
TMP_101(bool) = HIGH_LEVEL_CALL, dest:TMP_99(Token), function:transfer, arguments:['msg.sender', 'TMP_100']  "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
userDetails[msg.sender][tokenaddr] = userDetails[msg.sender][tokenaddr].sub(amount)

IRs:
REF_67(mapping(address => uint256)) -> userDetails[msg.sender]
REF_68(uint256) -> REF_67[tokenaddr]
REF_69(mapping(address => uint256)) -> userDetails[msg.sender]
REF_70(uint256) -> REF_69[tokenaddr]
TMP_102(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_70', 'amount'] 
REF_68 (->userDetails) := TMP_102(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
feeAmount[admin][tokenaddr] = feeAmount[admin][tokenaddr].add(withdrawfee[tokenaddr])

IRs:
REF_72(mapping(address => uint256)) -> feeAmount[admin]
REF_73(uint256) -> REF_72[tokenaddr]
REF_74(mapping(address => uint256)) -> feeAmount[admin]
REF_75(uint256) -> REF_74[tokenaddr]
REF_77(uint256) -> withdrawfee[tokenaddr]
TMP_103(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_75', 'REF_77'] 
REF_73 (->feeAmount) := TMP_103(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
DepositandWithdraw(msg.sender,tokenaddr,amount,1)

IRs:
Emit DepositandWithdraw(msg.sender.tokenaddr.amount.1)"];
15->16;
16[label="Node Type: RETURN 16

EXPRESSION:
true

IRs:
RETURN True"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
dexstatuscheck()

IRs:
MODIFIER_CALL, StableDEX.dexstatuscheck()()"];
17->1;
}
