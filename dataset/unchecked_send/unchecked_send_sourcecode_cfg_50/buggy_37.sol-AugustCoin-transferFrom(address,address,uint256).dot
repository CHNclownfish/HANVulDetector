digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[from] = safeSub(balances[from],tokens)

IRs:
REF_52(uint256) -> balances[from]
REF_53(uint256) -> balances[from]
TMP_93(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_53,tokens)
REF_52 (->balances) := TMP_93(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[from][msg.sender] = safeSub(allowed[from][msg.sender],tokens)

IRs:
REF_54(mapping(address => uint256)) -> allowed[from]
REF_55(uint256) -> REF_54[msg.sender]
REF_56(mapping(address => uint256)) -> allowed[from]
REF_57(uint256) -> REF_56[msg.sender]
TMP_94(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_57,tokens)
REF_55 (->allowed) := TMP_94(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[to] = safeAdd(balances[to],tokens)

IRs:
REF_58(uint256) -> balances[to]
REF_59(uint256) -> balances[to]
TMP_95(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_59,tokens)
REF_58 (->balances) := TMP_95(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(from,to,tokens)

IRs:
Emit Transfer(from.to.tokens)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
}
