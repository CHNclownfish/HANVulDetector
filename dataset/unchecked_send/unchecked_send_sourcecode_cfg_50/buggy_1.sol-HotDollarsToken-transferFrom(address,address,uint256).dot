digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
allowance = allowed[_from][msg.sender]

IRs:
REF_25(mapping(address => uint256)) -> allowed[_from]
REF_26(uint256) -> REF_25[msg.sender]
allowance(uint256) := REF_26(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balances[_from] >= _value && allowance >= _value)

IRs:
REF_27(uint256) -> balances[_from]
TMP_25(bool) = REF_27 >= _value
TMP_26(bool) = allowance >= _value
TMP_27(bool) = TMP_25 && TMP_26
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _value

IRs:
REF_28(uint256) -> balances[_to]
REF_28(-> balances) = REF_28 + _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] -= _value

IRs:
REF_29(uint256) -> balances[_from]
REF_29(-> balances) = REF_29 - _value"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
allowance < MAX_UINT256

IRs:
TMP_29(bool) = allowance < MAX_UINT256
CONDITION TMP_29"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_30(mapping(address => uint256)) -> allowed[_from]
REF_31(uint256) -> REF_30[msg.sender]
REF_31(-> allowed) = REF_31 - _value"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from._to._value)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
}
