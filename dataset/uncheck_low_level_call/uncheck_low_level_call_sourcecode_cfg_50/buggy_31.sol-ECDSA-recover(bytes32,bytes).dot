digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
signature.length != 65

IRs:
REF_0 -> LENGTH signature
TMP_0(bool) = REF_0 != 65
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(address(0))

IRs:
TMP_1 = CONVERT 0 to address
RETURN TMP_1"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0

IRs:
TMP_2 = CONVERT s to uint256
TMP_3(bool) = TMP_2 > 57896044618658097711785492504343953926418782139537452191302581570759080747168
CONDITION TMP_3"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: RETURN 9

EXPRESSION:
address(0)

IRs:
TMP_4 = CONVERT 0 to address
RETURN TMP_4"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
v != 27 && v != 28

IRs:
TMP_5(bool) = v != 27
TMP_6(bool) = v != 28
TMP_7(bool) = TMP_5 && TMP_6
CONDITION TMP_7"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: RETURN 12

EXPRESSION:
address(0)

IRs:
TMP_8 = CONVERT 0 to address
RETURN TMP_8"];
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s)

IRs:
TMP_9(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s)
RETURN TMP_9"];
}
