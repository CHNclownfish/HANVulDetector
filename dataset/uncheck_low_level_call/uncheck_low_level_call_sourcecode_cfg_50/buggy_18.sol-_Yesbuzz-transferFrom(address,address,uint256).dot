digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
toBurn = tokens.mul(burnPercent).div(1000)

IRs:
TMP_152(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['tokens', 'burnPercent'] 
TMP_153(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_152', '1000'] 
toBurn(uint256) := TMP_153(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
toSend = tokens.sub(toBurn)

IRs:
TMP_154(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['tokens', 'toBurn'] 
toSend(uint256) := TMP_154(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[from] = balances[from].sub(tokens)

IRs:
REF_86(uint256) -> balances[from]
REF_87(uint256) -> balances[from]
TMP_155(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_87', 'tokens'] 
REF_86 (->balances) := TMP_155(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens)

IRs:
REF_89(mapping(address => uint256)) -> allowed[from]
REF_90(uint256) -> REF_89[msg.sender]
REF_91(mapping(address => uint256)) -> allowed[from]
REF_92(uint256) -> REF_91[msg.sender]
TMP_156(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_92', 'tokens'] 
REF_90 (->allowed) := TMP_156(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[to] = balances[to].add(toSend)

IRs:
REF_94(uint256) -> balances[to]
REF_95(uint256) -> balances[to]
TMP_157(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_95', 'toSend'] 
REF_94 (->balances) := TMP_157(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(from,to,toSend)

IRs:
Emit Transfer(from.to.toSend)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[address(0)] = balances[address(0)].add(toBurn)

IRs:
TMP_159 = CONVERT 0 to address
REF_97(uint256) -> balances[TMP_159]
TMP_160 = CONVERT 0 to address
REF_98(uint256) -> balances[TMP_160]
TMP_161(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_98', 'toBurn'] 
REF_97 (->balances) := TMP_161(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(from,address(0),toBurn)

IRs:
TMP_162 = CONVERT 0 to address
Emit Transfer(from.TMP_162.toBurn)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
}
