digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
symbol = FTB

IRs:
symbol(string) := FTB(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = ForTheBlockchain

IRs:
name(string) := ForTheBlockchain(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
decimals = 8

IRs:
decimals(uint256) := 8(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_totalSupply = 100000000 * 10 ** (decimals)

IRs:
TMP_62(uint256) = 10 ** decimals
TMP_63(uint256) = 100000000 * TMP_62
_totalSupply(uint256) := TMP_63(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[owner] = _totalSupply

IRs:
REF_35(uint256) -> balances[owner]
REF_35 (->balances) := _totalSupply(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(address(0),owner,_totalSupply)

IRs:
TMP_64 = CONVERT 0 to address
Emit Transfer(TMP_64.owner._totalSupply)"];
}
