digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((_to != address(0)))

IRs:
TMP_85 = CONVERT 0 to address
TMP_86(bool) = _to != TMP_85
TMP_87(None) = SOLIDITY_CALL require(bool)(TMP_86)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_amount <= balances[_from])

IRs:
REF_43(uint256) -> balances[_from]
TMP_88(bool) = _amount <= REF_43
TMP_89(None) = SOLIDITY_CALL require(bool)(TMP_88)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] = balances[_from].sub(_amount)

IRs:
REF_44(uint256) -> balances[_from]
REF_45(uint256) -> balances[_from]
TMP_90(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_45', '_amount'] 
REF_44 (->balances) := TMP_90(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_amount)

IRs:
REF_47(uint256) -> balances[_to]
REF_48(uint256) -> balances[_to]
TMP_91(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_48', '_amount'] 
REF_47 (->balances) := TMP_91(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_amount)

IRs:
Emit Transfer(_from._to._amount)"];
}
