digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
digest = keccak256(bytes)(abi.encodePacked(challengeNumber,msg.sender,nonce))

IRs:
TMP_60(bytes) = SOLIDITY_CALL abi.encodePacked()(challengeNumber,msg.sender,nonce)
TMP_61(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_60)
digest(bytes32) := TMP_61(bytes32)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
digest != challenge_digest

IRs:
TMP_62(bool) = digest != challenge_digest
CONDITION TMP_62"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
revert()()

IRs:
TMP_63(None) = SOLIDITY_CALL revert()()"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
uint256(digest) > miningTarget

IRs:
TMP_64 = CONVERT digest to uint256
TMP_65(bool) = TMP_64 > miningTarget
CONDITION TMP_65"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
revert()()

IRs:
TMP_66(None) = SOLIDITY_CALL revert()()"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
solution = solutionForChallenge[challengeNumber]

IRs:
REF_27(bytes32) -> solutionForChallenge[challengeNumber]
solution(bytes32) := REF_27(bytes32)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
solutionForChallenge[challengeNumber] = digest

IRs:
REF_28(bytes32) -> solutionForChallenge[challengeNumber]
REF_28 (->solutionForChallenge) := digest(bytes32)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
solution != 0x0

IRs:
TMP_67(bool) = solution != 0
CONDITION TMP_67"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
revert()()

IRs:
TMP_68(None) = SOLIDITY_CALL revert()()"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
reward_amount = getMiningReward()

IRs:
TMP_69(uint256) = INTERNAL_CALL, _Yesbuzz.getMiningReward()()
reward_amount(uint256) := TMP_69(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
balances[msg.sender] = balances[msg.sender].add(reward_amount)

IRs:
REF_29(uint256) -> balances[msg.sender]
REF_30(uint256) -> balances[msg.sender]
TMP_70(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_30', 'reward_amount'] 
REF_29 (->balances) := TMP_70(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
tokensMinted = tokensMinted.add(reward_amount)

IRs:
TMP_71(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['tokensMinted', 'reward_amount'] 
tokensMinted(uint256) := TMP_71(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
assert(bool)(tokensMinted <= maxSupplyForEra)

IRs:
TMP_72(bool) = tokensMinted <= maxSupplyForEra
TMP_73(None) = SOLIDITY_CALL assert(bool)(TMP_72)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
lastRewardTo = msg.sender

IRs:
lastRewardTo(address) := msg.sender(address)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
lastRewardAmount = reward_amount

IRs:
lastRewardAmount(uint256) := reward_amount(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
lastRewardEthBlockNumber = block.number

IRs:
lastRewardEthBlockNumber(uint256) := block.number(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_startNewMiningEpoch()

IRs:
INTERNAL_CALL, _Yesbuzz._startNewMiningEpoch()()"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
Mint(msg.sender,reward_amount,epochCount,challengeNumber)

IRs:
Emit Mint(msg.sender.reward_amount.epochCount.challengeNumber)"];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
true

IRs:
RETURN True"];
}
