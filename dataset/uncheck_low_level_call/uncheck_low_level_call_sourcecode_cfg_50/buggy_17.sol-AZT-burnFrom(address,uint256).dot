digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balanceOf[_from] = balanceOf[_from].sub(_value)

IRs:
REF_107(uint256) -> balanceOf[_from]
REF_108(uint256) -> balanceOf[_from]
TMP_138(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_108', '_value'] 
REF_107 (->balanceOf) := TMP_138(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value)

IRs:
REF_110(mapping(address => uint256)) -> allowance[_from]
REF_111(uint256) -> REF_110[msg.sender]
REF_112(mapping(address => uint256)) -> allowance[_from]
REF_113(uint256) -> REF_112[msg.sender]
TMP_139(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_113', '_value'] 
REF_111 (->allowance) := TMP_139(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply = totalSupply.sub(_value)

IRs:
TMP_140(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_140(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(_from,_value)

IRs:
Emit Burn(_from._value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
}
