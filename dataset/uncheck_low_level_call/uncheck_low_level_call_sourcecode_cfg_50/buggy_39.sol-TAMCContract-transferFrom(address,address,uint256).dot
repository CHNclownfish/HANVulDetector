digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(value <= balanceOf[from])

IRs:
REF_16(uint256) -> balanceOf[from]
TMP_16(bool) = value <= REF_16
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(value <= allowance[from][msg.sender])

IRs:
REF_17(mapping(address => uint256)) -> allowance[from]
REF_18(uint256) -> REF_17[msg.sender]
TMP_18(bool) = value <= REF_18
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[from] -= value

IRs:
REF_19(uint256) -> balanceOf[from]
REF_19(-> balanceOf) = REF_19 - value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balanceOf[to] += value

IRs:
REF_20(uint256) -> balanceOf[to]
REF_20(-> balanceOf) = REF_20 + value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allowance[from][msg.sender] -= value

IRs:
REF_21(mapping(address => uint256)) -> allowance[from]
REF_22(uint256) -> REF_21[msg.sender]
REF_22(-> allowance) = REF_22 - value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(from,to,value)

IRs:
Emit Transfer(from.to.value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
