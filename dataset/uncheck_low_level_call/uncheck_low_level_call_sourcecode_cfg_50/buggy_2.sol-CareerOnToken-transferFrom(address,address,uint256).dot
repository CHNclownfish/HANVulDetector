digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_to != address(this) && ! isTransPaused && balances[msg.sender] >= _value && balances[_to] + _value > balances[_to] && allowed[_from][msg.sender] >= _value)

IRs:
TMP_29 = CONVERT this to address
TMP_30(bool) = _to != TMP_29
TMP_31 = ! isTransPaused 
TMP_32(bool) = TMP_30 && TMP_31
REF_20(uint256) -> balances[msg.sender]
TMP_33(bool) = REF_20 >= _value
TMP_34(bool) = TMP_32 && TMP_33
REF_21(uint256) -> balances[_to]
TMP_35(uint256) = REF_21 + _value
REF_22(uint256) -> balances[_to]
TMP_36(bool) = TMP_35 > REF_22
TMP_37(bool) = TMP_34 && TMP_36
REF_23(mapping(address => uint256)) -> allowed[_from]
REF_24(uint256) -> REF_23[msg.sender]
TMP_38(bool) = REF_24 >= _value
TMP_39(bool) = TMP_37 && TMP_38
TMP_40(None) = SOLIDITY_CALL assert(bool)(TMP_39)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] += _value

IRs:
REF_25(uint256) -> balances[_to]
REF_25(-> balances) = REF_25 + _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] -= _value

IRs:
REF_26(uint256) -> balances[_from]
REF_26(-> balances) = REF_26 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_27(mapping(address => uint256)) -> allowed[_from]
REF_28(uint256) -> REF_27[msg.sender]
REF_28(-> allowed) = REF_28 - _value"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_from == owner

IRs:
TMP_41(bool) = _from == owner
CONDITION TMP_41"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(address(this),_to,_value)

IRs:
TMP_42 = CONVERT this to address
Emit Transfer(TMP_42._to._value)"];
6->8;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from._to._value)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
}
