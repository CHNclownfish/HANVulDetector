digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! lock)

IRs:
TMP_63 = ! lock 
TMP_64(None) = SOLIDITY_CALL require(bool)(TMP_63)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! staker[msg.sender].redeem)

IRs:
REF_36(Staking.stake) -> staker[msg.sender]
REF_37(bool) -> REF_36.redeem
TMP_65 = ! REF_37 
TMP_66(None) = SOLIDITY_CALL require(bool)(TMP_65)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(staker[msg.sender].time + stakeTime <= now)

IRs:
REF_38(Staking.stake) -> staker[msg.sender]
REF_39(uint256) -> REF_38.time
TMP_67(uint256) = REF_39 + stakeTime
TMP_68(bool) = TMP_67 <= now
TMP_69(None) = SOLIDITY_CALL require(bool)(TMP_68)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(token.transfer(msg.sender,staker[msg.sender].tokens))

IRs:
REF_41(Staking.stake) -> staker[msg.sender]
REF_42(uint256) -> REF_41.tokens
TMP_70(bool) = HIGH_LEVEL_CALL, dest:token(Token), function:transfer, arguments:['msg.sender', 'REF_42']  
TMP_71(None) = SOLIDITY_CALL require(bool)(TMP_70)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(token.transferFrom(owner,msg.sender,staker[msg.sender].tokens * stakePercentage * 100 / 10000))

IRs:
REF_44(Staking.stake) -> staker[msg.sender]
REF_45(uint256) -> REF_44.tokens
TMP_72(uint256) = REF_45 * stakePercentage
TMP_73(uint256) = TMP_72 * 100
TMP_74(uint256) = TMP_73 / 10000
TMP_75(bool) = HIGH_LEVEL_CALL, dest:token(Token), function:transferFrom, arguments:['owner', 'msg.sender', 'TMP_74']  
TMP_76(None) = SOLIDITY_CALL require(bool)(TMP_75)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tokensRedeemed(msg.sender,staker[msg.sender].tokens,staker[msg.sender].tokens * stakePercentage * 100 / 10000)

IRs:
REF_46(Staking.stake) -> staker[msg.sender]
REF_47(uint256) -> REF_46.tokens
REF_48(Staking.stake) -> staker[msg.sender]
REF_49(uint256) -> REF_48.tokens
TMP_77(uint256) = REF_49 * stakePercentage
TMP_78(uint256) = TMP_77 * 100
TMP_79(uint256) = TMP_78 / 10000
Emit tokensRedeemed(msg.sender.REF_47.TMP_79)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
staker[msg.sender].redeem = true

IRs:
REF_50(Staking.stake) -> staker[msg.sender]
REF_51(bool) -> REF_50.redeem
REF_51 (->staker) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
staker[msg.sender].tokens = 0

IRs:
REF_52(Staking.stake) -> staker[msg.sender]
REF_53(uint256) -> REF_52.tokens
REF_53 (->staker) := 0(uint256)"];
}
