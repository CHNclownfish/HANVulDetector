digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender != operator,ERC777: authorizing self as operator)

IRs:
TMP_41(bool) = msg.sender != operator
TMP_42(None) = SOLIDITY_CALL require(bool,string)(TMP_41,ERC777: authorizing self as operator)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_defaultOperators[operator]

IRs:
REF_11(bool) -> _defaultOperators[operator]
CONDITION REF_11"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
delete _revokedDefaultOperators[msg.sender][operator]

IRs:
REF_12(mapping(address => bool)) -> _revokedDefaultOperators[msg.sender]
REF_13(bool) -> REF_12[operator]
REF_12 = delete REF_13 "];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_operators[msg.sender][operator] = true

IRs:
REF_14(mapping(address => bool)) -> _operators[msg.sender]
REF_15(bool) -> REF_14[operator]
REF_15 (->_operators) := True(bool)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
AuthorizedOperator(operator,msg.sender)

IRs:
Emit AuthorizedOperator(operator.msg.sender)"];
}
