digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances[msg.sender] >= value)

IRs:
REF_28(uint256) -> balances[msg.sender]
TMP_59(bool) = REF_28 >= value
TMP_60(None) = SOLIDITY_CALL require(bool)(TMP_59)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_totalSupply >= value)

IRs:
TMP_61(bool) = _totalSupply >= value
TMP_62(None) = SOLIDITY_CALL require(bool)(TMP_61)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] -= value

IRs:
REF_29(uint256) -> balances[msg.sender]
REF_29(-> balances) = REF_29 - value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_totalSupply -= value

IRs:
_totalSupply(uint256) = _totalSupply - value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,address(0),value)

IRs:
TMP_63 = CONVERT 0 to address
Emit Transfer(msg.sender.TMP_63.value)"];
}
