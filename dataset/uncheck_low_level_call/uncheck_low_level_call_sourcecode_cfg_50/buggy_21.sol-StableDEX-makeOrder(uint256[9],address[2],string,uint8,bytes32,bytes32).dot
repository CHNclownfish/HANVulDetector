digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->59;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == feeAddress)

IRs:
TMP_155(bool) = msg.sender == feeAddress
TMP_156(None) = SOLIDITY_CALL require(bool)(TMP_155)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(verify((message),v,r,s) == traderAddresses[1])

IRs:
TMP_157(address) = INTERNAL_CALL, StableDEX.verify(string,uint8,bytes32,bytes32)(message,v,r,s)
REF_107(address) -> traderAddresses[1]
TMP_158(bool) = TMP_157 == REF_107
TMP_159(None) = SOLIDITY_CALL require(bool)(TMP_158)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
orderiD = tradeDetails[0]

IRs:
REF_108(uint256) -> tradeDetails[0]
orderiD(uint256) := REF_108(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
Order[orderiD].status == 0

IRs:
REF_109(StableDEX.orders) -> Order[orderiD]
REF_110(uint256) -> REF_109.status
TMP_160(bool) = REF_110 == 0
CONDITION TMP_160"];
5->6[label="True"];
5->24[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
tradeDetails[6] == 0

IRs:
REF_111(uint256) -> tradeDetails[6]
TMP_161(bool) = REF_111 == 0
CONDITION TMP_161"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
amount__ = tradeDetails[3]

IRs:
REF_112(uint256) -> tradeDetails[3]
amount__(uint256) := REF_112(uint256)"];
7->11;
8[label="Node Type: IF 8

EXPRESSION:
tradeDetails[6] == 1

IRs:
REF_113(uint256) -> tradeDetails[6]
TMP_162(bool) = REF_113 == 1
CONDITION TMP_162"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
amount__ = tradeDetails[1]

IRs:
REF_114(uint256) -> tradeDetails[1]
amount__(uint256) := REF_114(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
require(bool)(amount__ > 0 && amount__ <= userDetails[traderAddresses[1]][traderAddresses[0]])

IRs:
TMP_163(bool) = amount__ > 0
REF_115(address) -> traderAddresses[1]
REF_116(mapping(address => uint256)) -> userDetails[REF_115]
REF_117(address) -> traderAddresses[0]
REF_118(uint256) -> REF_116[REF_117]
TMP_164(bool) = amount__ <= REF_118
TMP_165(bool) = TMP_163 && TMP_164
TMP_166(None) = SOLIDITY_CALL require(bool)(TMP_165)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
Order[orderiD].userAddress = traderAddresses[1]

IRs:
REF_119(StableDEX.orders) -> Order[orderiD]
REF_120(address) -> REF_119.userAddress
REF_121(address) -> traderAddresses[1]
REF_120 (->Order) := REF_121(address)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
Order[orderiD].type_ = tradeDetails[6]

IRs:
REF_122(StableDEX.orders) -> Order[orderiD]
REF_123(uint256) -> REF_122.type_
REF_124(uint256) -> tradeDetails[6]
REF_123 (->Order) := REF_124(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
Order[orderiD].price = tradeDetails[2]

IRs:
REF_125(StableDEX.orders) -> Order[orderiD]
REF_126(uint256) -> REF_125.price
REF_127(uint256) -> tradeDetails[2]
REF_126 (->Order) := REF_127(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
Order[orderiD].amount = tradeDetails[1]

IRs:
REF_128(StableDEX.orders) -> Order[orderiD]
REF_129(uint256) -> REF_128.amount
REF_130(uint256) -> tradeDetails[1]
REF_129 (->Order) := REF_130(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
Order[orderiD].total = tradeDetails[3]

IRs:
REF_131(StableDEX.orders) -> Order[orderiD]
REF_132(uint256) -> REF_131.total
REF_133(uint256) -> tradeDetails[3]
REF_132 (->Order) := REF_133(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
Order[orderiD].tradeTotal = tradeDetails[3]

IRs:
REF_134(StableDEX.orders) -> Order[orderiD]
REF_135(uint256) -> REF_134.tradeTotal
REF_136(uint256) -> tradeDetails[3]
REF_135 (->Order) := REF_136(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
Order[orderiD]._decimal = tradeDetails[7]

IRs:
REF_137(StableDEX.orders) -> Order[orderiD]
REF_138(uint256) -> REF_137._decimal
REF_139(uint256) -> tradeDetails[7]
REF_138 (->Order) := REF_139(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
Order[orderiD].tokenAddress = traderAddresses[0]

IRs:
REF_140(StableDEX.orders) -> Order[orderiD]
REF_141(address) -> REF_140.tokenAddress
REF_142(address) -> traderAddresses[0]
REF_141 (->Order) := REF_142(address)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
userDetails[traderAddresses[1]][traderAddresses[0]] = userDetails[traderAddresses[1]][traderAddresses[0]].sub(amount__)

IRs:
REF_143(address) -> traderAddresses[1]
REF_144(mapping(address => uint256)) -> userDetails[REF_143]
REF_145(address) -> traderAddresses[0]
REF_146(uint256) -> REF_144[REF_145]
REF_147(address) -> traderAddresses[1]
REF_148(mapping(address => uint256)) -> userDetails[REF_147]
REF_149(address) -> traderAddresses[0]
REF_150(uint256) -> REF_148[REF_149]
TMP_167(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_150', 'amount__'] 
REF_146 (->userDetails) := TMP_167(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
Order[orderiD].tradeAmount = tradeDetails[1]

IRs:
REF_152(StableDEX.orders) -> Order[orderiD]
REF_153(uint256) -> REF_152.tradeAmount
REF_154(uint256) -> tradeDetails[1]
REF_153 (->Order) := REF_154(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
Order[orderiD].status = 1

IRs:
REF_155(StableDEX.orders) -> Order[orderiD]
REF_156(uint256) -> REF_155.status
REF_156 (->Order) := 1(uint256)"];
23->27;
24[label="Node Type: IF 24

EXPRESSION:
Order[orderiD].status == 1 && tradeDetails[8] == 0

IRs:
REF_157(StableDEX.orders) -> Order[orderiD]
REF_158(uint256) -> REF_157.status
TMP_168(bool) = REF_158 == 1
REF_159(uint256) -> tradeDetails[8]
TMP_169(bool) = REF_159 == 0
TMP_170(bool) = TMP_168 && TMP_169
CONDITION TMP_170"];
24->25[label="True"];
24->26[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
cancelOrder(orderiD)

IRs:
TMP_171(bool) = INTERNAL_CALL, StableDEX.cancelOrder(uint256)(orderiD)"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: IF 28

EXPRESSION:
Order[orderiD].status == 1 && tradeDetails[1] > 0 && tradeDetails[8] > 0 && Order[tradeDetails[8]].status == 1 && tradeDetails[3] > 0

IRs:
REF_160(StableDEX.orders) -> Order[orderiD]
REF_161(uint256) -> REF_160.status
TMP_172(bool) = REF_161 == 1
REF_162(uint256) -> tradeDetails[1]
TMP_173(bool) = REF_162 > 0
TMP_174(bool) = TMP_172 && TMP_173
REF_163(uint256) -> tradeDetails[8]
TMP_175(bool) = REF_163 > 0
TMP_176(bool) = TMP_174 && TMP_175
REF_164(uint256) -> tradeDetails[8]
REF_165(StableDEX.orders) -> Order[REF_164]
REF_166(uint256) -> REF_165.status
TMP_177(bool) = REF_166 == 1
TMP_178(bool) = TMP_176 && TMP_177
REF_167(uint256) -> tradeDetails[3]
TMP_179(bool) = REF_167 > 0
TMP_180(bool) = TMP_178 && TMP_179
CONDITION TMP_180"];
28->29[label="True"];
28->57[label="False"];
29[label="Node Type: EXPRESSION 29

EXPRESSION:
Order[orderiD].tradeAmount = Order[orderiD].tradeAmount.sub(tradeDetails[1])

IRs:
REF_168(StableDEX.orders) -> Order[orderiD]
REF_169(uint256) -> REF_168.tradeAmount
REF_170(StableDEX.orders) -> Order[orderiD]
REF_171(uint256) -> REF_170.tradeAmount
REF_173(uint256) -> tradeDetails[1]
TMP_181(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_171', 'REF_173'] 
REF_169 (->Order) := TMP_181(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
Order[tradeDetails[8]].tradeAmount = Order[tradeDetails[8]].tradeAmount.sub(tradeDetails[1])

IRs:
REF_174(uint256) -> tradeDetails[8]
REF_175(StableDEX.orders) -> Order[REF_174]
REF_176(uint256) -> REF_175.tradeAmount
REF_177(uint256) -> tradeDetails[8]
REF_178(StableDEX.orders) -> Order[REF_177]
REF_179(uint256) -> REF_178.tradeAmount
REF_181(uint256) -> tradeDetails[1]
TMP_182(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_179', 'REF_181'] 
REF_176 (->Order) := TMP_182(uint256)"];
30->31;
31[label="Node Type: IF 31

EXPRESSION:
tradeDetails[2] > 0

IRs:
REF_182(uint256) -> tradeDetails[2]
TMP_183(bool) = REF_182 > 0
CONDITION TMP_183"];
31->32[label="True"];
31->33[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
userDetails[Order[orderiD].userAddress][Order[orderiD].tokenAddress] = userDetails[Order[orderiD].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[2])

IRs:
REF_183(StableDEX.orders) -> Order[orderiD]
REF_184(address) -> REF_183.userAddress
REF_185(mapping(address => uint256)) -> userDetails[REF_184]
REF_186(StableDEX.orders) -> Order[orderiD]
REF_187(address) -> REF_186.tokenAddress
REF_188(uint256) -> REF_185[REF_187]
REF_189(StableDEX.orders) -> Order[orderiD]
REF_190(address) -> REF_189.userAddress
REF_191(mapping(address => uint256)) -> userDetails[REF_190]
REF_192(StableDEX.orders) -> Order[orderiD]
REF_193(address) -> REF_192.tokenAddress
REF_194(uint256) -> REF_191[REF_193]
REF_196(uint256) -> tradeDetails[2]
TMP_184(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_194', 'REF_196'] 
REF_188 (->userDetails) := TMP_184(uint256)"];
32->33;
33[label="Node Type: END_IF 33
"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
Order[orderiD].tradeTotal = Order[orderiD].tradeTotal.sub(((tradeDetails[1].mul(Order[orderiD].price)).div(Order[orderiD]._decimal)))

IRs:
REF_197(StableDEX.orders) -> Order[orderiD]
REF_198(uint256) -> REF_197.tradeTotal
REF_199(StableDEX.orders) -> Order[orderiD]
REF_200(uint256) -> REF_199.tradeTotal
REF_202(uint256) -> tradeDetails[1]
REF_204(StableDEX.orders) -> Order[orderiD]
REF_205(uint256) -> REF_204.price
TMP_185(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_202', 'REF_205'] 
REF_207(StableDEX.orders) -> Order[orderiD]
REF_208(uint256) -> REF_207._decimal
TMP_186(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_185', 'REF_208'] 
TMP_187(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_200', 'TMP_186'] 
REF_198 (->Order) := TMP_187(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
Order[tradeDetails[8]].tradeTotal = Order[tradeDetails[8]].tradeTotal.sub(((tradeDetails[1].mul(Order[tradeDetails[8]].price)).div(Order[tradeDetails[8]]._decimal)))

IRs:
REF_209(uint256) -> tradeDetails[8]
REF_210(StableDEX.orders) -> Order[REF_209]
REF_211(uint256) -> REF_210.tradeTotal
REF_212(uint256) -> tradeDetails[8]
REF_213(StableDEX.orders) -> Order[REF_212]
REF_214(uint256) -> REF_213.tradeTotal
REF_216(uint256) -> tradeDetails[1]
REF_218(uint256) -> tradeDetails[8]
REF_219(StableDEX.orders) -> Order[REF_218]
REF_220(uint256) -> REF_219.price
TMP_188(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_216', 'REF_220'] 
REF_222(uint256) -> tradeDetails[8]
REF_223(StableDEX.orders) -> Order[REF_222]
REF_224(uint256) -> REF_223._decimal
TMP_189(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_188', 'REF_224'] 
TMP_190(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_214', 'TMP_189'] 
REF_211 (->Order) := TMP_190(uint256)"];
35->36;
36[label="Node Type: IF 36

EXPRESSION:
tradeDetails[6] == 1 || tradeDetails[6] == 3

IRs:
REF_225(uint256) -> tradeDetails[6]
TMP_191(bool) = REF_225 == 1
REF_226(uint256) -> tradeDetails[6]
TMP_192(bool) = REF_226 == 3
TMP_193(bool) = TMP_191 || TMP_192
CONDITION TMP_193"];
36->37[label="True"];
36->40[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress] = userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[1])

IRs:
REF_227(StableDEX.orders) -> Order[orderiD]
REF_228(address) -> REF_227.userAddress
REF_229(mapping(address => uint256)) -> userDetails[REF_228]
REF_230(uint256) -> tradeDetails[8]
REF_231(StableDEX.orders) -> Order[REF_230]
REF_232(address) -> REF_231.tokenAddress
REF_233(uint256) -> REF_229[REF_232]
REF_234(StableDEX.orders) -> Order[orderiD]
REF_235(address) -> REF_234.userAddress
REF_236(mapping(address => uint256)) -> userDetails[REF_235]
REF_237(uint256) -> tradeDetails[8]
REF_238(StableDEX.orders) -> Order[REF_237]
REF_239(address) -> REF_238.tokenAddress
REF_240(uint256) -> REF_236[REF_239]
REF_242(uint256) -> tradeDetails[1]
TMP_194(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_240', 'REF_242'] 
REF_233 (->userDetails) := TMP_194(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
userDetails[Order[orderiD].userAddress][traderAddresses[0]] = userDetails[Order[orderiD].userAddress][traderAddresses[0]].sub(tradeDetails[4])

IRs:
REF_243(StableDEX.orders) -> Order[orderiD]
REF_244(address) -> REF_243.userAddress
REF_245(mapping(address => uint256)) -> userDetails[REF_244]
REF_246(address) -> traderAddresses[0]
REF_247(uint256) -> REF_245[REF_246]
REF_248(StableDEX.orders) -> Order[orderiD]
REF_249(address) -> REF_248.userAddress
REF_250(mapping(address => uint256)) -> userDetails[REF_249]
REF_251(address) -> traderAddresses[0]
REF_252(uint256) -> REF_250[REF_251]
REF_254(uint256) -> tradeDetails[4]
TMP_195(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_252', 'REF_254'] 
REF_247 (->userDetails) := TMP_195(uint256)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
feeAmount[admin][traderAddresses[0]] = feeAmount[admin][traderAddresses[0]].add(tradeDetails[4])

IRs:
REF_255(mapping(address => uint256)) -> feeAmount[admin]
REF_256(address) -> traderAddresses[0]
REF_257(uint256) -> REF_255[REF_256]
REF_258(mapping(address => uint256)) -> feeAmount[admin]
REF_259(address) -> traderAddresses[0]
REF_260(uint256) -> REF_258[REF_259]
REF_262(uint256) -> tradeDetails[4]
TMP_196(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_260', 'REF_262'] 
REF_257 (->feeAmount) := TMP_196(uint256)"];
39->42;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress] = userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[1].sub(tradeDetails[4]))

IRs:
REF_263(StableDEX.orders) -> Order[orderiD]
REF_264(address) -> REF_263.userAddress
REF_265(mapping(address => uint256)) -> userDetails[REF_264]
REF_266(uint256) -> tradeDetails[8]
REF_267(StableDEX.orders) -> Order[REF_266]
REF_268(address) -> REF_267.tokenAddress
REF_269(uint256) -> REF_265[REF_268]
REF_270(StableDEX.orders) -> Order[orderiD]
REF_271(address) -> REF_270.userAddress
REF_272(mapping(address => uint256)) -> userDetails[REF_271]
REF_273(uint256) -> tradeDetails[8]
REF_274(StableDEX.orders) -> Order[REF_273]
REF_275(address) -> REF_274.tokenAddress
REF_276(uint256) -> REF_272[REF_275]
REF_278(uint256) -> tradeDetails[1]
REF_280(uint256) -> tradeDetails[4]
TMP_197(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_278', 'REF_280'] 
TMP_198(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_276', 'TMP_197'] 
REF_269 (->userDetails) := TMP_198(uint256)"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
feeAmount[admin][Order[tradeDetails[8]].tokenAddress] = feeAmount[admin][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[4])

IRs:
REF_281(mapping(address => uint256)) -> feeAmount[admin]
REF_282(uint256) -> tradeDetails[8]
REF_283(StableDEX.orders) -> Order[REF_282]
REF_284(address) -> REF_283.tokenAddress
REF_285(uint256) -> REF_281[REF_284]
REF_286(mapping(address => uint256)) -> feeAmount[admin]
REF_287(uint256) -> tradeDetails[8]
REF_288(StableDEX.orders) -> Order[REF_287]
REF_289(address) -> REF_288.tokenAddress
REF_290(uint256) -> REF_286[REF_289]
REF_292(uint256) -> tradeDetails[4]
TMP_199(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_290', 'REF_292'] 
REF_285 (->feeAmount) := TMP_199(uint256)"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: IF 43

EXPRESSION:
tradeDetails[6] == 2 || tradeDetails[6] == 3

IRs:
REF_293(uint256) -> tradeDetails[6]
TMP_200(bool) = REF_293 == 2
REF_294(uint256) -> tradeDetails[6]
TMP_201(bool) = REF_294 == 3
TMP_202(bool) = TMP_200 || TMP_201
CONDITION TMP_202"];
43->44[label="True"];
43->47[label="False"];
44[label="Node Type: EXPRESSION 44

EXPRESSION:
userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress] = userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[3])

IRs:
REF_295(uint256) -> tradeDetails[8]
REF_296(StableDEX.orders) -> Order[REF_295]
REF_297(address) -> REF_296.userAddress
REF_298(mapping(address => uint256)) -> userDetails[REF_297]
REF_299(StableDEX.orders) -> Order[orderiD]
REF_300(address) -> REF_299.tokenAddress
REF_301(uint256) -> REF_298[REF_300]
REF_302(uint256) -> tradeDetails[8]
REF_303(StableDEX.orders) -> Order[REF_302]
REF_304(address) -> REF_303.userAddress
REF_305(mapping(address => uint256)) -> userDetails[REF_304]
REF_306(StableDEX.orders) -> Order[orderiD]
REF_307(address) -> REF_306.tokenAddress
REF_308(uint256) -> REF_305[REF_307]
REF_310(uint256) -> tradeDetails[3]
TMP_203(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_308', 'REF_310'] 
REF_301 (->userDetails) := TMP_203(uint256)"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
userDetails[Order[tradeDetails[8]].userAddress][traderAddresses[0]] = userDetails[Order[tradeDetails[8]].userAddress][traderAddresses[0]].sub(tradeDetails[5])

IRs:
REF_311(uint256) -> tradeDetails[8]
REF_312(StableDEX.orders) -> Order[REF_311]
REF_313(address) -> REF_312.userAddress
REF_314(mapping(address => uint256)) -> userDetails[REF_313]
REF_315(address) -> traderAddresses[0]
REF_316(uint256) -> REF_314[REF_315]
REF_317(uint256) -> tradeDetails[8]
REF_318(StableDEX.orders) -> Order[REF_317]
REF_319(address) -> REF_318.userAddress
REF_320(mapping(address => uint256)) -> userDetails[REF_319]
REF_321(address) -> traderAddresses[0]
REF_322(uint256) -> REF_320[REF_321]
REF_324(uint256) -> tradeDetails[5]
TMP_204(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_322', 'REF_324'] 
REF_316 (->userDetails) := TMP_204(uint256)"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
feeAmount[admin][traderAddresses[0]] = feeAmount[admin][traderAddresses[0]].add(tradeDetails[5])

IRs:
REF_325(mapping(address => uint256)) -> feeAmount[admin]
REF_326(address) -> traderAddresses[0]
REF_327(uint256) -> REF_325[REF_326]
REF_328(mapping(address => uint256)) -> feeAmount[admin]
REF_329(address) -> traderAddresses[0]
REF_330(uint256) -> REF_328[REF_329]
REF_332(uint256) -> tradeDetails[5]
TMP_205(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_330', 'REF_332'] 
REF_327 (->feeAmount) := TMP_205(uint256)"];
46->49;
47[label="Node Type: EXPRESSION 47

EXPRESSION:
userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress] = userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[3].sub(tradeDetails[5]))

IRs:
REF_333(uint256) -> tradeDetails[8]
REF_334(StableDEX.orders) -> Order[REF_333]
REF_335(address) -> REF_334.userAddress
REF_336(mapping(address => uint256)) -> userDetails[REF_335]
REF_337(StableDEX.orders) -> Order[orderiD]
REF_338(address) -> REF_337.tokenAddress
REF_339(uint256) -> REF_336[REF_338]
REF_340(uint256) -> tradeDetails[8]
REF_341(StableDEX.orders) -> Order[REF_340]
REF_342(address) -> REF_341.userAddress
REF_343(mapping(address => uint256)) -> userDetails[REF_342]
REF_344(StableDEX.orders) -> Order[orderiD]
REF_345(address) -> REF_344.tokenAddress
REF_346(uint256) -> REF_343[REF_345]
REF_348(uint256) -> tradeDetails[3]
REF_350(uint256) -> tradeDetails[5]
TMP_206(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_348', 'REF_350'] 
TMP_207(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_346', 'TMP_206'] 
REF_339 (->userDetails) := TMP_207(uint256)"];
47->48;
48[label="Node Type: EXPRESSION 48

EXPRESSION:
feeAmount[admin][Order[orderiD].tokenAddress] = feeAmount[admin][Order[orderiD].tokenAddress].add(tradeDetails[5])

IRs:
REF_351(mapping(address => uint256)) -> feeAmount[admin]
REF_352(StableDEX.orders) -> Order[orderiD]
REF_353(address) -> REF_352.tokenAddress
REF_354(uint256) -> REF_351[REF_353]
REF_355(mapping(address => uint256)) -> feeAmount[admin]
REF_356(StableDEX.orders) -> Order[orderiD]
REF_357(address) -> REF_356.tokenAddress
REF_358(uint256) -> REF_355[REF_357]
REF_360(uint256) -> tradeDetails[5]
TMP_208(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_358', 'REF_360'] 
REF_354 (->feeAmount) := TMP_208(uint256)"];
48->49;
49[label="Node Type: END_IF 49
"];
49->50;
50[label="Node Type: IF 50

EXPRESSION:
Order[tradeDetails[8]].tradeAmount == 0

IRs:
REF_361(uint256) -> tradeDetails[8]
REF_362(StableDEX.orders) -> Order[REF_361]
REF_363(uint256) -> REF_362.tradeAmount
TMP_209(bool) = REF_363 == 0
CONDITION TMP_209"];
50->51[label="True"];
50->52[label="False"];
51[label="Node Type: EXPRESSION 51

EXPRESSION:
Order[tradeDetails[8]].status = 2

IRs:
REF_364(uint256) -> tradeDetails[8]
REF_365(StableDEX.orders) -> Order[REF_364]
REF_366(uint256) -> REF_365.status
REF_366 (->Order) := 2(uint256)"];
51->52;
52[label="Node Type: END_IF 52
"];
52->53;
53[label="Node Type: IF 53

EXPRESSION:
Order[orderiD].tradeAmount == 0

IRs:
REF_367(StableDEX.orders) -> Order[orderiD]
REF_368(uint256) -> REF_367.tradeAmount
TMP_210(bool) = REF_368 == 0
CONDITION TMP_210"];
53->54[label="True"];
53->55[label="False"];
54[label="Node Type: EXPRESSION 54

EXPRESSION:
Order[orderiD].status = 2

IRs:
REF_369(StableDEX.orders) -> Order[orderiD]
REF_370(uint256) -> REF_369.status
REF_370 (->Order) := 2(uint256)"];
54->55;
55[label="Node Type: END_IF 55
"];
55->56;
56[label="Node Type: EXPRESSION 56

EXPRESSION:
orderPairStatus[orderiD][tradeDetails[8]] = true

IRs:
REF_371(mapping(uint256 => bool)) -> orderPairStatus[orderiD]
REF_372(uint256) -> tradeDetails[8]
REF_373(bool) -> REF_371[REF_372]
REF_373 (->orderPairStatus) := True(bool)"];
56->57;
57[label="Node Type: END_IF 57
"];
57->58;
58[label="Node Type: RETURN 58

EXPRESSION:
true

IRs:
RETURN True"];
59[label="Node Type: EXPRESSION 59

EXPRESSION:
dexstatuscheck()

IRs:
MODIFIER_CALL, StableDEX.dexstatuscheck()()"];
59->1;
}
