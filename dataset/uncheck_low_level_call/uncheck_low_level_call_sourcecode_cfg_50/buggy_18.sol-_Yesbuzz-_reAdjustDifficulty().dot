digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted

IRs:
TMP_94(uint256) = block.number - latestDifficultyPeriodStarted
ethBlocksSinceLastDifficultyPeriod(uint256) := TMP_94(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
epochsMined = _BLOCKS_PER_READJUSTMENT

IRs:
epochsMined(uint256) := _BLOCKS_PER_READJUSTMENT(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
targetEthBlocksPerDiffPeriod = epochsMined * 60

IRs:
TMP_95(uint256) = epochsMined * 60
targetEthBlocksPerDiffPeriod(uint256) := TMP_95(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod

IRs:
TMP_96(bool) = ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod
CONDITION TMP_96"];
4->5[label="True"];
4->8[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div(ethBlocksSinceLastDifficultyPeriod)

IRs:
TMP_97(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['targetEthBlocksPerDiffPeriod', '100'] 
TMP_98(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_97', 'ethBlocksSinceLastDifficultyPeriod'] 
excess_block_pct(uint256) := TMP_98(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000)

IRs:
TMP_99(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['excess_block_pct', '100'] 
TMP_100(uint256) = LIBRARY_CALL, dest:ExtendedMath, function:ExtendedMath.limitLessThan(uint256,uint256), arguments:['TMP_99', '1000'] 
excess_block_pct_extra(uint256) := TMP_100(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra))

IRs:
TMP_101(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['miningTarget', '2000'] 
TMP_102(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_101', 'excess_block_pct_extra'] 
TMP_103(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['miningTarget', 'TMP_102'] 
miningTarget(uint256) := TMP_103(uint256)"];
7->11;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div(targetEthBlocksPerDiffPeriod)

IRs:
TMP_104(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['ethBlocksSinceLastDifficultyPeriod', '100'] 
TMP_105(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_104', 'targetEthBlocksPerDiffPeriod'] 
shortage_block_pct(uint256) := TMP_105(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000)

IRs:
TMP_106(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['shortage_block_pct', '100'] 
TMP_107(uint256) = LIBRARY_CALL, dest:ExtendedMath, function:ExtendedMath.limitLessThan(uint256,uint256), arguments:['TMP_106', '1000'] 
shortage_block_pct_extra(uint256) := TMP_107(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra))

IRs:
TMP_108(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['miningTarget', '2000'] 
TMP_109(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_108', 'shortage_block_pct_extra'] 
TMP_110(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['miningTarget', 'TMP_109'] 
miningTarget(uint256) := TMP_110(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
latestDifficultyPeriodStarted = block.number

IRs:
latestDifficultyPeriodStarted(uint256) := block.number(uint256)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
miningTarget < _MINIMUM_TARGET

IRs:
TMP_111(bool) = miningTarget < _MINIMUM_TARGET
CONDITION TMP_111"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
miningTarget = _MINIMUM_TARGET

IRs:
miningTarget(uint256) := _MINIMUM_TARGET(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
miningTarget > _MAXIMUM_TARGET

IRs:
TMP_112(bool) = miningTarget > _MAXIMUM_TARGET
CONDITION TMP_112"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
miningTarget = _MAXIMUM_TARGET

IRs:
miningTarget(uint256) := _MAXIMUM_TARGET(uint256)"];
17->18;
18[label="Node Type: END_IF 18
"];
}
