digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(bytes(account).length > 0)

IRs:
TMP_124 = CONVERT account to bytes
REF_64 -> LENGTH TMP_124
TMP_125(bool) = REF_64 > 0
TMP_126(None) = SOLIDITY_CALL require(bool)(TMP_125)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
btc[account] = 

IRs:
REF_65(string) -> btc[account]
REF_65 (->btc) := (string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
eth[account] = address(0)

IRs:
REF_66(address) -> eth[account]
TMP_127 = CONVERT 0 to address
REF_66 (->eth) := TMP_127(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
DeleteAddress(account)

IRs:
Emit DeleteAddress(account)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyMaster()

IRs:
MODIFIER_CALL, Ownable.onlyMaster()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyWhenNotStopped()

IRs:
MODIFIER_CALL, Ownable.onlyWhenNotStopped()()"];
6->1;
}
