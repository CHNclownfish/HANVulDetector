digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value == (bet * 1000000000000000))

IRs:
TMP_34(uint256) = bet * 1000000000000000
TMP_35(bool) = msg.value == TMP_34
TMP_36(None) = SOLIDITY_CALL require(bool)(TMP_35)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
guesses[UP].guesses_number ++

IRs:
REF_28(StockBet.Guess) -> guesses[UP]
REF_29(uint256) -> REF_28.guesses_number
TMP_37(uint256) := REF_29(uint256)
REF_29(-> guesses) = REF_29 + 1"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
guesses[UP].players[msg.sender] = PaidStatus.NOT_PAID

IRs:
REF_30(StockBet.Guess) -> guesses[UP]
REF_31(mapping(address => StockBet.PaidStatus)) -> REF_30.players
REF_32(StockBet.PaidStatus) -> REF_31[msg.sender]
REF_33(StockBet.PaidStatus) -> PaidStatus.NOT_PAID
REF_32 (->guesses) := REF_33(StockBet.PaidStatus)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
PlayerBet(msg.sender,UP)

IRs:
Emit PlayerBet(msg.sender.UP)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
byPlayer()

IRs:
MODIFIER_CALL, StockBet.byPlayer()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
inState(State.OPEN)

IRs:
REF_34(StockBet.State) -> State.OPEN
MODIFIER_CALL, StockBet.inState(StockBet.State)(REF_34)"];
6->1;
}
