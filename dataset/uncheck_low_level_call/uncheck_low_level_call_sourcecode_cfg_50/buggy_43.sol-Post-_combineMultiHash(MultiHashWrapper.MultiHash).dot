digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
out = new bytes(34)

IRs:
TMP_143 = new bytes(34)
out(bytes) := TMP_143(bytes)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
out[0] = bytes1(multihash.hashFunction)

IRs:
REF_74(bytes1) -> out[0]
REF_75(uint8) -> multihash.hashFunction
TMP_144 = CONVERT REF_75 to bytes1
REF_74 (->out) := TMP_144(bytes1)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
out[1] = bytes1(multihash.digestSize)

IRs:
REF_76(bytes1) -> out[1]
REF_77(uint8) -> multihash.digestSize
TMP_145 = CONVERT REF_77 to bytes1
REF_76 (->out) := TMP_145(bytes1)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->11;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < 32

IRs:
TMP_146(bool) = i < 32
CONDITION TMP_146"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
out[i + 2] = multihash.hash[i]

IRs:
TMP_147(uint8) = i + 2
REF_78(None) -> out[TMP_147]
REF_79(bytes32) -> multihash.hash
REF_80(None) -> REF_79[i]
REF_78 (->out) := REF_80(None)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_148(uint8) := i(uint8)
i(uint8) = i + 1"];
10->8;
11[label="Node Type: RETURN 11

EXPRESSION:
out

IRs:
RETURN out"];
}
