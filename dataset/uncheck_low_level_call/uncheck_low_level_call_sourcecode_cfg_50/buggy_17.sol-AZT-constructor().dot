digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
frozenAddresses.push(address(0x9fd50776F133751E8Ae6abE1Be124638Bb917E05))

IRs:
TMP_95 = CONVERT 912480241548209455660388499842434547007005752837 to address
REF_71 -> LENGTH frozenAddresses
TMP_97(uint256) := REF_71(uint256)
TMP_98(uint256) = TMP_97 + 1
REF_71 (->frozenAddresses) := TMP_98(uint256)
REF_72(address) -> frozenAddresses[TMP_97]
REF_72 (->frozenAddresses) := TMP_95(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
frozenWallets[frozenAddresses[0]] = frozenWallet(true,30000000 * 10 ** uint256(decimals),0 * 10 ** uint256(decimals),now + 1 * 3600)

IRs:
REF_73(address) -> frozenAddresses[0]
REF_74(AZT.frozenWallet) -> frozenWallets[REF_73]
TMP_99 = CONVERT decimals to uint256
TMP_100(uint256) = 10 ** TMP_99
TMP_101(uint256) = 30000000 * TMP_100
TMP_102 = CONVERT decimals to uint256
TMP_103(uint256) = 10 ** TMP_102
TMP_104(uint256) = 0 * TMP_103
TMP_105(uint256) = 1 * 3600
TMP_106(uint256) = now + TMP_105
TMP_107 = new frozenWallet(True,TMP_101,TMP_104,TMP_106)
REF_74 (->frozenWallets) := TMP_107(AZT.frozenWallet)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < frozenAddresses.length

IRs:
REF_75 -> LENGTH frozenAddresses
TMP_108(bool) = i < REF_75
CONDITION TMP_108"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balanceOf[frozenAddresses[i]] = frozenWallets[frozenAddresses[i]].rewardedAmount

IRs:
REF_76(address) -> frozenAddresses[i]
REF_77(uint256) -> balanceOf[REF_76]
REF_78(address) -> frozenAddresses[i]
REF_79(AZT.frozenWallet) -> frozenWallets[REF_78]
REF_80(uint256) -> REF_79.rewardedAmount
REF_77 (->balanceOf) := REF_80(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
totalSupply = totalSupply.add(frozenWallets[frozenAddresses[i]].rewardedAmount)

IRs:
REF_82(address) -> frozenAddresses[i]
REF_83(AZT.frozenWallet) -> frozenWallets[REF_82]
REF_84(uint256) -> REF_83.rewardedAmount
TMP_109(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply', 'REF_84'] 
totalSupply(uint256) := TMP_109(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_110(uint256) := i(uint256)
i(uint256) = i + 1"];
9->6;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
TokenERC20(_tokenName,_tokenSymbol,_decimals)

IRs:
INTERNAL_CALL, TokenERC20.constructor(string,string,uint8)(_tokenName,_tokenSymbol,_decimals)"];
10->1;
}
