digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(_from == owner || (! tokenFrozen && (! frozenWallets[_from].isFrozen || now >= frozenWallets[_from].frozenTime || balanceOf[_from].sub(_value) >= frozenWallets[_from].frozenAmount)))

IRs:
TMP_122(bool) = _from == owner
TMP_123 = ! tokenFrozen 
REF_93(AZT.frozenWallet) -> frozenWallets[_from]
REF_94(bool) -> REF_93.isFrozen
TMP_124 = ! REF_94 
REF_95(AZT.frozenWallet) -> frozenWallets[_from]
REF_96(uint256) -> REF_95.frozenTime
TMP_125(bool) = now >= REF_96
TMP_126(bool) = TMP_124 || TMP_125
REF_97(uint256) -> balanceOf[_from]
TMP_127(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_97', '_value'] 
REF_99(AZT.frozenWallet) -> frozenWallets[_from]
REF_100(uint256) -> REF_99.frozenAmount
TMP_128(bool) = TMP_127 >= REF_100
TMP_129(bool) = TMP_126 || TMP_128
TMP_130(bool) = TMP_123 && TMP_129
TMP_131(bool) = TMP_122 || TMP_130
RETURN TMP_131"];
}
