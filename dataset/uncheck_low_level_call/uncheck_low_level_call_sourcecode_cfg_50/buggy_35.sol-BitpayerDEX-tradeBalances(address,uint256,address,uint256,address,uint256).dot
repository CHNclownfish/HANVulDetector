digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tradingFeeXfer = calculatePercentage(amount,tradingFee)

IRs:
TMP_139(uint256) = INTERNAL_CALL, BitpayerDEX.calculatePercentage(uint256,uint256)(amount,tradingFee)
tradingFeeXfer(uint256) := TMP_139(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokens[tokenGet][msg.sender] = tokens[tokenGet][msg.sender].sub(amount.add(tradingFeeXfer))

IRs:
REF_92(mapping(address => uint256)) -> tokens[tokenGet]
REF_93(uint256) -> REF_92[msg.sender]
REF_94(mapping(address => uint256)) -> tokens[tokenGet]
REF_95(uint256) -> REF_94[msg.sender]
TMP_140(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['amount', 'tradingFeeXfer'] 
TMP_141(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_95', 'TMP_140'] 
REF_93 (->tokens) := TMP_141(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokens[tokenGet][user] = tokens[tokenGet][user].add(amount.sub(tradingFeeXfer))

IRs:
REF_98(mapping(address => uint256)) -> tokens[tokenGet]
REF_99(uint256) -> REF_98[user]
REF_100(mapping(address => uint256)) -> tokens[tokenGet]
REF_101(uint256) -> REF_100[user]
TMP_142(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['amount', 'tradingFeeXfer'] 
TMP_143(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_101', 'TMP_142'] 
REF_99 (->tokens) := TMP_143(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokens[address(0)][feeAccount] = tokens[address(0)][feeAccount].add(tradingFeeXfer)

IRs:
TMP_144 = CONVERT 0 to address
REF_104(mapping(address => uint256)) -> tokens[TMP_144]
REF_105(uint256) -> REF_104[feeAccount]
TMP_145 = CONVERT 0 to address
REF_106(mapping(address => uint256)) -> tokens[TMP_145]
REF_107(uint256) -> REF_106[feeAccount]
TMP_146(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_107', 'tradingFeeXfer'] 
REF_105 (->tokens) := TMP_146(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokens[tokenGive][user] = tokens[tokenGive][user].sub(amountGive.mul(amount) / amountGet)

IRs:
REF_109(mapping(address => uint256)) -> tokens[tokenGive]
REF_110(uint256) -> REF_109[user]
REF_111(mapping(address => uint256)) -> tokens[tokenGive]
REF_112(uint256) -> REF_111[user]
TMP_147(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['amountGive', 'amount'] 
TMP_148(uint256) = TMP_147 / amountGet
TMP_149(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_112', 'TMP_148'] 
REF_110 (->tokens) := TMP_149(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tokens[tokenGive][msg.sender] = tokens[tokenGive][msg.sender].add(amountGive.mul(amount) / amountGet)

IRs:
REF_115(mapping(address => uint256)) -> tokens[tokenGive]
REF_116(uint256) -> REF_115[msg.sender]
REF_117(mapping(address => uint256)) -> tokens[tokenGive]
REF_118(uint256) -> REF_117[msg.sender]
TMP_150(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['amountGive', 'amount'] 
TMP_151(uint256) = TMP_150 / amountGet
TMP_152(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_118', 'TMP_151'] 
REF_116 (->tokens) := TMP_152(uint256)"];
}
