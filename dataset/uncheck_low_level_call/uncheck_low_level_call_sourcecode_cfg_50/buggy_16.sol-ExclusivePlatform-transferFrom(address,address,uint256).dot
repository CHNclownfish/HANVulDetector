digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(allowed[_from][msg.sender] >= _amount)

IRs:
REF_54(mapping(address => uint256)) -> allowed[_from]
REF_55(uint256) -> REF_54[msg.sender]
TMP_99(bool) = REF_55 >= _amount
TMP_100(None) = SOLIDITY_CALL require(bool)(TMP_99)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount)

IRs:
REF_56(mapping(address => uint256)) -> allowed[_from]
REF_57(uint256) -> REF_56[msg.sender]
REF_58(mapping(address => uint256)) -> allowed[_from]
REF_59(uint256) -> REF_58[msg.sender]
TMP_101(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_59', '_amount'] 
REF_57 (->allowed) := TMP_101(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
doTransfer(_from,_to,_amount)

IRs:
INTERNAL_CALL, ExclusivePlatform.doTransfer(address,address,uint256)(_from,_to,_amount)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyPayloadSize(3 * 32)

IRs:
TMP_103(uint256) = 3 * 32
MODIFIER_CALL, ExclusivePlatform.onlyPayloadSize(uint256)(TMP_103)"];
5->1;
}
