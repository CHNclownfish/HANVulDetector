digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(! safeGuard,System Paused by Admin)

IRs:
TMP_79 = ! safeGuard 
TMP_80(None) = SOLIDITY_CALL require(bool,string)(TMP_79,System Paused by Admin)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(tokens[address(0)][msg.sender] >= amount)

IRs:
TMP_81 = CONVERT 0 to address
REF_42(mapping(address => uint256)) -> tokens[TMP_81]
REF_43(uint256) -> REF_42[msg.sender]
TMP_82(bool) = REF_43 >= amount
TMP_83(None) = SOLIDITY_CALL require(bool)(TMP_82)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].sub(amount)

IRs:
TMP_84 = CONVERT 0 to address
REF_44(mapping(address => uint256)) -> tokens[TMP_84]
REF_45(uint256) -> REF_44[msg.sender]
TMP_85 = CONVERT 0 to address
REF_46(mapping(address => uint256)) -> tokens[TMP_85]
REF_47(uint256) -> REF_46[msg.sender]
TMP_86(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_47', 'amount'] 
REF_45 (->tokens) := TMP_86(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
msg.sender.transfer(amount)

IRs:
Transfer dest:msg.sender value:amount"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Withdraw(now,address(0),msg.sender,amount,tokens[address(0)][msg.sender])

IRs:
TMP_88 = CONVERT 0 to address
TMP_89 = CONVERT 0 to address
REF_50(mapping(address => uint256)) -> tokens[TMP_89]
REF_51(uint256) -> REF_50[msg.sender]
Emit Withdraw(now.TMP_88.msg.sender.amount.REF_51)"];
}
