digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
bytes(a).length != bytes(b).length

IRs:
TMP_13 = CONVERT a to bytes
REF_37 -> LENGTH TMP_13
TMP_14 = CONVERT b to bytes
REF_38 -> LENGTH TMP_14
TMP_15(bool) = REF_37 != REF_38
CONDITION TMP_15"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: RETURN 3

EXPRESSION:
keccak256(bytes)(abi.encode(a)) == keccak256(bytes)(abi.encode(b))

IRs:
TMP_16(bytes) = SOLIDITY_CALL abi.encode()(a)
TMP_17(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_16)
TMP_18(bytes) = SOLIDITY_CALL abi.encode()(b)
TMP_19(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_18)
TMP_20(bool) = TMP_17 == TMP_19
RETURN TMP_20"];
}
