digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
p = proposals[proposalNumber]

IRs:
REF_66(MindsyncPlatform.Proposal) -> proposals[proposalNumber]
p(MindsyncPlatform.Proposal) := REF_66(MindsyncPlatform.Proposal)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(initialized)

IRs:
TMP_111(None) = SOLIDITY_CALL require(bool)(initialized)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(now > p.minExecutionDate && ! p.executed && p.proposalHash == keccak256(bytes)(abi.encodePacked(p.recipient,p.amount,transactionBytecode)))

IRs:
REF_67(uint256) -> p.minExecutionDate
TMP_112(bool) = now > REF_67
REF_68(bool) -> p.executed
TMP_113 = ! REF_68 
TMP_114(bool) = TMP_112 && TMP_113
REF_69(bytes32) -> p.proposalHash
REF_71(address) -> p.recipient
REF_72(uint256) -> p.amount
TMP_115(bytes) = SOLIDITY_CALL abi.encodePacked()(REF_71,REF_72,transactionBytecode)
TMP_116(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_115)
TMP_117(bool) = REF_69 == TMP_116
TMP_118(bool) = TMP_114 && TMP_117
TMP_119(None) = SOLIDITY_CALL require(bool)(TMP_118)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
quorum = 0

IRs:
quorum(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
yea = 0

IRs:
yea(uint256) := 0(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
nay = 0

IRs:
nay(uint256) := 0(uint256)"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->19;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < p.votes.length

IRs:
REF_73(MindsyncPlatform.Vote[]) -> p.votes
REF_74 -> LENGTH REF_73
TMP_120(bool) = i < REF_74
CONDITION TMP_120"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
v = p.votes[i]

IRs:
REF_75(MindsyncPlatform.Vote[]) -> p.votes
REF_76(MindsyncPlatform.Vote) -> REF_75[i]
v(MindsyncPlatform.Vote) := REF_76(MindsyncPlatform.Vote)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
voteWeight = tokenAddress.actualBalanceOf(v.voter)

IRs:
REF_78(address) -> v.voter
TMP_121(uint256) = HIGH_LEVEL_CALL, dest:tokenAddress(Token), function:actualBalanceOf, arguments:['REF_78']  
voteWeight(uint256) := TMP_121(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
quorum += voteWeight

IRs:
quorum(uint256) = quorum + voteWeight"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
v.inSupport

IRs:
REF_79(bool) -> v.inSupport
CONDITION REF_79"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
yea += voteWeight

IRs:
yea(uint256) = yea + voteWeight"];
15->17;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
nay += voteWeight

IRs:
nay(uint256) = nay + voteWeight"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
++ i

IRs:
i(uint256) = i + 1"];
18->10;
19[label="Node Type: NEW VARIABLE 19

EXPRESSION:
t = Token(tokenAddress)

IRs:
TMP_122 = CONVERT tokenAddress to Token
t(Token) := TMP_122(Token)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
require(bool)(quorum >= t.totalSupply().mul(minimumQuorum).div(100))

IRs:
TMP_123(uint256) = HIGH_LEVEL_CALL, dest:t(Token), function:totalSupply, arguments:[]  
TMP_124(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_123', 'minimumQuorum'] 
TMP_125(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_124', '100'] 
TMP_126(bool) = quorum >= TMP_125
TMP_127(None) = SOLIDITY_CALL require(bool)(TMP_126)"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
yea > nay

IRs:
TMP_128(bool) = yea > nay
CONDITION TMP_128"];
21->22[label="True"];
21->27[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
p.executed = true

IRs:
REF_83(bool) -> p.executed
REF_83 (->p) := True(bool)"];
22->23;
23[label="Node Type: NEW VARIABLE 23
"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
(success) = p.recipient.call.value(p.amount)(transactionBytecode)

IRs:
REF_84(address) -> p.recipient
REF_87(uint256) -> p.amount
TUPLE_0(bool,bytes) = LOW_LEVEL_CALL, dest:REF_84, function:call, arguments:['transactionBytecode'] value:REF_87 
success(bool)= UNPACK TUPLE_0 index: 0 "];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
require(bool)(success)

IRs:
TMP_130(None) = SOLIDITY_CALL require(bool)(success)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
p.proposalPassed = true

IRs:
REF_88(bool) -> p.proposalPassed
REF_88 (->p) := True(bool)"];
26->28;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
p.proposalPassed = false

IRs:
REF_89(bool) -> p.proposalPassed
REF_89 (->p) := False(bool)"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
ProposalTallied(proposalNumber,yea - nay,quorum,p.proposalPassed)

IRs:
TMP_131(uint256) = yea - nay
REF_90(bool) -> p.proposalPassed
Emit ProposalTallied(proposalNumber.TMP_131.quorum.REF_90)"];
}
