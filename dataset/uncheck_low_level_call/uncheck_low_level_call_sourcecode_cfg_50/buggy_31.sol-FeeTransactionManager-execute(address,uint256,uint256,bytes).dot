digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(tx.origin == relayer,Invalid transaction origin)

IRs:
TMP_55(bool) = tx.origin == relayer
TMP_56(None) = SOLIDITY_CALL require(bool,string)(TMP_55,Invalid transaction origin)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
marmo = Marmo(msg.sender)

IRs:
TMP_57 = CONVERT msg.sender to Marmo
marmo(Marmo) := TMP_57(Marmo)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
hash = keccak256(bytes)(abi.encodePacked(_to,_value,_fee))

IRs:
TMP_58(bytes) = SOLIDITY_CALL abi.encodePacked()(_to,_value,_fee)
TMP_59(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_58)
hash(bytes32) := TMP_59(bytes32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(marmo.signer() == ECDSA.recover(hash,_signature),Invalid signature)

IRs:
TMP_60(address) = HIGH_LEVEL_CALL, dest:marmo(Marmo), function:signer, arguments:[]  
TMP_61(address) = LIBRARY_CALL, dest:ECDSA, function:ECDSA.recover(bytes32,bytes), arguments:['hash', '_signature'] 
TMP_62(bool) = TMP_60 == TMP_61
TMP_63(None) = SOLIDITY_CALL require(bool,string)(TMP_62,Invalid signature)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(token.transferFrom(msg.sender,_to,_value))

IRs:
TMP_64(bool) = HIGH_LEVEL_CALL, dest:token(IERC20), function:transferFrom, arguments:['msg.sender', '_to', '_value']  
TMP_65(None) = SOLIDITY_CALL require(bool)(TMP_64)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(token.transferFrom(msg.sender,relayer,_fee))

IRs:
TMP_66(bool) = HIGH_LEVEL_CALL, dest:token(IERC20), function:transferFrom, arguments:['msg.sender', 'relayer', '_fee']  
TMP_67(None) = SOLIDITY_CALL require(bool)(TMP_66)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
nonReentrant()

IRs:
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()"];
7->1;
}
