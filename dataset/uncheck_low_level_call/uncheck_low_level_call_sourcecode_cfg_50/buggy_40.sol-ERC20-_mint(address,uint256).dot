digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(account != address(0),ERC20: mint to the zero address)

IRs:
TMP_47 = CONVERT 0 to address
TMP_48(bool) = account != TMP_47
TMP_49(None) = SOLIDITY_CALL require(bool,string)(TMP_48,ERC20: mint to the zero address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_totalSupply = _totalSupply.add(amount)

IRs:
TMP_50(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_totalSupply', 'amount'] 
_totalSupply(uint256) := TMP_50(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_balances[account] = _balances[account].add(amount)

IRs:
REF_31(uint256) -> _balances[account]
REF_32(uint256) -> _balances[account]
TMP_51(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_32', 'amount'] 
REF_31 (->_balances) := TMP_51(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),account,amount)

IRs:
TMP_52 = CONVERT 0 to address
Emit Transfer(TMP_52.account.amount)"];
}
