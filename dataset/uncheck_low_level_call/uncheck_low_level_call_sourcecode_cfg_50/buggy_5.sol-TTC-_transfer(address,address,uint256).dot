digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0x0))

IRs:
TMP_116 = CONVERT 0 to address
TMP_117(bool) = _to != TMP_116
TMP_118(None) = SOLIDITY_CALL require(bool)(TMP_117)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_93(uint256) -> balanceOf[_from]
TMP_119(bool) = REF_93 >= _value
TMP_120(None) = SOLIDITY_CALL require(bool)(TMP_119)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balanceOf[_to] + _value >= balanceOf[_to])

IRs:
REF_94(uint256) -> balanceOf[_to]
TMP_121(uint256) = REF_94 + _value
REF_95(uint256) -> balanceOf[_to]
TMP_122(bool) = TMP_121 >= REF_95
TMP_123(None) = SOLIDITY_CALL require(bool)(TMP_122)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(! frozenAccount[_from])

IRs:
REF_96(bool) -> frozenAccount[_from]
TMP_124 = ! REF_96 
TMP_125(None) = SOLIDITY_CALL require(bool)(TMP_124)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(! frozenAccount[_to])

IRs:
REF_97(bool) -> frozenAccount[_to]
TMP_126 = ! REF_97 
TMP_127(None) = SOLIDITY_CALL require(bool)(TMP_126)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balanceOf[_from] -= _value

IRs:
REF_98(uint256) -> balanceOf[_from]
REF_98(-> balanceOf) = REF_98 - _value"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balanceOf[_to] += _value

IRs:
REF_99(uint256) -> balanceOf[_to]
REF_99(-> balanceOf) = REF_99 + _value"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from._to._value)"];
}
