digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
guesses[result].players[msg.sender] == PaidStatus.NOT_PAID

IRs:
REF_54(StockBet.Guess) -> guesses[result]
REF_55(mapping(address => StockBet.PaidStatus)) -> REF_54.players
REF_56(StockBet.PaidStatus) -> REF_55[msg.sender]
REF_57(StockBet.PaidStatus) -> PaidStatus.NOT_PAID
TMP_64(bool) = REF_56 == REF_57
CONDITION TMP_64"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
guesses[result].players[msg.sender] = PaidStatus.PAID

IRs:
REF_58(StockBet.Guess) -> guesses[result]
REF_59(mapping(address => StockBet.PaidStatus)) -> REF_58.players
REF_60(StockBet.PaidStatus) -> REF_59[msg.sender]
REF_61(StockBet.PaidStatus) -> PaidStatus.PAID
REF_60 (->guesses) := REF_61(StockBet.PaidStatus)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
msg.sender.transfer(splitJackpot)

IRs:
Transfer dest:msg.sender value:splitJackpot"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
revert()()

IRs:
TMP_66(None) = SOLIDITY_CALL revert()()"];
4->5;
5[label="Node Type: END_IF 5
"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
byPlayer()

IRs:
MODIFIER_CALL, StockBet.byPlayer()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
inState(State.PLAYERS_WIN)

IRs:
REF_63(StockBet.State) -> State.PLAYERS_WIN
MODIFIER_CALL, StockBet.inState(StockBet.State)(REF_63)"];
7->1;
}
