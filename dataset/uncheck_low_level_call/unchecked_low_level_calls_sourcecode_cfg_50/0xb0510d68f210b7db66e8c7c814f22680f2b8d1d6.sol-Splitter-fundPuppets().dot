digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_18(bool) = msg.sender == owner
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_share = SafeMath.div(msg.value,4)

IRs:
TMP_20(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['msg.value', '4'] 
_share(uint256) := TMP_20(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
extra[0].call.value(_share).gas(800000)()

IRs:
REF_16(address) -> extra[0]
TMP_23(bool) = LOW_LEVEL_CALL, dest:REF_16, function:call, arguments:[] value:_share gas:800000"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
extra[1].call.value(_share).gas(800000)()

IRs:
REF_20(address) -> extra[1]
TMP_26(bool) = LOW_LEVEL_CALL, dest:REF_20, function:call, arguments:[] value:_share gas:800000"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
extra[2].call.value(_share).gas(800000)()

IRs:
REF_24(address) -> extra[2]
TMP_29(bool) = LOW_LEVEL_CALL, dest:REF_24, function:call, arguments:[] value:_share gas:800000"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
extra[3].call.value(_share).gas(800000)()

IRs:
REF_28(address) -> extra[3]
TMP_32(bool) = LOW_LEVEL_CALL, dest:REF_28, function:call, arguments:[] value:_share gas:800000"];
}
