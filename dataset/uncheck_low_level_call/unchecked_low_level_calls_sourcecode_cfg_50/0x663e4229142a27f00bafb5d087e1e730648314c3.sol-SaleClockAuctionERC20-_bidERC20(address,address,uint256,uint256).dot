digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
auction = tokenIdToAuction[_tokenId]

IRs:
REF_365(ClockAuctionBase.Auction) -> tokenIdToAuction[_tokenId]
auction(ClockAuctionBase.Auction) := REF_365(ClockAuctionBase.Auction)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_isOnAuction(auction))

IRs:
TMP_1323(bool) = INTERNAL_CALL, ClockAuctionBase._isOnAuction(ClockAuctionBase.Auction)(auction)
TMP_1324(None) = SOLIDITY_CALL require(bool)(TMP_1323)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_erc20Address != address(0) && _erc20Address == tokenIdToErc20Address[_tokenId])

IRs:
TMP_1325 = CONVERT 0 to address
TMP_1326(bool) = _erc20Address != TMP_1325
REF_366(address) -> tokenIdToErc20Address[_tokenId]
TMP_1327(bool) = _erc20Address == REF_366
TMP_1328(bool) = TMP_1326 && TMP_1327
TMP_1329(None) = SOLIDITY_CALL require(bool)(TMP_1328)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
price = _currentPrice(auction)

IRs:
TMP_1330(uint256) = INTERNAL_CALL, ClockAuctionBase._currentPrice(ClockAuctionBase.Auction)(auction)
price(uint256) := TMP_1330(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_bidAmount >= price)

IRs:
TMP_1331(bool) = _bidAmount >= price
TMP_1332(None) = SOLIDITY_CALL require(bool)(TMP_1331)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
seller = auction.seller

IRs:
REF_367(address) -> auction.seller
seller(address) := REF_367(address)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_removeAuction(_tokenId)

IRs:
INTERNAL_CALL, ClockAuctionBase._removeAuction(uint256)(_tokenId)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
price > 0

IRs:
TMP_1334(bool) = price > 0
CONDITION TMP_1334"];
8->9[label="True"];
8->16[label="False"];
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
auctioneerCut = _computeCut(price)

IRs:
TMP_1335(uint256) = INTERNAL_CALL, ClockAuctionBase._computeCut(uint256)(price)
auctioneerCut(uint256) := TMP_1335(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
sellerProceeds = price - auctioneerCut

IRs:
TMP_1336(uint256) = price - auctioneerCut
sellerProceeds(uint256) := TMP_1336(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
require(bool)(ERC20(_erc20Address).transferFrom(_buyerAddress,seller,sellerProceeds))

IRs:
TMP_1337 = CONVERT _erc20Address to ERC20
TMP_1338(bool) = HIGH_LEVEL_CALL, dest:TMP_1337(ERC20), function:transferFrom, arguments:['_buyerAddress', 'seller', 'sellerProceeds']  
TMP_1339(None) = SOLIDITY_CALL require(bool)(TMP_1338)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
auctioneerCut > 0

IRs:
TMP_1340(bool) = auctioneerCut > 0
CONDITION TMP_1340"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
require(bool)(ERC20(_erc20Address).transferFrom(_buyerAddress,address(this),auctioneerCut))

IRs:
TMP_1341 = CONVERT _erc20Address to ERC20
TMP_1342 = CONVERT this to address
TMP_1343(bool) = HIGH_LEVEL_CALL, dest:TMP_1341(ERC20), function:transferFrom, arguments:['_buyerAddress', 'TMP_1342', 'auctioneerCut']  
TMP_1344(None) = SOLIDITY_CALL require(bool)(TMP_1343)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
balances[_erc20Address] += auctioneerCut

IRs:
REF_370(uint256) -> balances[_erc20Address]
REF_370(-> balances) = REF_370 + auctioneerCut"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
AuctionSuccessful(_tokenId,price,msg.sender)

IRs:
Emit AuctionSuccessful(_tokenId.price.msg.sender)"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
price

IRs:
RETURN price"];
}
