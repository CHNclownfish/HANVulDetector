digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
valuePaid = msg.value

IRs:
valuePaid(uint256) := msg.value(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
valuePaid < currentClaimPrice

IRs:
TMP_3(bool) = valuePaid < currentClaimPrice
CONDITION TMP_3"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
msg.sender.send(valuePaid)

IRs:
TMP_4 = SEND dest:msg.sender value:valuePaid"];
3->4;
4[label="Node Type: RETURN 4
"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
valuePaid > currentClaimPrice

IRs:
TMP_5(bool) = valuePaid > currentClaimPrice
CONDITION TMP_5"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
excessPaid = valuePaid - currentClaimPrice

IRs:
TMP_6(uint256) = valuePaid - currentClaimPrice
excessPaid(uint256) := TMP_6(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
msg.sender.send(excessPaid)

IRs:
TMP_7 = SEND dest:msg.sender value:excessPaid"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
valuePaid = valuePaid - excessPaid

IRs:
TMP_8(uint256) = valuePaid - excessPaid
valuePaid(uint256) := TMP_8(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
wizardCommission = (valuePaid * wizardCommissionFractionNum) / wizardCommissionFractionDen

IRs:
TMP_9(uint256) = valuePaid * wizardCommissionFractionNum
TMP_10(uint256) = TMP_9 / wizardCommissionFractionDen
wizardCommission(uint256) := TMP_10(uint256)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
compensation = valuePaid - wizardCommission

IRs:
TMP_11(uint256) = valuePaid - wizardCommission
compensation(uint256) := TMP_11(uint256)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
currentMonarch.etherAddress != wizardAddress

IRs:
REF_3(address) -> currentMonarch.etherAddress
TMP_12(bool) = REF_3 != wizardAddress
CONDITION TMP_12"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
currentMonarch.etherAddress.send(compensation)

IRs:
REF_4(address) -> currentMonarch.etherAddress
TMP_13 = SEND dest:REF_4 value:compensation"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
pastMonarchs.push(currentMonarch)

IRs:
REF_7 -> LENGTH pastMonarchs
TMP_15(uint256) := REF_7(uint256)
TMP_16(uint256) = TMP_15 + 1
REF_7 (->pastMonarchs) := TMP_16(uint256)
REF_8(KingOfTheEtherThrone.Monarch) -> pastMonarchs[TMP_15]
REF_8 (->pastMonarchs) := currentMonarch(KingOfTheEtherThrone.Monarch)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
currentMonarch = Monarch(msg.sender,name,valuePaid,block.timestamp)

IRs:
TMP_17 = new Monarch(msg.sender,name,valuePaid,block.timestamp)
currentMonarch(KingOfTheEtherThrone.Monarch) := TMP_17(KingOfTheEtherThrone.Monarch)"];
17->18;
18[label="Node Type: NEW VARIABLE 18

EXPRESSION:
rawNewClaimPrice = currentClaimPrice * claimPriceAdjustNum / claimPriceAdjustDen

IRs:
TMP_18(uint256) = currentClaimPrice * claimPriceAdjustNum
TMP_19(uint256) = TMP_18 / claimPriceAdjustDen
rawNewClaimPrice(uint256) := TMP_19(uint256)"];
18->19;
19[label="Node Type: IF 19

EXPRESSION:
rawNewClaimPrice < 10000000000000000

IRs:
TMP_20(bool) = rawNewClaimPrice < 10000000000000000
CONDITION TMP_20"];
19->20[label="True"];
19->21[label="False"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
currentClaimPrice = rawNewClaimPrice

IRs:
currentClaimPrice(uint256) := rawNewClaimPrice(uint256)"];
20->40;
21[label="Node Type: IF 21

EXPRESSION:
rawNewClaimPrice < 100000000000000000

IRs:
TMP_21(bool) = rawNewClaimPrice < 100000000000000000
CONDITION TMP_21"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
currentClaimPrice = 100000000000000 * (rawNewClaimPrice / 100000000000000)

IRs:
TMP_22(uint256) = rawNewClaimPrice / 100000000000000
TMP_23(uint256) = 100000000000000 * TMP_22
currentClaimPrice(uint256) := TMP_23(uint256)"];
22->39;
23[label="Node Type: IF 23

EXPRESSION:
rawNewClaimPrice < 1000000000000000000

IRs:
TMP_24(bool) = rawNewClaimPrice < 1000000000000000000
CONDITION TMP_24"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
currentClaimPrice = 1000000000000000 * (rawNewClaimPrice / 1000000000000000)

IRs:
TMP_25(uint256) = rawNewClaimPrice / 1000000000000000
TMP_26(uint256) = 1000000000000000 * TMP_25
currentClaimPrice(uint256) := TMP_26(uint256)"];
24->38;
25[label="Node Type: IF 25

EXPRESSION:
rawNewClaimPrice < 10000000000000000000

IRs:
TMP_27(bool) = rawNewClaimPrice < 10000000000000000000
CONDITION TMP_27"];
25->26[label="True"];
25->27[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
currentClaimPrice = 10000000000000000 * (rawNewClaimPrice / 10000000000000000)

IRs:
TMP_28(uint256) = rawNewClaimPrice / 10000000000000000
TMP_29(uint256) = 10000000000000000 * TMP_28
currentClaimPrice(uint256) := TMP_29(uint256)"];
26->37;
27[label="Node Type: IF 27

EXPRESSION:
rawNewClaimPrice < 100000000000000000000

IRs:
TMP_30(bool) = rawNewClaimPrice < 100000000000000000000
CONDITION TMP_30"];
27->28[label="True"];
27->29[label="False"];
28[label="Node Type: EXPRESSION 28

EXPRESSION:
currentClaimPrice = 100000000000000000 * (rawNewClaimPrice / 100000000000000000)

IRs:
TMP_31(uint256) = rawNewClaimPrice / 100000000000000000
TMP_32(uint256) = 100000000000000000 * TMP_31
currentClaimPrice(uint256) := TMP_32(uint256)"];
28->36;
29[label="Node Type: IF 29

EXPRESSION:
rawNewClaimPrice < 1000000000000000000000

IRs:
TMP_33(bool) = rawNewClaimPrice < 1000000000000000000000
CONDITION TMP_33"];
29->30[label="True"];
29->31[label="False"];
30[label="Node Type: EXPRESSION 30

EXPRESSION:
currentClaimPrice = 1000000000000000000 * (rawNewClaimPrice / 1000000000000000000)

IRs:
TMP_34(uint256) = rawNewClaimPrice / 1000000000000000000
TMP_35(uint256) = 1000000000000000000 * TMP_34
currentClaimPrice(uint256) := TMP_35(uint256)"];
30->35;
31[label="Node Type: IF 31

EXPRESSION:
rawNewClaimPrice < 10000000000000000000000

IRs:
TMP_36(bool) = rawNewClaimPrice < 10000000000000000000000
CONDITION TMP_36"];
31->32[label="True"];
31->33[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
currentClaimPrice = 10000000000000000000 * (rawNewClaimPrice / 10000000000000000000)

IRs:
TMP_37(uint256) = rawNewClaimPrice / 10000000000000000000
TMP_38(uint256) = 10000000000000000000 * TMP_37
currentClaimPrice(uint256) := TMP_38(uint256)"];
32->34;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
currentClaimPrice = rawNewClaimPrice

IRs:
currentClaimPrice(uint256) := rawNewClaimPrice(uint256)"];
33->34;
34[label="Node Type: END_IF 34
"];
34->35;
35[label="Node Type: END_IF 35
"];
35->36;
36[label="Node Type: END_IF 36
"];
36->37;
37[label="Node Type: END_IF 37
"];
37->38;
38[label="Node Type: END_IF 38
"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: END_IF 40
"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
ThroneClaimed(currentMonarch.etherAddress,currentMonarch.name,currentClaimPrice)

IRs:
REF_9(address) -> currentMonarch.etherAddress
REF_10(string) -> currentMonarch.name
Emit ThroneClaimed(REF_9.REF_10.currentClaimPrice)"];
}
