digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_tos.length > 0)

IRs:
REF_0 -> LENGTH _tos
TMP_0(bool) = REF_0 > 0
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
id = bytes4(keccak256()(transferFrom(address,address,uint256)))

IRs:
TMP_2(bytes32) = SOLIDITY_CALL keccak256()(transferFrom(address,address,uint256))
TMP_3 = CONVERT TMP_2 to bytes4
id(bytes4) := TMP_3(bytes4)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->9;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < _tos.length

IRs:
REF_1 -> LENGTH _tos
TMP_4(bool) = i < REF_1
CONDITION TMP_4"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
caddress.call(id,from,_tos[i],v)

IRs:
REF_3(address) -> _tos[i]
TMP_5(bool) = LOW_LEVEL_CALL, dest:caddress, function:call, arguments:['id', 'from', 'REF_3', 'v']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_6(uint256) := i(uint256)
i(uint256) = i + 1"];
8->6;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
}
