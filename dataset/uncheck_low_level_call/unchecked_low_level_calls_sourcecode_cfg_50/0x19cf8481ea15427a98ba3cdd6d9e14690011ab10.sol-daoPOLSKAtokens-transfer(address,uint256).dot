digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]

IRs:
REF_28(uint256) -> balances[msg.sender]
TMP_84(bool) = REF_28 >= _value
REF_29(uint256) -> balances[_to]
TMP_85(uint256) = REF_29 + _value
REF_30(uint256) -> balances[_to]
TMP_86(bool) = TMP_85 > REF_30
TMP_87(bool) = TMP_84 && TMP_86
CONDITION TMP_87"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_31(uint256) -> balances[msg.sender]
REF_31(-> balances) = REF_31 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] += _value

IRs:
REF_32(uint256) -> balances[_to]
REF_32(-> balances) = REF_32 + _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender._to._value)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
}
