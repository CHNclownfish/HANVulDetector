digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
subpotsCount = rounds[roundIndex].pot / blockReward

IRs:
REF_14(Lotto.Round) -> rounds[roundIndex]
REF_15(uint256) -> REF_14.pot
TMP_12(uint256) = REF_15 / blockReward
subpotsCount(uint256) := TMP_12(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
rounds[roundIndex].pot % blockReward > 0

IRs:
REF_16(Lotto.Round) -> rounds[roundIndex]
REF_17(uint256) -> REF_16.pot
TMP_13(uint256) = REF_17 % blockReward
TMP_14(bool) = TMP_13 > 0
CONDITION TMP_14"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
subpotsCount ++

IRs:
TMP_15(uint256) := subpotsCount(uint256)
subpotsCount(uint256) = subpotsCount + 1"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
subpotsCount

IRs:
RETURN subpotsCount"];
}
