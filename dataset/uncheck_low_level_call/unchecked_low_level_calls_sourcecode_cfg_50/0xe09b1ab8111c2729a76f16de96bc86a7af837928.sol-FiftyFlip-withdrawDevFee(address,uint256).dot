digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(devFeeSize >= withdrawAmount,You are trying to withdraw more amount than developer fee.)

IRs:
TMP_78(bool) = devFeeSize >= withdrawAmount
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,You are trying to withdraw more amount than developer fee.)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(withdrawAmount <= address(this).balance,Contract balance is lower than withdrawAmount)

IRs:
TMP_80 = CONVERT this to address
REF_32 -> BALANCE TMP_80
TMP_81(bool) = withdrawAmount <= REF_32
TMP_82(None) = SOLIDITY_CALL require(bool,string)(TMP_81,Contract balance is lower than withdrawAmount)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(devFeeSize <= address(this).balance,Not enough funds to withdraw.)

IRs:
TMP_83 = CONVERT this to address
REF_33 -> BALANCE TMP_83
TMP_84(bool) = devFeeSize <= REF_33
TMP_85(None) = SOLIDITY_CALL require(bool,string)(TMP_84,Not enough funds to withdraw.)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
sendFunds(withdrawAddress,withdrawAmount)

IRs:
TMP_86(bool) = INTERNAL_CALL, FiftyFlip.sendFunds(address,uint256)(withdrawAddress,withdrawAmount)
CONDITION TMP_86"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
devFeeSize -= withdrawAmount

IRs:
devFeeSize(uint256) = devFeeSize - withdrawAmount"];
5->6;
6[label="Node Type: END_IF 6
"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, FiftyFlip.onlyOwner()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
checkContractHealth()

IRs:
MODIFIER_CALL, FiftyFlip.checkContractHealth()()"];
8->1;
}
