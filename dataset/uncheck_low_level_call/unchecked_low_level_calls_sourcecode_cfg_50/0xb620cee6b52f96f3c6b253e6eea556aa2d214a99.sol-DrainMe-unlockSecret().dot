digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
hash = keccak256()(blockhash(uint256)(block.number - 1))

IRs:
TMP_14(uint256) = block.number - 1
TMP_15(uint256) = SOLIDITY_CALL blockhash(uint256)(TMP_14)
TMP_16(bytes32) = SOLIDITY_CALL keccak256()(TMP_15)
hash(bytes32) := TMP_16(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
secret = uint256(hash)

IRs:
TMP_17 = CONVERT hash to uint256
secret(uint256) := TMP_17(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
secret % 5 == 0

IRs:
TMP_18(uint256) = secret % 5
TMP_19(bool) = TMP_18 == 0
CONDITION TMP_19"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
winner = msg.sender

IRs:
winner(address) := msg.sender(address)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
}
