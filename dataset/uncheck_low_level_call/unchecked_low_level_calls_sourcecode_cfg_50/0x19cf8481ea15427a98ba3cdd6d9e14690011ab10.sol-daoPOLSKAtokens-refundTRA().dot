digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
funding

IRs:
CONDITION funding"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! refundstate

IRs:
TMP_145 = ! refundstate 
CONDITION TMP_145"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
DAOPLTokenValue = balances[msg.sender]

IRs:
REF_67(uint256) -> balances[msg.sender]
DAOPLTokenValue(uint256) := REF_67(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
ETHValue = balancesRAW[msg.sender]

IRs:
REF_68(uint256) -> balancesRAW[msg.sender]
ETHValue(uint256) := REF_68(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
ETHValue == 0

IRs:
TMP_146(bool) = ETHValue == 0
CONDITION TMP_146"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: THROW 10
"];
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
balancesRAW[msg.sender] = 0

IRs:
REF_69(uint256) -> balancesRAW[msg.sender]
REF_69 (->balancesRAW) := 0(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
totalSupply -= DAOPLTokenValue

IRs:
totalSupply(uint256) = totalSupply - DAOPLTokenValue"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
Refund(msg.sender,ETHValue)

IRs:
Emit Refund(msg.sender.ETHValue)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
msg.sender.transfer(ETHValue)

IRs:
Transfer dest:msg.sender value:ETHValue"];
}
