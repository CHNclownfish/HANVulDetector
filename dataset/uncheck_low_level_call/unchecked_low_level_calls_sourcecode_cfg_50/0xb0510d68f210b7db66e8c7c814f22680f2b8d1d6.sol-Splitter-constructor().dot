digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
newPuppet()

IRs:
TMP_0(address) = INTERNAL_CALL, Splitter.newPuppet()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
newPuppet()

IRs:
TMP_1(address) = INTERNAL_CALL, Splitter.newPuppet()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newPuppet()

IRs:
TMP_2(address) = INTERNAL_CALL, Splitter.newPuppet()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
newPuppet()

IRs:
TMP_3(address) = INTERNAL_CALL, Splitter.newPuppet()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
extra[0] = puppets[0]

IRs:
REF_0(address) -> extra[0]
REF_1(address) -> puppets[0]
REF_0 (->extra) := REF_1(address)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
extra[1] = puppets[1]

IRs:
REF_2(address) -> extra[1]
REF_3(address) -> puppets[1]
REF_2 (->extra) := REF_3(address)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
extra[2] = puppets[2]

IRs:
REF_4(address) -> extra[2]
REF_5(address) -> puppets[2]
REF_4 (->extra) := REF_5(address)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
extra[3] = puppets[3]

IRs:
REF_6(address) -> extra[3]
REF_7(address) -> puppets[3]
REF_6 (->extra) := REF_7(address)"];
}
