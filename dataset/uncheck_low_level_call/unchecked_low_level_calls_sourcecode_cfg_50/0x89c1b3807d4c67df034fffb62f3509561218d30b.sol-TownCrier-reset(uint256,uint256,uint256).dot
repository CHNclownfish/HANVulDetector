digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == requests[0].requester && unrespondedCnt == 0

IRs:
REF_4(TownCrier.Request) -> requests[0]
REF_5(address) -> REF_4.requester
TMP_6(bool) = msg.sender == REF_5
TMP_7(bool) = unrespondedCnt == 0
TMP_8(bool) = TMP_6 && TMP_7
CONDITION TMP_8"];
1->2[label="True"];
1->6[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
GAS_PRICE = price

IRs:
GAS_PRICE(uint256) := price(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
MIN_FEE = price * minGas

IRs:
TMP_9(uint256) = price * minGas
MIN_FEE(uint256) := TMP_9(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
CANCELLATION_FEE = price * cancellationGas

IRs:
TMP_10(uint256) = price * cancellationGas
CANCELLATION_FEE(uint256) := TMP_10(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Reset(GAS_PRICE,MIN_FEE,CANCELLATION_FEE)

IRs:
Emit Reset(GAS_PRICE.MIN_FEE.CANCELLATION_FEE)"];
5->6;
6[label="Node Type: END_IF 6
"];
}
