digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
i = 0

IRs:
i(uint32) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < number

IRs:
TMP_0(bool) = i < number
CONDITION TMP_0"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
fuck.call(bytes4(sha3()(giveBlockReward())))

IRs:
TMP_1(bytes32) = SOLIDITY_CALL sha3()(giveBlockReward())
TMP_2 = CONVERT TMP_1 to bytes4
TMP_3(bool) = LOW_LEVEL_CALL, dest:fuck, function:call, arguments:['TMP_2']  "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_4(uint32) := i(uint32)
i(uint32) = i + 1"];
7->5;
}
