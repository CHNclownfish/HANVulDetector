digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
externalCallFlag

IRs:
CONDITION externalCallFlag"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
killswitch

IRs:
CONDITION killswitch"];
4->5[label="True"];
4->11[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
externalCallFlag = true

IRs:
externalCallFlag(bool) := True(bool)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
! msg.sender.call.value(msg.value)()

IRs:
TMP_23(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:msg.value 
TMP_24 = ! TMP_23 
CONDITION TMP_24"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: THROW 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
externalCallFlag = false

IRs:
externalCallFlag(bool) := False(bool)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
newVersion

IRs:
RETURN newVersion"];
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
msg.value < MIN_FEE

IRs:
TMP_25(bool) = msg.value < MIN_FEE
CONDITION TMP_25"];
12->13[label="True"];
12->19[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
externalCallFlag = true

IRs:
externalCallFlag(bool) := True(bool)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
! msg.sender.call.value(msg.value)()

IRs:
TMP_27(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:msg.value 
TMP_28 = ! TMP_27 
CONDITION TMP_28"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: THROW 15
"];
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
externalCallFlag = false

IRs:
externalCallFlag(bool) := False(bool)"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
FAIL_FLAG

IRs:
RETURN FAIL_FLAG"];
19[label="Node Type: NEW VARIABLE 19

EXPRESSION:
requestId = requestCnt

IRs:
requestId(uint64) := requestCnt(uint64)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
requestCnt ++

IRs:
TMP_29(uint64) := requestCnt(uint64)
requestCnt(uint64) = requestCnt + 1"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
unrespondedCnt ++

IRs:
TMP_30(uint64) := unrespondedCnt(uint64)
unrespondedCnt(uint64) = unrespondedCnt + 1"];
21->22;
22[label="Node Type: NEW VARIABLE 22

EXPRESSION:
paramsHash = sha3()(requestType,requestData)

IRs:
TMP_31(bytes32) = SOLIDITY_CALL sha3()(requestType,requestData)
paramsHash(bytes32) := TMP_31(bytes32)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
requests[requestId].requester = msg.sender

IRs:
REF_21(TownCrier.Request) -> requests[requestId]
REF_22(address) -> REF_21.requester
REF_22 (->requests) := msg.sender(address)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
requests[requestId].fee = msg.value

IRs:
REF_23(TownCrier.Request) -> requests[requestId]
REF_24(uint256) -> REF_23.fee
REF_24 (->requests) := msg.value(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
requests[requestId].callbackAddr = callbackAddr

IRs:
REF_25(TownCrier.Request) -> requests[requestId]
REF_26(address) -> REF_25.callbackAddr
REF_26 (->requests) := callbackAddr(address)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
requests[requestId].callbackFID = callbackFID

IRs:
REF_27(TownCrier.Request) -> requests[requestId]
REF_28(bytes4) -> REF_27.callbackFID
REF_28 (->requests) := callbackFID(bytes4)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
requests[requestId].paramsHash = paramsHash

IRs:
REF_29(TownCrier.Request) -> requests[requestId]
REF_30(bytes32) -> REF_29.paramsHash
REF_30 (->requests) := paramsHash(bytes32)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
RequestInfo(requestId,requestType,msg.sender,msg.value,callbackAddr,paramsHash,timestamp,requestData)

IRs:
Emit RequestInfo(requestId.requestType.msg.sender.msg.value.callbackAddr.paramsHash.timestamp.requestData)"];
28->29;
29[label="Node Type: RETURN 29

EXPRESSION:
requestId

IRs:
RETURN requestId"];
}
