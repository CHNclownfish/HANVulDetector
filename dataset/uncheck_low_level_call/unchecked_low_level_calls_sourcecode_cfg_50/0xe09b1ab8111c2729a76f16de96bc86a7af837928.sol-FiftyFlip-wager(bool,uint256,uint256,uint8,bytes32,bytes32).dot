digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bet = bets[ticketID]

IRs:
REF_0(FiftyFlip.Bet) -> bets[ticketID]
bet(FiftyFlip.Bet) := REF_0(FiftyFlip.Bet)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
amount = msg.value

IRs:
amount(uint256) := msg.value(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
player = msg.sender

IRs:
player(address) := msg.sender(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(bet.player == address(0),Ticket is not new one!)

IRs:
REF_1(address) -> bet.player
TMP_2 = CONVERT 0 to address
TMP_3(bool) = REF_1 == TMP_2
TMP_4(None) = SOLIDITY_CALL require(bool,string)(TMP_3,Ticket is not new one!)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(amount >= MIN_BET,Your bet is lower than minimum bet amount)

IRs:
TMP_5(bool) = amount >= MIN_BET
TMP_6(None) = SOLIDITY_CALL require(bool,string)(TMP_5,Your bet is lower than minimum bet amount)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(amount <= MAX_BET,Your bet is higher than maximum bet amount)

IRs:
TMP_7(bool) = amount <= MAX_BET
TMP_8(None) = SOLIDITY_CALL require(bool,string)(TMP_7,Your bet is higher than maximum bet amount)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(getCollateralBalance() >= 2 * amount,If we accept this, this contract will be in danger!)

IRs:
TMP_9(uint256) = INTERNAL_CALL, FiftyFlip.getCollateralBalance()()
TMP_10(uint256) = 2 * amount
TMP_11(bool) = TMP_9 >= TMP_10
TMP_12(None) = SOLIDITY_CALL require(bool,string)(TMP_11,If we accept this, this contract will be in danger!)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool,string)(block.number <= ticketLastBlock,Ticket has expired.)

IRs:
TMP_13(bool) = block.number <= ticketLastBlock
TMP_14(None) = SOLIDITY_CALL require(bool,string)(TMP_13,Ticket has expired.)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
signatureHash = keccak256()(abi.encodePacked(Ethereum Signed Message:
37,uint40(ticketLastBlock),ticketID))

IRs:
TMP_15 = CONVERT ticketLastBlock to uint40
TMP_16(bytes) = SOLIDITY_CALL abi.encodePacked()(Ethereum Signed Message:
37,TMP_15,ticketID)
TMP_17(bytes32) = SOLIDITY_CALL keccak256()(TMP_16)
signatureHash(bytes32) := TMP_17(bytes32)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool,string)(secretSigner == ecrecover(bytes32,uint8,bytes32,bytes32)(signatureHash,v,r,s),web3 vrs signature is not valid.)

IRs:
TMP_18(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(signatureHash,v,r,s)
TMP_19(bool) = secretSigner == TMP_18
TMP_20(None) = SOLIDITY_CALL require(bool,string)(TMP_19,web3 vrs signature is not valid.)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
jackpotSize += amount * JACKPOT_FEE / 1000

IRs:
TMP_21(uint256) = amount * JACKPOT_FEE
TMP_22(uint256) = TMP_21 / 1000
jackpotSize(uint256) = jackpotSize + TMP_22"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
devFeeSize += amount * DEV_FEE / 1000

IRs:
TMP_23(uint256) = amount * DEV_FEE
TMP_24(uint256) = TMP_23 / 1000
devFeeSize(uint256) = devFeeSize + TMP_24"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
lockedInBets += amount * WIN_X / 1000

IRs:
TMP_25(uint256) = amount * WIN_X
TMP_26(uint256) = TMP_25 / 1000
lockedInBets(uint256) = lockedInBets + TMP_26"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
donate_amount = amount * DONATING_X / 1000

IRs:
TMP_27(uint256) = amount * DONATING_X
TMP_28(uint256) = TMP_27 / 1000
donate_amount(uint256) := TMP_28(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
whale.call.value(donate_amount)(bytes4(keccak256()(donate())))

IRs:
TMP_30(bytes32) = SOLIDITY_CALL keccak256()(donate())
TMP_31 = CONVERT TMP_30 to bytes4
TMP_32(bool) = LOW_LEVEL_CALL, dest:whale, function:call, arguments:['TMP_31'] value:donate_amount "];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
totalAmountToWhale += donate_amount

IRs:
totalAmountToWhale(uint256) = totalAmountToWhale + donate_amount"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
bet.amount = amount

IRs:
REF_5(uint256) -> bet.amount
REF_5 (->bet) := amount(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
bet.blockNumber = block.number

IRs:
REF_6(uint256) -> bet.blockNumber
REF_6 (->bet) := block.number(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
bet.betMask = bMask

IRs:
REF_7(bool) -> bet.betMask
REF_7 (->bet) := bMask(bool)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
bet.player = player

IRs:
REF_8(address) -> bet.player
REF_8 (->bet) := player(address)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
Wager(ticketID,bet.amount,bet.blockNumber,bet.betMask,bet.player)

IRs:
REF_9(uint256) -> bet.amount
REF_10(uint256) -> bet.blockNumber
REF_11(bool) -> bet.betMask
REF_12(address) -> bet.player
Emit Wager(ticketID.REF_9.REF_10.REF_11.REF_12)"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
checkContractHealth()

IRs:
MODIFIER_CALL, FiftyFlip.checkContractHealth()()"];
22->1;
}
