digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_matronId == uint256(uint32(_matronId)))

IRs:
TMP_1538 = CONVERT _matronId to uint32
TMP_1539 = CONVERT TMP_1538 to uint256
TMP_1540(bool) = _matronId == TMP_1539
TMP_1541(None) = SOLIDITY_CALL require(bool)(TMP_1540)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_sireId == uint256(uint32(_sireId)))

IRs:
TMP_1542 = CONVERT _sireId to uint32
TMP_1543 = CONVERT TMP_1542 to uint256
TMP_1544(bool) = _sireId == TMP_1543
TMP_1545(None) = SOLIDITY_CALL require(bool)(TMP_1544)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_generation == uint256(uint16(_generation)))

IRs:
TMP_1546 = CONVERT _generation to uint16
TMP_1547 = CONVERT TMP_1546 to uint256
TMP_1548(bool) = _generation == TMP_1547
TMP_1549(None) = SOLIDITY_CALL require(bool)(TMP_1548)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
cooldownIndex = 0

IRs:
cooldownIndex(uint16) := 0(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pandas.length > 0

IRs:
REF_466 -> LENGTH pandas
TMP_1550(bool) = REF_466 > 0
CONDITION TMP_1550"];
5->6[label="True"];
5->34[label="False"];
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
pureDegree = uint16(geneScience.getPureFromGene(_genes))

IRs:
TMP_1551(uint256) = HIGH_LEVEL_CALL, dest:geneScience(GeneScienceInterface), function:getPureFromGene, arguments:['_genes']  
TMP_1552 = CONVERT TMP_1551 to uint16
pureDegree(uint16) := TMP_1552(uint16)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
pureDegree == 0

IRs:
TMP_1553(bool) = pureDegree == 0
CONDITION TMP_1553"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
pureDegree = 1

IRs:
pureDegree(uint16) := 1(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
cooldownIndex = 1000 / pureDegree

IRs:
TMP_1554(uint256) = 1000 / pureDegree
cooldownIndex(uint16) := TMP_1554(uint256)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
cooldownIndex % 10 < 5

IRs:
TMP_1555(uint16) = cooldownIndex % 10
TMP_1556(bool) = TMP_1555 < 5
CONDITION TMP_1556"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
cooldownIndex = cooldownIndex / 10

IRs:
TMP_1557(uint16) = cooldownIndex / 10
cooldownIndex(uint16) := TMP_1557(uint16)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
cooldownIndex = cooldownIndex / 10 + 1

IRs:
TMP_1558(uint16) = cooldownIndex / 10
TMP_1559(uint16) = TMP_1558 + 1
cooldownIndex(uint16) := TMP_1559(uint16)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
cooldownIndex = cooldownIndex - 1

IRs:
TMP_1560(uint16) = cooldownIndex - 1
cooldownIndex(uint16) := TMP_1560(uint16)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
cooldownIndex > 8

IRs:
TMP_1561(bool) = cooldownIndex > 8
CONDITION TMP_1561"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
cooldownIndex = 8

IRs:
cooldownIndex(uint16) := 8(uint256)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: NEW VARIABLE 19

EXPRESSION:
_tp = geneScience.getWizzType(_genes)

IRs:
TMP_1562(uint256) = HIGH_LEVEL_CALL, dest:geneScience(GeneScienceInterface), function:getWizzType, arguments:['_genes']  
_tp(uint256) := TMP_1562(uint256)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_tp > 0 && wizzPandaQuota[_tp] <= wizzPandaCount[_tp]

IRs:
TMP_1563(bool) = _tp > 0
REF_469(uint256) -> wizzPandaQuota[_tp]
REF_470(uint256) -> wizzPandaCount[_tp]
TMP_1564(bool) = REF_469 <= REF_470
TMP_1565(bool) = TMP_1563 && TMP_1564
CONDITION TMP_1565"];
20->21[label="True"];
20->23[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_genes = geneScience.clearWizzType(_genes)

IRs:
TMP_1566(uint256[2]) = HIGH_LEVEL_CALL, dest:geneScience(GeneScienceInterface), function:clearWizzType, arguments:['_genes']  
_genes(uint256[2]) := TMP_1566(uint256[2])"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_tp = 0

IRs:
_tp(uint256) := 0(uint256)"];
22->23;
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
_tp == 1

IRs:
TMP_1567(bool) = _tp == 1
CONDITION TMP_1567"];
24->25[label="True"];
24->26[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
cooldownIndex = 5

IRs:
cooldownIndex(uint16) := 5(uint256)"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: IF 27

EXPRESSION:
_tp > 0

IRs:
TMP_1568(bool) = _tp > 0
CONDITION TMP_1568"];
27->28[label="True"];
27->29[label="False"];
28[label="Node Type: EXPRESSION 28

EXPRESSION:
wizzPandaCount[_tp] = wizzPandaCount[_tp] + 1

IRs:
REF_472(uint256) -> wizzPandaCount[_tp]
REF_473(uint256) -> wizzPandaCount[_tp]
TMP_1569(uint256) = REF_473 + 1
REF_472 (->wizzPandaCount) := TMP_1569(uint256)"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: IF 30

EXPRESSION:
_generation <= 1 && _tp != 1

IRs:
TMP_1570(bool) = _generation <= 1
TMP_1571(bool) = _tp != 1
TMP_1572(bool) = TMP_1570 && TMP_1571
CONDITION TMP_1572"];
30->31[label="True"];
30->33[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
require(bool)(gen0CreatedCount < GEN0_TOTAL_COUNT)

IRs:
TMP_1573(bool) = gen0CreatedCount < GEN0_TOTAL_COUNT
TMP_1574(None) = SOLIDITY_CALL require(bool)(TMP_1573)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
gen0CreatedCount ++

IRs:
TMP_1575(uint256) := gen0CreatedCount(uint256)
gen0CreatedCount(uint256) = gen0CreatedCount + 1"];
32->33;
33[label="Node Type: END_IF 33
"];
33->34;
34[label="Node Type: END_IF 34
"];
34->35;
35[label="Node Type: NEW VARIABLE 35

EXPRESSION:
_panda = Panda(_genes,uint64(now),0,uint32(_matronId),uint32(_sireId),0,cooldownIndex,uint16(_generation))

IRs:
TMP_1576 = CONVERT now to uint64
TMP_1577 = CONVERT _matronId to uint32
TMP_1578 = CONVERT _sireId to uint32
TMP_1579 = CONVERT _generation to uint16
TMP_1580 = new Panda(_genes,TMP_1576,0,TMP_1577,TMP_1578,0,cooldownIndex,TMP_1579)
_panda(PandaBase.Panda) := TMP_1580(PandaBase.Panda)"];
35->36;
36[label="Node Type: NEW VARIABLE 36

EXPRESSION:
newKittenId = pandas.push(_panda) - 1

IRs:
REF_475 -> LENGTH pandas
TMP_1583(uint256) := REF_475(uint256)
TMP_1584(uint256) = TMP_1583 + 1
REF_475 (->pandas) := TMP_1584(uint256)
REF_476(PandaBase.Panda) -> pandas[TMP_1583]
REF_476 (->pandas) := _panda(PandaBase.Panda)
TMP_1582(None) = TMP_1581 - 1
newKittenId(uint256) := TMP_1582(None)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
require(bool)(newKittenId == uint256(uint32(newKittenId)))

IRs:
TMP_1585 = CONVERT newKittenId to uint32
TMP_1586 = CONVERT TMP_1585 to uint256
TMP_1587(bool) = newKittenId == TMP_1586
TMP_1588(None) = SOLIDITY_CALL require(bool)(TMP_1587)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
Birth(_owner,newKittenId,uint256(_panda.matronId),uint256(_panda.sireId),_panda.genes)

IRs:
REF_477(uint32) -> _panda.matronId
TMP_1589 = CONVERT REF_477 to uint256
REF_478(uint32) -> _panda.sireId
TMP_1590 = CONVERT REF_478 to uint256
REF_479(uint256[2]) -> _panda.genes
Emit Birth(_owner.newKittenId.TMP_1589.TMP_1590.REF_479)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
_transfer(0,_owner,newKittenId)

IRs:
INTERNAL_CALL, PandaBase._transfer(address,address,uint256)(0,_owner,newKittenId)"];
39->40;
40[label="Node Type: RETURN 40

EXPRESSION:
newKittenId

IRs:
RETURN newKittenId"];
}
