digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
avePrice = saleAuction.averageGen0SalePrice()

IRs:
TMP_2146(uint256) = HIGH_LEVEL_CALL, dest:saleAuction(SaleClockAuction), function:averageGen0SalePrice, arguments:[]  
avePrice(uint256) := TMP_2146(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(avePrice == uint256(uint128(avePrice)))

IRs:
TMP_2147 = CONVERT avePrice to uint128
TMP_2148 = CONVERT TMP_2147 to uint256
TMP_2149(bool) = avePrice == TMP_2148
TMP_2150(None) = SOLIDITY_CALL require(bool)(TMP_2149)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
nextPrice = avePrice + (avePrice / 2)

IRs:
TMP_2151(uint256) = avePrice / 2
TMP_2152(uint256) = avePrice + TMP_2151
nextPrice(uint256) := TMP_2152(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
nextPrice < GEN0_STARTING_PRICE

IRs:
TMP_2153(bool) = nextPrice < GEN0_STARTING_PRICE
CONDITION TMP_2153"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
nextPrice = GEN0_STARTING_PRICE

IRs:
nextPrice(uint256) := GEN0_STARTING_PRICE(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
nextPrice

IRs:
RETURN nextPrice"];
}
