digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bet = bets[ticketID]

IRs:
REF_54(FiftyFlip.Bet) -> bets[ticketID]
bet(FiftyFlip.Bet) := REF_54(FiftyFlip.Bet)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
bet.amount != 0 || block.number <= bet.blockNumber + BET_EXPIRATION_BLOCKS

IRs:
REF_55(uint256) -> bet.amount
TMP_126(bool) = REF_55 != 0
REF_56(uint256) -> bet.blockNumber
TMP_127(uint256) = REF_56 + BET_EXPIRATION_BLOCKS
TMP_128(bool) = block.number <= TMP_127
TMP_129(bool) = TMP_126 || TMP_128
CONDITION TMP_129"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
bet.blockNumber = 0

IRs:
REF_57(uint256) -> bet.blockNumber
REF_57 (->bet) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
bet.betMask = false

IRs:
REF_58(bool) -> bet.betMask
REF_58 (->bet) := False(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
bet.player = address(0)

IRs:
REF_59(address) -> bet.player
TMP_130 = CONVERT 0 to address
REF_59 (->bet) := TMP_130(address)"];
}
