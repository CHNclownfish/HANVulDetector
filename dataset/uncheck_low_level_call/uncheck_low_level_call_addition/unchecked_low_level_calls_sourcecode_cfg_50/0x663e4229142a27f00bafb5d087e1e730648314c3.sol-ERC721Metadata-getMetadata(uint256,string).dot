digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_tokenId == 1

IRs:
TMP_147(bool) = _tokenId == 1
CONDITION TMP_147"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
buffer[0] = Hello World! :D

IRs:
REF_27(bytes32) -> buffer[0]
REF_27 (->buffer) := Hello World! :D(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
count = 15

IRs:
count(uint256) := 15(uint256)"];
3->16;
4[label="Node Type: IF 4

EXPRESSION:
_tokenId == 2

IRs:
TMP_148(bool) = _tokenId == 2
CONDITION TMP_148"];
4->5[label="True"];
4->8[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
buffer[0] = I would definitely choose a medi

IRs:
REF_28(bytes32) -> buffer[0]
REF_28 (->buffer) := I would definitely choose a medi(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
buffer[1] = um length string.

IRs:
REF_29(bytes32) -> buffer[1]
REF_29 (->buffer) := um length string.(string)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
count = 49

IRs:
count(uint256) := 49(uint256)"];
7->15;
8[label="Node Type: IF 8

EXPRESSION:
_tokenId == 3

IRs:
TMP_149(bool) = _tokenId == 3
CONDITION TMP_149"];
8->9[label="True"];
8->14[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
buffer[0] = Lorem ipsum dolor sit amet, mi e

IRs:
REF_30(bytes32) -> buffer[0]
REF_30 (->buffer) := Lorem ipsum dolor sit amet, mi e(string)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buffer[1] = st accumsan dapibus augue lorem,

IRs:
REF_31(bytes32) -> buffer[1]
REF_31 (->buffer) := st accumsan dapibus augue lorem,(string)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
buffer[2] =  tristique vestibulum id, libero

IRs:
REF_32(bytes32) -> buffer[2]
REF_32 (->buffer) :=  tristique vestibulum id, libero(string)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buffer[3] =  suscipit varius sapien aliquam.

IRs:
REF_33(bytes32) -> buffer[3]
REF_33 (->buffer) :=  suscipit varius sapien aliquam.(string)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
count = 128

IRs:
count(uint256) := 128(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
}
