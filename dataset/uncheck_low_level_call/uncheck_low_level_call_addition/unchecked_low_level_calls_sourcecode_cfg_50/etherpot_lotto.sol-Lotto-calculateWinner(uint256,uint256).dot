digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
decisionBlockNumber = getDecisionBlockNumber(roundIndex,subpotIndex)

IRs:
TMP_1(uint256) = INTERNAL_CALL, Lotto.getDecisionBlockNumber(uint256,uint256)(roundIndex,subpotIndex)
decisionBlockNumber(uint256) := TMP_1(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
decisionBlockNumber > block.number

IRs:
TMP_2(bool) = decisionBlockNumber > block.number
CONDITION TMP_2"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
decisionBlockHash = getHashOfBlock(decisionBlockNumber)

IRs:
TMP_3(uint256) = INTERNAL_CALL, Lotto.getHashOfBlock(uint256)(decisionBlockNumber)
decisionBlockHash(uint256) := TMP_3(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
winningTicketIndex = decisionBlockHash % rounds[roundIndex].ticketsCount

IRs:
REF_3(Lotto.Round) -> rounds[roundIndex]
REF_4(uint256) -> REF_3.ticketsCount
TMP_4(uint256) = decisionBlockHash % REF_4
winningTicketIndex(uint256) := TMP_4(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
ticketIndex = uint256(0)

IRs:
TMP_5 = CONVERT 0 to uint256
ticketIndex(uint256) := TMP_5(uint256)"];
7->10;
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
buyerIndex = 0

IRs:
buyerIndex(uint8) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
buyerIndex < rounds[roundIndex].buyers.length

IRs:
REF_5(Lotto.Round) -> rounds[roundIndex]
REF_6(address[]) -> REF_5.buyers
REF_7 -> LENGTH REF_6
TMP_6(bool) = buyerIndex < REF_7
CONDITION TMP_6"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
buyer = rounds[roundIndex].buyers[buyerIndex]

IRs:
REF_8(Lotto.Round) -> rounds[roundIndex]
REF_9(address[]) -> REF_8.buyers
REF_10(address) -> REF_9[buyerIndex]
buyer(address) := REF_10(address)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
ticketIndex += rounds[roundIndex].ticketsCountByBuyer[buyer]

IRs:
REF_11(Lotto.Round) -> rounds[roundIndex]
REF_12(mapping(address => uint256)) -> REF_11.ticketsCountByBuyer
REF_13(uint256) -> REF_12[buyer]
ticketIndex(uint256) = ticketIndex + REF_13"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
ticketIndex > winningTicketIndex

IRs:
TMP_7(bool) = ticketIndex > winningTicketIndex
CONDITION TMP_7"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: RETURN 15

EXPRESSION:
buyer

IRs:
RETURN buyer"];
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
buyerIndex ++

IRs:
TMP_8(uint8) := buyerIndex(uint8)
buyerIndex(uint8) = buyerIndex + 1"];
17->11;
}
