digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bet = bets[ticketID]

IRs:
REF_45(FiftyFlip.Bet) -> bets[ticketID]
bet(FiftyFlip.Bet) := REF_45(FiftyFlip.Bet)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
requester = bet.player

IRs:
REF_46(address) -> bet.player
requester(address) := REF_46(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
ethToTransfer = bet.amount

IRs:
REF_47(uint256) -> bet.amount
ethToTransfer(uint256) := REF_47(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
requester.transfer(ethToTransfer)

IRs:
Transfer dest:requester value:ethToTransfer"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
tossWinAmount = bet.amount * WIN_X / 1000

IRs:
REF_49(uint256) -> bet.amount
TMP_116(uint256) = REF_49 * WIN_X
TMP_117(uint256) = TMP_116 / 1000
tossWinAmount(uint256) := TMP_117(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
lockedInBets -= tossWinAmount

IRs:
lockedInBets(uint256) = lockedInBets - tossWinAmount"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
bet.amount = 0

IRs:
REF_50(uint256) -> bet.amount
REF_50 (->bet) := 0(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Refund(ticketID,ethToTransfer,requester)

IRs:
Emit Refund(ticketID.ethToTransfer.requester)"];
}
