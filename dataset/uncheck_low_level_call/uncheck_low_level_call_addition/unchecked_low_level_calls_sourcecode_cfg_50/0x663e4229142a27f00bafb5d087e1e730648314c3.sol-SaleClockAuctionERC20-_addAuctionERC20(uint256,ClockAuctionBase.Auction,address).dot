digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_auction.duration >= 60)

IRs:
REF_350(uint64) -> _auction.duration
TMP_1299(bool) = REF_350 >= 60
TMP_1300(None) = SOLIDITY_CALL require(bool)(TMP_1299)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokenIdToAuction[_tokenId] = _auction

IRs:
REF_351(ClockAuctionBase.Auction) -> tokenIdToAuction[_tokenId]
REF_351 (->tokenIdToAuction) := _auction(ClockAuctionBase.Auction)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
AuctionERC20Created(uint256(_tokenId),uint256(_auction.startingPrice),uint256(_auction.endingPrice),uint256(_auction.duration),_erc20address)

IRs:
TMP_1301 = CONVERT _tokenId to uint256
REF_352(uint128) -> _auction.startingPrice
TMP_1302 = CONVERT REF_352 to uint256
REF_353(uint128) -> _auction.endingPrice
TMP_1303 = CONVERT REF_353 to uint256
REF_354(uint64) -> _auction.duration
TMP_1304 = CONVERT REF_354 to uint256
Emit AuctionERC20Created(TMP_1301.TMP_1302.TMP_1303.TMP_1304._erc20address)"];
}
