digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->21;
1[label="Node Type: IF 1

EXPRESSION:
transfers.length == 0

IRs:
REF_15 -> LENGTH transfers
TMP_21(bool) = REF_15 == 0
CONDITION TMP_21"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
mNext = next

IRs:
mNext(uint256) := next(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
next = transfers.length

IRs:
REF_16 -> LENGTH transfers
next(uint256) := REF_16(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
(mNext == 0) && (token.balanceOf(this) != totalToDistribute)

IRs:
TMP_22(bool) = mNext == 0
TMP_23(uint256) = HIGH_LEVEL_CALL, dest:token(Token), function:balanceOf, arguments:['this']  
TMP_24(bool) = TMP_23 != totalToDistribute
TMP_25(bool) = TMP_22 && TMP_24
CONDITION TMP_25"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: THROW 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: BEGIN_LOOP 9
"];
9->10;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
(mNext < transfers.length) && (gas() > 150000)

IRs:
REF_18 -> LENGTH transfers
TMP_26(bool) = mNext < REF_18
TMP_27(uint256) = INTERNAL_CALL, TokenSender.gas()()
TMP_28(bool) = TMP_27 > 150000
TMP_29(bool) = TMP_26 && TMP_28
CONDITION TMP_29"];
10->11[label="True"];
10->19[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
amount = transfers[mNext].amount

IRs:
REF_19(TokenSender.Transfer) -> transfers[mNext]
REF_20(uint256) -> REF_19.amount
amount(uint256) := REF_20(uint256)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
addr = transfers[mNext].addr

IRs:
REF_21(TokenSender.Transfer) -> transfers[mNext]
REF_22(address) -> REF_21.addr
addr(address) := REF_22(address)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
amount > 0

IRs:
TMP_30(bool) = amount > 0
CONDITION TMP_30"];
13->14[label="True"];
13->17[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
! token.transfer(addr,transfers[mNext].amount)

IRs:
REF_24(TokenSender.Transfer) -> transfers[mNext]
REF_25(uint256) -> REF_24.amount
TMP_31(bool) = HIGH_LEVEL_CALL, dest:token(Token), function:transfer, arguments:['addr', 'REF_25']  
TMP_32 = ! TMP_31 
CONDITION TMP_32"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: THROW 15
"];
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
mNext ++

IRs:
TMP_33(uint256) := mNext(uint256)
mNext(uint256) = mNext + 1"];
18->10;
19[label="Node Type: END_LOOP 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
next = mNext

IRs:
next(uint256) := mNext(uint256)"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
21->1;
}
