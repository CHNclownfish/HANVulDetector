digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seller = tokenIdToAuction[_tokenId].seller

IRs:
REF_355(ClockAuctionBase.Auction) -> tokenIdToAuction[_tokenId]
REF_356(address) -> REF_355.seller
seller(address) := REF_356(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_erc20address = tokenIdToErc20Address[_tokenId]

IRs:
REF_357(address) -> tokenIdToErc20Address[_tokenId]
_erc20address(address) := REF_357(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_erc20address != address(0))

IRs:
TMP_1306 = CONVERT 0 to address
TMP_1307(bool) = _erc20address != TMP_1306
TMP_1308(None) = SOLIDITY_CALL require(bool)(TMP_1307)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
price = _bidERC20(_erc20address,msg.sender,_tokenId,_amount)

IRs:
TMP_1309(uint256) = INTERNAL_CALL, SaleClockAuctionERC20._bidERC20(address,address,uint256,uint256)(_erc20address,msg.sender,_tokenId,_amount)
price(uint256) := TMP_1309(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_transfer(msg.sender,_tokenId)

IRs:
INTERNAL_CALL, ClockAuctionBase._transfer(address,uint256)(msg.sender,_tokenId)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
delete tokenIdToErc20Address[_tokenId]

IRs:
REF_358(address) -> tokenIdToErc20Address[_tokenId]
tokenIdToErc20Address = delete REF_358 "];
}
