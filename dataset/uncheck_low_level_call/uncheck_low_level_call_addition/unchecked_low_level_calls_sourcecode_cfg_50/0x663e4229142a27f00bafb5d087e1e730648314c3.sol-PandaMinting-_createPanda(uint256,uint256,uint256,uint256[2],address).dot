digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_matronId == uint256(uint32(_matronId)))

IRs:
TMP_1977 = CONVERT _matronId to uint32
TMP_1978 = CONVERT TMP_1977 to uint256
TMP_1979(bool) = _matronId == TMP_1978
TMP_1980(None) = SOLIDITY_CALL require(bool)(TMP_1979)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_sireId == uint256(uint32(_sireId)))

IRs:
TMP_1981 = CONVERT _sireId to uint32
TMP_1982 = CONVERT TMP_1981 to uint256
TMP_1983(bool) = _sireId == TMP_1982
TMP_1984(None) = SOLIDITY_CALL require(bool)(TMP_1983)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_generation == uint256(uint16(_generation)))

IRs:
TMP_1985 = CONVERT _generation to uint16
TMP_1986 = CONVERT TMP_1985 to uint256
TMP_1987(bool) = _generation == TMP_1986
TMP_1988(None) = SOLIDITY_CALL require(bool)(TMP_1987)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
cooldownIndex = 0

IRs:
cooldownIndex(uint16) := 0(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pandas.length > 0

IRs:
REF_602 -> LENGTH pandas
TMP_1989(bool) = REF_602 > 0
CONDITION TMP_1989"];
5->6[label="True"];
5->34[label="False"];
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
pureDegree = uint16(geneScience.getPureFromGene(_genes))

IRs:
TMP_1990(uint256) = HIGH_LEVEL_CALL, dest:geneScience(GeneScienceInterface), function:getPureFromGene, arguments:['_genes']  
TMP_1991 = CONVERT TMP_1990 to uint16
pureDegree(uint16) := TMP_1991(uint16)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
pureDegree == 0

IRs:
TMP_1992(bool) = pureDegree == 0
CONDITION TMP_1992"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
pureDegree = 1

IRs:
pureDegree(uint16) := 1(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
cooldownIndex = 1000 / pureDegree

IRs:
TMP_1993(uint256) = 1000 / pureDegree
cooldownIndex(uint16) := TMP_1993(uint256)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
cooldownIndex % 10 < 5

IRs:
TMP_1994(uint16) = cooldownIndex % 10
TMP_1995(bool) = TMP_1994 < 5
CONDITION TMP_1995"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
cooldownIndex = cooldownIndex / 10

IRs:
TMP_1996(uint16) = cooldownIndex / 10
cooldownIndex(uint16) := TMP_1996(uint16)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
cooldownIndex = cooldownIndex / 10 + 1

IRs:
TMP_1997(uint16) = cooldownIndex / 10
TMP_1998(uint16) = TMP_1997 + 1
cooldownIndex(uint16) := TMP_1998(uint16)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
cooldownIndex = cooldownIndex - 1

IRs:
TMP_1999(uint16) = cooldownIndex - 1
cooldownIndex(uint16) := TMP_1999(uint16)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
cooldownIndex > 8

IRs:
TMP_2000(bool) = cooldownIndex > 8
CONDITION TMP_2000"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
cooldownIndex = 8

IRs:
cooldownIndex(uint16) := 8(uint256)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: NEW VARIABLE 19

EXPRESSION:
_tp = geneScience.getWizzType(_genes)

IRs:
TMP_2001(uint256) = HIGH_LEVEL_CALL, dest:geneScience(GeneScienceInterface), function:getWizzType, arguments:['_genes']  
_tp(uint256) := TMP_2001(uint256)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_tp > 0 && wizzPandaQuota[_tp] <= wizzPandaCount[_tp]

IRs:
TMP_2002(bool) = _tp > 0
REF_605(uint256) -> wizzPandaQuota[_tp]
REF_606(uint256) -> wizzPandaCount[_tp]
TMP_2003(bool) = REF_605 <= REF_606
TMP_2004(bool) = TMP_2002 && TMP_2003
CONDITION TMP_2004"];
20->21[label="True"];
20->23[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_genes = geneScience.clearWizzType(_genes)

IRs:
TMP_2005(uint256[2]) = HIGH_LEVEL_CALL, dest:geneScience(GeneScienceInterface), function:clearWizzType, arguments:['_genes']  
_genes(uint256[2]) := TMP_2005(uint256[2])"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_tp = 0

IRs:
_tp(uint256) := 0(uint256)"];
22->23;
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
_tp == 1

IRs:
TMP_2006(bool) = _tp == 1
CONDITION TMP_2006"];
24->25[label="True"];
24->26[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
cooldownIndex = 5

IRs:
cooldownIndex(uint16) := 5(uint256)"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: IF 27

EXPRESSION:
_tp > 0

IRs:
TMP_2007(bool) = _tp > 0
CONDITION TMP_2007"];
27->28[label="True"];
27->29[label="False"];
28[label="Node Type: EXPRESSION 28

EXPRESSION:
wizzPandaCount[_tp] = wizzPandaCount[_tp] + 1

IRs:
REF_608(uint256) -> wizzPandaCount[_tp]
REF_609(uint256) -> wizzPandaCount[_tp]
TMP_2008(uint256) = REF_609 + 1
REF_608 (->wizzPandaCount) := TMP_2008(uint256)"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: IF 30

EXPRESSION:
_generation <= 1 && _tp != 1

IRs:
TMP_2009(bool) = _generation <= 1
TMP_2010(bool) = _tp != 1
TMP_2011(bool) = TMP_2009 && TMP_2010
CONDITION TMP_2011"];
30->31[label="True"];
30->33[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
require(bool)(gen0CreatedCount < GEN0_TOTAL_COUNT)

IRs:
TMP_2012(bool) = gen0CreatedCount < GEN0_TOTAL_COUNT
TMP_2013(None) = SOLIDITY_CALL require(bool)(TMP_2012)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
gen0CreatedCount ++

IRs:
TMP_2014(uint256) := gen0CreatedCount(uint256)
gen0CreatedCount(uint256) = gen0CreatedCount + 1"];
32->33;
33[label="Node Type: END_IF 33
"];
33->34;
34[label="Node Type: END_IF 34
"];
34->35;
35[label="Node Type: NEW VARIABLE 35

EXPRESSION:
_panda = Panda(_genes,uint64(now),0,uint32(_matronId),uint32(_sireId),0,cooldownIndex,uint16(_generation))

IRs:
TMP_2015 = CONVERT now to uint64
TMP_2016 = CONVERT _matronId to uint32
TMP_2017 = CONVERT _sireId to uint32
TMP_2018 = CONVERT _generation to uint16
TMP_2019 = new Panda(_genes,TMP_2015,0,TMP_2016,TMP_2017,0,cooldownIndex,TMP_2018)
_panda(PandaBase.Panda) := TMP_2019(PandaBase.Panda)"];
35->36;
36[label="Node Type: NEW VARIABLE 36

EXPRESSION:
newKittenId = pandas.push(_panda) - 1

IRs:
REF_611 -> LENGTH pandas
TMP_2022(uint256) := REF_611(uint256)
TMP_2023(uint256) = TMP_2022 + 1
REF_611 (->pandas) := TMP_2023(uint256)
REF_612(PandaBase.Panda) -> pandas[TMP_2022]
REF_612 (->pandas) := _panda(PandaBase.Panda)
TMP_2021(None) = TMP_2020 - 1
newKittenId(uint256) := TMP_2021(None)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
require(bool)(newKittenId == uint256(uint32(newKittenId)))

IRs:
TMP_2024 = CONVERT newKittenId to uint32
TMP_2025 = CONVERT TMP_2024 to uint256
TMP_2026(bool) = newKittenId == TMP_2025
TMP_2027(None) = SOLIDITY_CALL require(bool)(TMP_2026)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
Birth(_owner,newKittenId,uint256(_panda.matronId),uint256(_panda.sireId),_panda.genes)

IRs:
REF_613(uint32) -> _panda.matronId
TMP_2028 = CONVERT REF_613 to uint256
REF_614(uint32) -> _panda.sireId
TMP_2029 = CONVERT REF_614 to uint256
REF_615(uint256[2]) -> _panda.genes
Emit Birth(_owner.newKittenId.TMP_2028.TMP_2029.REF_615)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
_transfer(0,_owner,newKittenId)

IRs:
INTERNAL_CALL, PandaBase._transfer(address,address,uint256)(0,_owner,newKittenId)"];
39->40;
40[label="Node Type: RETURN 40

EXPRESSION:
newKittenId

IRs:
RETURN newKittenId"];
}
