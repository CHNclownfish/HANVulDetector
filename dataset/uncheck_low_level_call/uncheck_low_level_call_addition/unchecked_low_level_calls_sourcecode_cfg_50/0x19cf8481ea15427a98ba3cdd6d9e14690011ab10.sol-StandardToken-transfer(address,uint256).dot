digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = safeSub(balances[msg.sender],_value)

IRs:
REF_0(uint256) -> balances[msg.sender]
REF_1(uint256) -> balances[msg.sender]
TMP_54(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_1,_value)
REF_0 (->balances) := TMP_54(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] = safeAdd(balances[_to],_value)

IRs:
REF_2(uint256) -> balances[_to]
REF_3(uint256) -> balances[_to]
TMP_55(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_3,_value)
REF_2 (->balances) := TMP_55(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender._to._value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
