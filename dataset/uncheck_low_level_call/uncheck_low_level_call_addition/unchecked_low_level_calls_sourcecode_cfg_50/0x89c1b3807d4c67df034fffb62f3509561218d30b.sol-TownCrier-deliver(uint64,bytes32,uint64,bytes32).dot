digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != SGX_ADDRESS || requestId <= 0 || requests[requestId].requester == 0 || requests[requestId].fee == DELIVERED_FEE_FLAG

IRs:
TMP_33(bool) = msg.sender != SGX_ADDRESS
TMP_34(bool) = requestId <= 0
TMP_35(bool) = TMP_33 || TMP_34
REF_31(TownCrier.Request) -> requests[requestId]
REF_32(address) -> REF_31.requester
TMP_36(bool) = REF_32 == 0
TMP_37(bool) = TMP_35 || TMP_36
REF_33(TownCrier.Request) -> requests[requestId]
REF_34(uint256) -> REF_33.fee
TMP_38(bool) = REF_34 == DELIVERED_FEE_FLAG
TMP_39(bool) = TMP_37 || TMP_38
CONDITION TMP_39"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
fee = requests[requestId].fee

IRs:
REF_35(TownCrier.Request) -> requests[requestId]
REF_36(uint256) -> REF_35.fee
fee(uint256) := REF_36(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
requests[requestId].paramsHash != paramsHash

IRs:
REF_37(TownCrier.Request) -> requests[requestId]
REF_38(bytes32) -> REF_37.paramsHash
TMP_40(bool) = REF_38 != paramsHash
CONDITION TMP_40"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6
"];
7[label="Node Type: IF 7

EXPRESSION:
fee == CANCELLED_FEE_FLAG

IRs:
TMP_41(bool) = fee == CANCELLED_FEE_FLAG
CONDITION TMP_41"];
7->8[label="True"];
7->12[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
SGX_ADDRESS.send(CANCELLATION_FEE)

IRs:
TMP_42 = SEND dest:SGX_ADDRESS value:CANCELLATION_FEE"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
requests[requestId].fee = DELIVERED_FEE_FLAG

IRs:
REF_40(TownCrier.Request) -> requests[requestId]
REF_41(uint256) -> REF_40.fee
REF_41 (->requests) := DELIVERED_FEE_FLAG(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
unrespondedCnt --

IRs:
TMP_43(uint64) := unrespondedCnt(uint64)
unrespondedCnt(uint64) = unrespondedCnt - 1"];
10->11;
11[label="Node Type: RETURN 11
"];
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
requests[requestId].fee = DELIVERED_FEE_FLAG

IRs:
REF_42(TownCrier.Request) -> requests[requestId]
REF_43(uint256) -> REF_42.fee
REF_43 (->requests) := DELIVERED_FEE_FLAG(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
unrespondedCnt --

IRs:
TMP_44(uint64) := unrespondedCnt(uint64)
unrespondedCnt(uint64) = unrespondedCnt - 1"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
error < 2

IRs:
TMP_45(bool) = error < 2
CONDITION TMP_45"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
SGX_ADDRESS.send(fee)

IRs:
TMP_46 = SEND dest:SGX_ADDRESS value:fee"];
17->21;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
externalCallFlag = true

IRs:
externalCallFlag(bool) := True(bool)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
requests[requestId].requester.call.gas(2300).value(fee)()

IRs:
REF_45(TownCrier.Request) -> requests[requestId]
REF_46(address) -> REF_45.requester
TMP_49(bool) = LOW_LEVEL_CALL, dest:REF_46, function:call, arguments:[] value:fee gas:2300"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
externalCallFlag = false

IRs:
externalCallFlag(bool) := False(bool)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: NEW VARIABLE 22

EXPRESSION:
callbackGas = (fee - MIN_FEE) / tx.gasprice

IRs:
TMP_50(uint256) = fee - MIN_FEE
TMP_51(uint256) = TMP_50 / tx.gasprice
callbackGas(uint256) := TMP_51(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
DeliverInfo(requestId,fee,tx.gasprice,msg.gas,callbackGas,paramsHash,error,respData)

IRs:
Emit DeliverInfo(requestId.fee.tx.gasprice.msg.gas.callbackGas.paramsHash.error.respData)"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
callbackGas > msg.gas - 5000

IRs:
TMP_53(uint256) = msg.gas - 5000
TMP_54(bool) = callbackGas > TMP_53
CONDITION TMP_54"];
24->25[label="True"];
24->26[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
callbackGas = msg.gas - 5000

IRs:
TMP_55(uint256) = msg.gas - 5000
callbackGas(uint256) := TMP_55(uint256)"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
externalCallFlag = true

IRs:
externalCallFlag(bool) := True(bool)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
requests[requestId].callbackAddr.call.gas(callbackGas)(requests[requestId].callbackFID,requestId,error,respData)

IRs:
REF_50(TownCrier.Request) -> requests[requestId]
REF_51(address) -> REF_50.callbackAddr
REF_54(TownCrier.Request) -> requests[requestId]
REF_55(bytes4) -> REF_54.callbackFID
TMP_57(bool) = LOW_LEVEL_CALL, dest:REF_51, function:call, arguments:['REF_55', 'requestId', 'error', 'respData']  gas:callbackGas"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
externalCallFlag = false

IRs:
externalCallFlag(bool) := False(bool)"];
}
