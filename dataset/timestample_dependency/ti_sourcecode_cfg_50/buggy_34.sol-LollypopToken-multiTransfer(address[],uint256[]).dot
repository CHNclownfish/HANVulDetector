digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(receivers.length == amounts.length)

IRs:
REF_46 -> LENGTH receivers
REF_47 -> LENGTH amounts
TMP_159(bool) = REF_46 == REF_47
TMP_160(None) = SOLIDITY_CALL require(bool)(TMP_159)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < receivers.length

IRs:
REF_48 -> LENGTH receivers
TMP_161(bool) = i < REF_48
CONDITION TMP_161"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
transfer(receivers[i],amounts[i])

IRs:
REF_49(address) -> receivers[i]
REF_50(uint256) -> amounts[i]
TMP_162(bool) = INTERNAL_CALL, LollypopToken.transfer(address,uint256)(REF_49,REF_50)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_163(uint256) := i(uint256)
i(uint256) = i + 1"];
7->5;
}
