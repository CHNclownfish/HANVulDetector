digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_balances[from] = _balances[from].sub(amount)

IRs:
REF_144(uint256) -> _balances[from]
REF_145(uint256) -> _balances[from]
TMP_571(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_145', 'amount'] 
REF_144 (->_balances) := TMP_571(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_balances[to] = _balances[to].add(amount)

IRs:
REF_147(uint256) -> _balances[to]
REF_148(uint256) -> _balances[to]
TMP_572(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_148', 'amount'] 
REF_147 (->_balances) := TMP_572(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Sent(operator,from,to,amount,userData,operatorData)

IRs:
Emit Sent(operator.from.to.amount.userData.operatorData)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(from,to,amount)

IRs:
Emit Transfer(from.to.amount)"];
}
