digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_to != address(0),ERC20: transfer to the zero address)

IRs:
TMP_225 = CONVERT 0 to address
TMP_226(bool) = _to != TMP_225
TMP_227(None) = SOLIDITY_CALL require(bool,string)(TMP_226,ERC20: transfer to the zero address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_balances[_from] = _balances[_from].sub(_value)

IRs:
REF_55(uint256) -> _balances[_from]
REF_56(uint256) -> _balances[_from]
TMP_228(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_56', '_value'] 
REF_55 (->_balances) := TMP_228(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_balances[_to] = _balances[_to].add(_value)

IRs:
REF_58(uint256) -> _balances[_to]
REF_59(uint256) -> _balances[_to]
TMP_229(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_59', '_value'] 
REF_58 (->_balances) := TMP_229(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from._to._value)"];
}
