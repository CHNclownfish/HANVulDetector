digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[from] = safeSub(balances[from],tokens)

IRs:
REF_29(uint256) -> balances[from]
REF_30(uint256) -> balances[from]
TMP_206(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_30,tokens)
REF_29 (->balances) := TMP_206(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[from][msg.sender] = safeSub(allowed[from][msg.sender],tokens)

IRs:
REF_31(mapping(address => uint256)) -> allowed[from]
REF_32(uint256) -> REF_31[msg.sender]
REF_33(mapping(address => uint256)) -> allowed[from]
REF_34(uint256) -> REF_33[msg.sender]
TMP_207(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_34,tokens)
REF_32 (->allowed) := TMP_207(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[to] = safeAdd(balances[to],tokens)

IRs:
REF_35(uint256) -> balances[to]
REF_36(uint256) -> balances[to]
TMP_208(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_36,tokens)
REF_35 (->balances) := TMP_208(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(from,to,tokens)

IRs:
Emit Transfer(from.to.tokens)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
}
