digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
p = proposals[proposalNumber]

IRs:
REF_31(MindsyncPlatform.Proposal) -> proposals[proposalNumber]
p(MindsyncPlatform.Proposal) := REF_31(MindsyncPlatform.Proposal)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(p.voted[msg.sender] != true)

IRs:
REF_32(mapping(address => bool)) -> p.voted
REF_33(bool) -> REF_32[msg.sender]
TMP_185(bool) = REF_33 != True
TMP_186(None) = SOLIDITY_CALL require(bool)(TMP_185)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
voteID = p.votes.length ++

IRs:
REF_34(MindsyncPlatform.Vote[]) -> p.votes
REF_35 -> LENGTH REF_34
TMP_187(uint256) := REF_35(uint256)
REF_35(-> p) = REF_35 + 1
voteID(uint256) := TMP_187(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
p.votes[voteID] = Vote(supportsProposal,msg.sender)

IRs:
REF_36(MindsyncPlatform.Vote[]) -> p.votes
REF_37(MindsyncPlatform.Vote) -> REF_36[voteID]
TMP_188 = new Vote(supportsProposal,msg.sender)
REF_37 (->p) := TMP_188(MindsyncPlatform.Vote)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
p.voted[msg.sender] = true

IRs:
REF_38(mapping(address => bool)) -> p.voted
REF_39(bool) -> REF_38[msg.sender]
REF_39 (->p) := True(bool)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
p.numberOfVotes = voteID + 1

IRs:
REF_40(uint256) -> p.numberOfVotes
TMP_189(uint256) = voteID + 1
REF_40 (->p) := TMP_189(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Voted(proposalNumber,supportsProposal,msg.sender)

IRs:
Emit Voted(proposalNumber.supportsProposal.msg.sender)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
voteID

IRs:
RETURN voteID"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyTokenholders()

IRs:
MODIFIER_CALL, MindsyncPlatform.onlyTokenholders()()"];
9->1;
}
