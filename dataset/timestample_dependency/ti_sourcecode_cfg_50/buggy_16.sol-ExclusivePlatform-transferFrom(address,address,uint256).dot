digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(allowed[_from][msg.sender] >= _amount)

IRs:
REF_41(mapping(address => uint256)) -> allowed[_from]
REF_42(uint256) -> REF_41[msg.sender]
TMP_204(bool) = REF_42 >= _amount
TMP_205(None) = SOLIDITY_CALL require(bool)(TMP_204)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount)

IRs:
REF_43(mapping(address => uint256)) -> allowed[_from]
REF_44(uint256) -> REF_43[msg.sender]
REF_45(mapping(address => uint256)) -> allowed[_from]
REF_46(uint256) -> REF_45[msg.sender]
TMP_206(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_46', '_amount'] 
REF_44 (->allowed) := TMP_206(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
doTransfer(_from,_to,_amount)

IRs:
INTERNAL_CALL, ExclusivePlatform.doTransfer(address,address,uint256)(_from,_to,_amount)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyPayloadSize(3 * 32)

IRs:
TMP_208(uint256) = 3 * 32
MODIFIER_CALL, ExclusivePlatform.onlyPayloadSize(uint256)(TMP_208)"];
5->1;
}
