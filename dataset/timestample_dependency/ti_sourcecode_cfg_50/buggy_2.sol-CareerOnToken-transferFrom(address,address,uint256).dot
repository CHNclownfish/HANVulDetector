digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_to != address(this) && ! isTransPaused && balances[msg.sender] >= _value && balances[_to] + _value > balances[_to] && allowed[_from][msg.sender] >= _value)

IRs:
TMP_61 = CONVERT this to address
TMP_62(bool) = _to != TMP_61
TMP_63 = ! isTransPaused 
TMP_64(bool) = TMP_62 && TMP_63
REF_13(uint256) -> balances[msg.sender]
TMP_65(bool) = REF_13 >= _value
TMP_66(bool) = TMP_64 && TMP_65
REF_14(uint256) -> balances[_to]
TMP_67(uint256) = REF_14 + _value
REF_15(uint256) -> balances[_to]
TMP_68(bool) = TMP_67 > REF_15
TMP_69(bool) = TMP_66 && TMP_68
REF_16(mapping(address => uint256)) -> allowed[_from]
REF_17(uint256) -> REF_16[msg.sender]
TMP_70(bool) = REF_17 >= _value
TMP_71(bool) = TMP_69 && TMP_70
TMP_72(None) = SOLIDITY_CALL assert(bool)(TMP_71)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] += _value

IRs:
REF_18(uint256) -> balances[_to]
REF_18(-> balances) = REF_18 + _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] -= _value

IRs:
REF_19(uint256) -> balances[_from]
REF_19(-> balances) = REF_19 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_20(mapping(address => uint256)) -> allowed[_from]
REF_21(uint256) -> REF_20[msg.sender]
REF_21(-> allowed) = REF_21 - _value"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_from == owner

IRs:
TMP_73(bool) = _from == owner
CONDITION TMP_73"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(address(this),_to,_value)

IRs:
TMP_74 = CONVERT this to address
Emit Transfer(TMP_74._to._value)"];
6->8;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from._to._value)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
}
