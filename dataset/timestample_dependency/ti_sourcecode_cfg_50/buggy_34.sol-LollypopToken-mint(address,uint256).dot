digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(account != address(0),ERC20: mint to the zero address)

IRs:
TMP_131 = CONVERT 0 to address
TMP_132(bool) = account != TMP_131
TMP_133(None) = SOLIDITY_CALL require(bool,string)(TMP_132,ERC20: mint to the zero address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_totalSupply = _totalSupply.add(amount)

IRs:
TMP_134(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_totalSupply', 'amount'] 
_totalSupply(uint256) := TMP_134(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_balances[account].amount = _balances[account].amount.add(amount)

IRs:
REF_35(LollypopToken.transferMapping) -> _balances[account]
REF_36(uint256) -> REF_35.amount
REF_37(LollypopToken.transferMapping) -> _balances[account]
REF_38(uint256) -> REF_37.amount
TMP_135(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_38', 'amount'] 
REF_36 (->_balances) := TMP_135(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),account,amount)

IRs:
TMP_136 = CONVERT 0 to address
Emit Transfer(TMP_136.account.amount)"];
}
