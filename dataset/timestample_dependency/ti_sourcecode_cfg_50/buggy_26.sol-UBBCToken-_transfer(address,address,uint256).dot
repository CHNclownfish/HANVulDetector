digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(sender != address(0),ERC20: transfer from the zero address)

IRs:
TMP_106 = CONVERT 0 to address
TMP_107(bool) = sender != TMP_106
TMP_108(None) = SOLIDITY_CALL require(bool,string)(TMP_107,ERC20: transfer from the zero address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(recipient != address(0),ERC20: transfer to the zero address)

IRs:
TMP_109 = CONVERT 0 to address
TMP_110(bool) = recipient != TMP_109
TMP_111(None) = SOLIDITY_CALL require(bool,string)(TMP_110,ERC20: transfer to the zero address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_balances[sender] = _balances[sender].sub(amount)

IRs:
REF_25(uint256) -> _balances[sender]
REF_26(uint256) -> _balances[sender]
TMP_112(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_26', 'amount'] 
REF_25 (->_balances) := TMP_112(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_balances[recipient] = _balances[recipient].add(amount)

IRs:
REF_28(uint256) -> _balances[recipient]
REF_29(uint256) -> _balances[recipient]
TMP_113(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_29', 'amount'] 
REF_28 (->_balances) := TMP_113(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(sender,recipient,amount)

IRs:
Emit Transfer(sender.recipient.amount)"];
}
