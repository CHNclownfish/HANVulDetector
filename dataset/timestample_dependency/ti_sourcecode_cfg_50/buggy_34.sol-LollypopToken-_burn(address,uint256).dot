digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(account != address(0),ERC20: burn from the zero address)

IRs:
TMP_203 = CONVERT 0 to address
TMP_204(bool) = account != TMP_203
TMP_205(None) = SOLIDITY_CALL require(bool,string)(TMP_204,ERC20: burn from the zero address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_totalSupply = _totalSupply.sub(value)

IRs:
TMP_206(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_totalSupply', 'value'] 
_totalSupply(uint256) := TMP_206(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_balances[account].amount = _balances[account].amount.sub(value)

IRs:
REF_69(LollypopToken.transferMapping) -> _balances[account]
REF_70(uint256) -> REF_69.amount
REF_71(LollypopToken.transferMapping) -> _balances[account]
REF_72(uint256) -> REF_71.amount
TMP_207(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_72', 'value'] 
REF_70 (->_balances) := TMP_207(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(account,address(0),value)

IRs:
TMP_208 = CONVERT 0 to address
Emit Transfer(account.TMP_208.value)"];
}
