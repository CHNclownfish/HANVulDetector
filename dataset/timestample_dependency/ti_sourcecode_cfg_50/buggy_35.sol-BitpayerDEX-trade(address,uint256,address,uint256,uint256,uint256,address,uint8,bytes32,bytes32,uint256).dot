digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(! safeGuard,System Paused by Admin)

IRs:
TMP_201 = ! safeGuard 
TMP_202(None) = SOLIDITY_CALL require(bool,string)(TMP_201,System Paused by Admin)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
hash = keccak256(bytes)(abi.encodePacked(this,tokenGet,amountGet,tokenGive,amountGive,expires,nonce))

IRs:
TMP_203(bytes) = SOLIDITY_CALL abi.encodePacked()(this,tokenGet,amountGet,tokenGive,amountGive,expires,nonce)
TMP_204(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_203)
hash(bytes32) := TMP_204(bytes32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(((orders[user][hash] || ecrecover(bytes32,uint8,bytes32,bytes32)(keccak256(bytes)(abi.encodePacked(Ethereum Signed Message:
32,hash)),v,r,s) == user) && block.number <= expires && orderFills[user][hash].add(amount) <= amountGet))

IRs:
REF_62(mapping(bytes32 => bool)) -> orders[user]
REF_63(bool) -> REF_62[hash]
TMP_205(bytes) = SOLIDITY_CALL abi.encodePacked()(Ethereum Signed Message:
32,hash)
TMP_206(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_205)
TMP_207(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(TMP_206,v,r,s)
TMP_208(bool) = TMP_207 == user
TMP_209(bool) = REF_63 || TMP_208
TMP_210(bool) = block.number <= expires
TMP_211(bool) = TMP_209 && TMP_210
REF_65(mapping(bytes32 => uint256)) -> orderFills[user]
REF_66(uint256) -> REF_65[hash]
TMP_212(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_66', 'amount'] 
TMP_213(bool) = TMP_212 <= amountGet
TMP_214(bool) = TMP_211 && TMP_213
TMP_215(None) = SOLIDITY_CALL require(bool)(TMP_214)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tradeBalances(tokenGet,amountGet,tokenGive,amountGive,user,amount)

IRs:
INTERNAL_CALL, BitpayerDEX.tradeBalances(address,uint256,address,uint256,address,uint256)(tokenGet,amountGet,tokenGive,amountGive,user,amount)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
orderFills[user][hash] = orderFills[user][hash].add(amount)

IRs:
REF_68(mapping(bytes32 => uint256)) -> orderFills[user]
REF_69(uint256) -> REF_68[hash]
REF_70(mapping(bytes32 => uint256)) -> orderFills[user]
REF_71(uint256) -> REF_70[hash]
TMP_217(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_71', 'amount'] 
REF_69 (->orderFills) := TMP_217(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Trade(now,tokenGet,amount,tokenGive,amountGive * amount / amountGet,user,msg.sender)

IRs:
TMP_218(uint256) = amountGive * amount
TMP_219(uint256) = TMP_218 / amountGet
Emit Trade(now.tokenGet.amount.tokenGive.TMP_219.user.msg.sender)"];
}
