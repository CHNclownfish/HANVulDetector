digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->17;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(gameList[_fixtureId].open_status == 3)

IRs:
REF_70(WhiteBetting.GameInfo) -> gameList[_fixtureId]
REF_71(uint8) -> REF_70.open_status
TMP_87(bool) = REF_71 == 3
TMP_88(None) = SOLIDITY_CALL require(bool)(TMP_87)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(gameList[_fixtureId].isDone == false)

IRs:
REF_72(WhiteBetting.GameInfo) -> gameList[_fixtureId]
REF_73(bool) -> REF_72.isDone
TMP_89(bool) = REF_73 == False
TMP_90(None) = SOLIDITY_CALL require(bool)(TMP_89)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(betList[_fixtureId][0].player != address(0))

IRs:
REF_74(WhiteBetting.BetFixture[]) -> betList[_fixtureId]
REF_75(WhiteBetting.BetFixture) -> REF_74[0]
REF_76(address) -> REF_75.player
TMP_91 = CONVERT 0 to address
TMP_92(bool) = REF_76 != TMP_91
TMP_93(None) = SOLIDITY_CALL require(bool)(TMP_92)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->14;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < betList[_fixtureId].length

IRs:
REF_77(WhiteBetting.BetFixture[]) -> betList[_fixtureId]
REF_78 -> LENGTH REF_77
TMP_94(bool) = i < REF_78
CONDITION TMP_94"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
selectedTeam = betList[_fixtureId][i].selectedTeam

IRs:
REF_79(WhiteBetting.BetFixture[]) -> betList[_fixtureId]
REF_80(WhiteBetting.BetFixture) -> REF_79[i]
REF_81(uint16) -> REF_80.selectedTeam
selectedTeam(uint16) := REF_81(uint16)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
returnEth = (betList[_fixtureId][i].stake * betList[_fixtureId][i].odd) / 1000

IRs:
REF_82(WhiteBetting.BetFixture[]) -> betList[_fixtureId]
REF_83(WhiteBetting.BetFixture) -> REF_82[i]
REF_84(uint256) -> REF_83.stake
REF_85(WhiteBetting.BetFixture[]) -> betList[_fixtureId]
REF_86(WhiteBetting.BetFixture) -> REF_85[i]
REF_87(uint32) -> REF_86.odd
TMP_95(uint256) = REF_84 * REF_87
TMP_96(uint256) = TMP_95 / 1000
returnEth(uint256) := TMP_96(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
(selectedTeam == 1 && _homeDrawAway == 1) || (selectedTeam == 2 && _homeDrawAway == 2) || (selectedTeam == 3 && _homeDrawAway == 3) || (selectedTeam == 4 && _overUnder == 1) || (selectedTeam == 5 && _overUnder == 2) || (selectedTeam == 6 && (_homeDrawAway == 1 || _homeDrawAway == 2)) || (selectedTeam == 7 && (_homeDrawAway == 1 || _homeDrawAway == 3)) || (selectedTeam == 8 && (_homeDrawAway == 3 || _homeDrawAway == 2))

IRs:
TMP_97(bool) = selectedTeam == 1
TMP_98(bool) = _homeDrawAway == 1
TMP_99(bool) = TMP_97 && TMP_98
TMP_100(bool) = selectedTeam == 2
TMP_101(bool) = _homeDrawAway == 2
TMP_102(bool) = TMP_100 && TMP_101
TMP_103(bool) = TMP_99 || TMP_102
TMP_104(bool) = selectedTeam == 3
TMP_105(bool) = _homeDrawAway == 3
TMP_106(bool) = TMP_104 && TMP_105
TMP_107(bool) = TMP_103 || TMP_106
TMP_108(bool) = selectedTeam == 4
TMP_109(bool) = _overUnder == 1
TMP_110(bool) = TMP_108 && TMP_109
TMP_111(bool) = TMP_107 || TMP_110
TMP_112(bool) = selectedTeam == 5
TMP_113(bool) = _overUnder == 2
TMP_114(bool) = TMP_112 && TMP_113
TMP_115(bool) = TMP_111 || TMP_114
TMP_116(bool) = selectedTeam == 6
TMP_117(bool) = _homeDrawAway == 1
TMP_118(bool) = _homeDrawAway == 2
TMP_119(bool) = TMP_117 || TMP_118
TMP_120(bool) = TMP_116 && TMP_119
TMP_121(bool) = TMP_115 || TMP_120
TMP_122(bool) = selectedTeam == 7
TMP_123(bool) = _homeDrawAway == 1
TMP_124(bool) = _homeDrawAway == 3
TMP_125(bool) = TMP_123 || TMP_124
TMP_126(bool) = TMP_122 && TMP_125
TMP_127(bool) = TMP_121 || TMP_126
TMP_128(bool) = selectedTeam == 8
TMP_129(bool) = _homeDrawAway == 3
TMP_130(bool) = _homeDrawAway == 2
TMP_131(bool) = TMP_129 || TMP_130
TMP_132(bool) = TMP_128 && TMP_131
TMP_133(bool) = TMP_127 || TMP_132
CONDITION TMP_133"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
betList[_fixtureId][i].player.transfer(returnEth)

IRs:
REF_88(WhiteBetting.BetFixture[]) -> betList[_fixtureId]
REF_89(WhiteBetting.BetFixture) -> REF_88[i]
REF_90(address) -> REF_89.player
Transfer dest:REF_90 value:returnEth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
i ++

IRs:
TMP_135(uint256) := i(uint256)
i(uint256) = i + 1"];
13->7;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
gameList[_fixtureId].open_status = 5

IRs:
REF_92(WhiteBetting.GameInfo) -> gameList[_fixtureId]
REF_93(uint8) -> REF_92.open_status
REF_93 (->gameList) := 5(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
gameList[_fixtureId].isDone = true

IRs:
REF_94(WhiteBetting.GameInfo) -> gameList[_fixtureId]
REF_95(bool) -> REF_94.isDone
REF_95 (->gameList) := True(bool)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
GivePrizeMoney(_fixtureId,_homeDrawAway,_overUnder)

IRs:
Emit GivePrizeMoney(_fixtureId._homeDrawAway._overUnder)"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, WhiteBetting.onlyOwner()()"];
17->1;
}
