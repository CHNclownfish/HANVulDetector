digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(token != address(0))

IRs:
TMP_156 = CONVERT 0 to address
TMP_157(bool) = token != TMP_156
TMP_158(None) = SOLIDITY_CALL require(bool)(TMP_157)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(ERC20Essential(token).transferFrom(msg.sender,address(this),amount))

IRs:
TMP_159 = CONVERT token to ERC20Essential
TMP_160 = CONVERT this to address
TMP_161(bool) = HIGH_LEVEL_CALL, dest:TMP_159(ERC20Essential), function:transferFrom, arguments:['msg.sender', 'TMP_160', 'amount']  
TMP_162(None) = SOLIDITY_CALL require(bool)(TMP_161)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokens[token][msg.sender] = tokens[token][msg.sender].add(amount)

IRs:
REF_35(mapping(address => uint256)) -> tokens[token]
REF_36(uint256) -> REF_35[msg.sender]
REF_37(mapping(address => uint256)) -> tokens[token]
REF_38(uint256) -> REF_37[msg.sender]
TMP_163(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_38', 'amount'] 
REF_36 (->tokens) := TMP_163(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Deposit(now,token,msg.sender,amount,tokens[token][msg.sender])

IRs:
REF_40(mapping(address => uint256)) -> tokens[token]
REF_41(uint256) -> REF_40[msg.sender]
Emit Deposit(now.token.msg.sender.amount.REF_41)"];
}
