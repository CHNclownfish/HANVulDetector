digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(! safeGuard,System Paused by Admin)

IRs:
TMP_173 = ! safeGuard 
TMP_174(None) = SOLIDITY_CALL require(bool,string)(TMP_173,System Paused by Admin)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(token != address(0))

IRs:
TMP_175 = CONVERT 0 to address
TMP_176(bool) = token != TMP_175
TMP_177(None) = SOLIDITY_CALL require(bool)(TMP_176)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(tokens[token][msg.sender] >= amount)

IRs:
REF_44(mapping(address => uint256)) -> tokens[token]
REF_45(uint256) -> REF_44[msg.sender]
TMP_178(bool) = REF_45 >= amount
TMP_179(None) = SOLIDITY_CALL require(bool)(TMP_178)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokens[token][msg.sender] = tokens[token][msg.sender].sub(amount)

IRs:
REF_46(mapping(address => uint256)) -> tokens[token]
REF_47(uint256) -> REF_46[msg.sender]
REF_48(mapping(address => uint256)) -> tokens[token]
REF_49(uint256) -> REF_48[msg.sender]
TMP_180(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_49', 'amount'] 
REF_47 (->tokens) := TMP_180(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ERC20Essential(token).transfer(msg.sender,amount)

IRs:
TMP_181 = CONVERT token to ERC20Essential
TMP_182(bool) = HIGH_LEVEL_CALL, dest:TMP_181(ERC20Essential), function:transfer, arguments:['msg.sender', 'amount']  "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Withdraw(now,token,msg.sender,amount,tokens[token][msg.sender])

IRs:
REF_52(mapping(address => uint256)) -> tokens[token]
REF_53(uint256) -> REF_52[msg.sender]
Emit Withdraw(now.token.msg.sender.amount.REF_53)"];
}
