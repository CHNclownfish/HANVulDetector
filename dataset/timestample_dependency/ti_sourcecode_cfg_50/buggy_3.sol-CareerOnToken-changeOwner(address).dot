digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.sender == owner && msg.sender != newOwner)

IRs:
TMP_102(bool) = msg.sender == owner
TMP_103(bool) = msg.sender != newOwner
TMP_104(bool) = TMP_102 && TMP_103
TMP_105(None) = SOLIDITY_CALL assert(bool)(TMP_104)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[newOwner] = balances[owner]

IRs:
REF_31(uint256) -> balances[newOwner]
REF_32(uint256) -> balances[owner]
REF_31 (->balances) := REF_32(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[owner] = 0

IRs:
REF_33(uint256) -> balances[owner]
REF_33 (->balances) := 0(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
OwnerChang(msg.sender,newOwner,balances[owner])

IRs:
REF_34(uint256) -> balances[owner]
Emit OwnerChang(msg.sender.newOwner.REF_34)"];
}
