digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
tokensMinted.add(getMiningReward()) > maxSupplyForEra && rewardEra < 39

IRs:
TMP_148(uint256) = INTERNAL_CALL, _Yesbuzz.getMiningReward()()
TMP_149(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['tokensMinted', 'TMP_148'] 
TMP_150(bool) = TMP_149 > maxSupplyForEra
TMP_151(bool) = rewardEra < 39
TMP_152(bool) = TMP_150 && TMP_151
CONDITION TMP_152"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
rewardEra = rewardEra + 1

IRs:
TMP_153(uint256) = rewardEra + 1
rewardEra(uint256) := TMP_153(uint256)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
maxSupplyForEra = _totalSupply - _totalSupply.div(2 ** (rewardEra + 1))

IRs:
TMP_154(uint256) = rewardEra + 1
TMP_155(uint256) = 2 ** TMP_154
TMP_156(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['_totalSupply', 'TMP_155'] 
TMP_157(uint256) = _totalSupply - TMP_156
maxSupplyForEra(uint256) := TMP_157(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
epochCount = epochCount.add(1)

IRs:
TMP_158(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['epochCount', '1'] 
epochCount(uint256) := TMP_158(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
epochCount % _BLOCKS_PER_READJUSTMENT == 0

IRs:
TMP_159(uint256) = epochCount % _BLOCKS_PER_READJUSTMENT
TMP_160(bool) = TMP_159 == 0
CONDITION TMP_160"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_reAdjustDifficulty()

IRs:
INTERNAL_CALL, _Yesbuzz._reAdjustDifficulty()()"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
challengeNumber = blockhash(uint256)(block.number - 1)

IRs:
TMP_162(uint256) = block.number - 1
TMP_163(uint256) = SOLIDITY_CALL blockhash(uint256)(TMP_162)
challengeNumber(bytes32) := TMP_163(uint256)"];
}
