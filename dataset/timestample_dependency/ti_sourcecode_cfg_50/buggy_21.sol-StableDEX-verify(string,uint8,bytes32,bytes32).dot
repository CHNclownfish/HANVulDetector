digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
header = Ethereum Signed Message:
000000

IRs:
header(string) := Ethereum Signed Message:
000000(string)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(length <= 999999)

IRs:
TMP_199(bool) = length <= 999999
TMP_200(None) = SOLIDITY_CALL require(bool)(TMP_199)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
lengthLength = 0

IRs:
lengthLength(uint256) := 0(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
divisor = 100000

IRs:
divisor(uint256) := 100000(uint256)"];
7->8;
8[label="Node Type: BEGIN_LOOP 8
"];
8->9;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
divisor != 0

IRs:
TMP_201(bool) = divisor != 0
CONDITION TMP_201"];
9->10[label="True"];
9->23[label="False"];
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
digit = length.div(divisor)

IRs:
TMP_202(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['length', 'divisor'] 
digit(uint256) := TMP_202(uint256)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
digit == 0

IRs:
TMP_203(bool) = digit == 0
CONDITION TMP_203"];
11->12[label="True"];
11->16[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
lengthLength == 0

IRs:
TMP_204(bool) = lengthLength == 0
CONDITION TMP_204"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
divisor = divisor.div(10)

IRs:
TMP_205(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['divisor', '10'] 
divisor(uint256) := TMP_205(uint256)"];
13->14;
14[label="Node Type: CONTINUE 14
"];
14->8;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
lengthLength ++

IRs:
TMP_206(uint256) := lengthLength(uint256)
lengthLength(uint256) = lengthLength + 1"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
length = length.sub(digit.mul(divisor))

IRs:
TMP_207(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['digit', 'divisor'] 
TMP_208(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['length', 'TMP_207'] 
length(uint256) := TMP_208(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
divisor = divisor.div(10)

IRs:
TMP_209(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['divisor', '10'] 
divisor(uint256) := TMP_209(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
digit = digit.add(0x30)

IRs:
TMP_210(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['digit', '48'] 
digit(uint256) := TMP_210(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
lengthOffset ++

IRs:
TMP_211(uint256) := lengthOffset(uint256)
lengthOffset(uint256) = lengthOffset + 1"];
21->22;
22[label="Node Type: INLINE ASM 22
"];
22->9;
23[label="Node Type: END_LOOP 23
"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
lengthLength == 0

IRs:
TMP_212(bool) = lengthLength == 0
CONDITION TMP_212"];
24->25[label="True"];
24->26[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
lengthLength = 1 + 0x19 + 1

IRs:
TMP_213(uint256) = 1 + 25
TMP_214(uint256) = TMP_213 + 1
lengthLength(uint256) := TMP_214(uint256)"];
25->27;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
lengthLength = lengthLength.add(1 + 0x19)

IRs:
TMP_215(uint256) = 1 + 25
TMP_216(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['lengthLength', 'TMP_215'] 
lengthLength(uint256) := TMP_216(uint256)"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: INLINE ASM 28
"];
28->29;
29[label="Node Type: NEW VARIABLE 29

EXPRESSION:
check = keccak256(bytes)(abi.encodePacked(header,message))

IRs:
TMP_217(bytes) = SOLIDITY_CALL abi.encodePacked()(header,message)
TMP_218(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_217)
check(bytes32) := TMP_218(bytes32)"];
29->30;
30[label="Node Type: RETURN 30

EXPRESSION:
ecrecover(bytes32,uint8,bytes32,bytes32)(check,v,r,s)

IRs:
TMP_219(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(check,v,r,s)
RETURN TMP_219"];
}
