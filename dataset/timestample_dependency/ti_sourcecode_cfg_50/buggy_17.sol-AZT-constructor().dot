digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
frozenAddresses.push(address(0x9fd50776F133751E8Ae6abE1Be124638Bb917E05))

IRs:
TMP_176 = CONVERT 912480241548209455660388499842434547007005752837 to address
REF_43 -> LENGTH frozenAddresses
TMP_178(uint256) := REF_43(uint256)
TMP_179(uint256) = TMP_178 + 1
REF_43 (->frozenAddresses) := TMP_179(uint256)
REF_44(address) -> frozenAddresses[TMP_178]
REF_44 (->frozenAddresses) := TMP_176(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
frozenWallets[frozenAddresses[0]] = frozenWallet(true,30000000 * 10 ** uint256(decimals),0 * 10 ** uint256(decimals),now + 1 * 3600)

IRs:
REF_45(address) -> frozenAddresses[0]
REF_46(AZT.frozenWallet) -> frozenWallets[REF_45]
TMP_180 = CONVERT decimals to uint256
TMP_181(uint256) = 10 ** TMP_180
TMP_182(uint256) = 30000000 * TMP_181
TMP_183 = CONVERT decimals to uint256
TMP_184(uint256) = 10 ** TMP_183
TMP_185(uint256) = 0 * TMP_184
TMP_186(uint256) = 1 * 3600
TMP_187(uint256) = now + TMP_186
TMP_188 = new frozenWallet(True,TMP_182,TMP_185,TMP_187)
REF_46 (->frozenWallets) := TMP_188(AZT.frozenWallet)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < frozenAddresses.length

IRs:
REF_47 -> LENGTH frozenAddresses
TMP_189(bool) = i < REF_47
CONDITION TMP_189"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balanceOf[frozenAddresses[i]] = frozenWallets[frozenAddresses[i]].rewardedAmount

IRs:
REF_48(address) -> frozenAddresses[i]
REF_49(uint256) -> balanceOf[REF_48]
REF_50(address) -> frozenAddresses[i]
REF_51(AZT.frozenWallet) -> frozenWallets[REF_50]
REF_52(uint256) -> REF_51.rewardedAmount
REF_49 (->balanceOf) := REF_52(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
totalSupply = totalSupply.add(frozenWallets[frozenAddresses[i]].rewardedAmount)

IRs:
REF_54(address) -> frozenAddresses[i]
REF_55(AZT.frozenWallet) -> frozenWallets[REF_54]
REF_56(uint256) -> REF_55.rewardedAmount
TMP_190(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply', 'REF_56'] 
totalSupply(uint256) := TMP_190(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_191(uint256) := i(uint256)
i(uint256) = i + 1"];
9->6;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
TokenERC20(_tokenName,_tokenSymbol,_decimals)

IRs:
INTERNAL_CALL, TokenERC20.constructor(string,string,uint8)(_tokenName,_tokenSymbol,_decimals)"];
10->1;
}
