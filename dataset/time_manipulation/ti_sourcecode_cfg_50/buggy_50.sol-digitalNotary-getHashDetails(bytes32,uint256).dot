digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owncount = getHashOwnersCount(hash)

IRs:
TMP_97(uint256) = INTERNAL_CALL, digitalNotary.getHashOwnersCount(bytes32)(hash)
owncount(uint256) := TMP_97(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(owncount > 0)

IRs:
TMP_98(bool) = owncount > 0
TMP_99(None) = SOLIDITY_CALL require(bool)(TMP_98)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(indx < owncount)

IRs:
TMP_100(bool) = indx < owncount
TMP_101(None) = SOLIDITY_CALL require(bool)(TMP_100)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(HashList[hash][indx].owner,HashList[hash][indx].registrationtime)

IRs:
REF_18(digitalNotary.HashRegistration[]) -> HashList[hash]
REF_19(digitalNotary.HashRegistration) -> REF_18[indx]
REF_20(address) -> REF_19.owner
REF_21(digitalNotary.HashRegistration[]) -> HashList[hash]
REF_22(digitalNotary.HashRegistration) -> REF_21[indx]
REF_23(uint256) -> REF_22.registrationtime
RETURN REF_20,REF_23"];
}
