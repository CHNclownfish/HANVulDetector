digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == admin)

IRs:
TMP_168(bool) = msg.sender == admin
TMP_169(None) = SOLIDITY_CALL require(bool)(TMP_168)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(type_ == 0 || type_ == 1)

IRs:
TMP_170(bool) = type_ == 0
TMP_171(bool) = type_ == 1
TMP_172(bool) = TMP_170 || TMP_171
TMP_173(None) = SOLIDITY_CALL require(bool)(TMP_172)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
type_ == 0

IRs:
TMP_174(bool) = type_ == 0
CONDITION TMP_174"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
admin.transfer(feeAmount[admin][address(0)])

IRs:
REF_71(mapping(address => uint256)) -> feeAmount[admin]
TMP_175 = CONVERT 0 to address
REF_72(uint256) -> REF_71[TMP_175]
Transfer dest:admin value:REF_72"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
feeAmount[admin][address(0)] = 0

IRs:
REF_73(mapping(address => uint256)) -> feeAmount[admin]
TMP_177 = CONVERT 0 to address
REF_74(uint256) -> REF_73[TMP_177]
REF_74 (->feeAmount) := 0(uint256)"];
5->9;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(tokenAddr != address(0))

IRs:
TMP_178 = CONVERT 0 to address
TMP_179(bool) = tokenAddr != TMP_178
TMP_180(None) = SOLIDITY_CALL require(bool)(TMP_179)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Token(tokenAddr).transfer(admin,feeAmount[admin][tokenAddr])

IRs:
TMP_181 = CONVERT tokenAddr to Token
REF_76(mapping(address => uint256)) -> feeAmount[admin]
REF_77(uint256) -> REF_76[tokenAddr]
TMP_182(bool) = HIGH_LEVEL_CALL, dest:TMP_181(Token), function:transfer, arguments:['admin', 'REF_77']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
feeAmount[admin][tokenAddr] = 0

IRs:
REF_78(mapping(address => uint256)) -> feeAmount[admin]
REF_79(uint256) -> REF_78[tokenAddr]
REF_79 (->feeAmount) := 0(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
}
