digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0x0))

IRs:
TMP_199 = CONVERT 0 to address
TMP_200(bool) = _to != TMP_199
TMP_201(None) = SOLIDITY_CALL require(bool)(TMP_200)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_64(uint256) -> balanceOf[_from]
TMP_202(bool) = REF_64 >= _value
TMP_203(None) = SOLIDITY_CALL require(bool)(TMP_202)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balanceOf[_to] + _value >= balanceOf[_to])

IRs:
REF_65(uint256) -> balanceOf[_to]
TMP_204(uint256) = REF_65 + _value
REF_66(uint256) -> balanceOf[_to]
TMP_205(bool) = TMP_204 >= REF_66
TMP_206(None) = SOLIDITY_CALL require(bool)(TMP_205)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(! frozenAccount[_from])

IRs:
REF_67(bool) -> frozenAccount[_from]
TMP_207 = ! REF_67 
TMP_208(None) = SOLIDITY_CALL require(bool)(TMP_207)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(! frozenAccount[_to])

IRs:
REF_68(bool) -> frozenAccount[_to]
TMP_209 = ! REF_68 
TMP_210(None) = SOLIDITY_CALL require(bool)(TMP_209)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balanceOf[_from] -= _value

IRs:
REF_69(uint256) -> balanceOf[_from]
REF_69(-> balanceOf) = REF_69 - _value"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balanceOf[_to] += _value

IRs:
REF_70(uint256) -> balanceOf[_to]
REF_70(-> balanceOf) = REF_70 + _value"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from._to._value)"];
}
