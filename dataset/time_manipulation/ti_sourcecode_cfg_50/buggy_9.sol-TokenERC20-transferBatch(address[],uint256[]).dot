digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_tos.length == _values.length)

IRs:
REF_32 -> LENGTH _tos
REF_33 -> LENGTH _values
TMP_134(bool) = REF_32 == REF_33
TMP_135(None) = SOLIDITY_CALL require(bool)(TMP_134)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->8;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < _tos.length

IRs:
REF_34 -> LENGTH _tos
TMP_136(bool) = i < REF_34
CONDITION TMP_136"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
transfer(_tos[i],_values[i])

IRs:
REF_35(address) -> _tos[i]
REF_36(uint256) -> _values[i]
TMP_137(bool) = INTERNAL_CALL, TokenERC20.transfer(address,uint256)(REF_35,REF_36)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_138(uint256) := i(uint256)
i(uint256) = i + 1"];
7->5;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
