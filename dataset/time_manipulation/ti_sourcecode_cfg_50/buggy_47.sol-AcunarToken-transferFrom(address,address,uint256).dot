digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(allowed[from][to] >= tokens)

IRs:
REF_20(mapping(address => uint256)) -> allowed[from]
REF_21(uint256) -> REF_20[to]
TMP_98(bool) = REF_21 >= tokens
TMP_99(None) = SOLIDITY_CALL require(bool)(TMP_98)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balances[from] >= tokens)

IRs:
REF_22(uint256) -> balances[from]
TMP_100(bool) = REF_22 >= tokens
TMP_101(None) = SOLIDITY_CALL require(bool)(TMP_100)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[from] -= tokens

IRs:
REF_23(uint256) -> balances[from]
REF_23(-> balances) = REF_23 - tokens"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[to] += tokens

IRs:
REF_24(uint256) -> balances[to]
REF_24(-> balances) = REF_24 + tokens"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allowed[from][to] -= tokens

IRs:
REF_25(mapping(address => uint256)) -> allowed[from]
REF_26(uint256) -> REF_25[to]
REF_26(-> allowed) = REF_26 - tokens"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
