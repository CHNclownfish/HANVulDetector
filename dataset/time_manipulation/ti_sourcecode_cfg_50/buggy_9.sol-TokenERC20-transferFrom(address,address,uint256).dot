digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transfer(_from,_to,_value)

IRs:
INTERNAL_CALL, TokenERC20._transfer(address,address,uint256)(_from,_to,_value)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_approve(_from,msg.sender,_allowed[_from][msg.sender].sub(_value))

IRs:
REF_14(mapping(address => uint256)) -> _allowed[_from]
REF_15(uint256) -> REF_14[msg.sender]
TMP_93(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_15', '_value'] 
INTERNAL_CALL, TokenERC20._approve(address,address,uint256)(_from,msg.sender,TMP_93)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPayloadSize(3 * 32)

IRs:
TMP_95(uint256) = 3 * 32
MODIFIER_CALL, TokenERC20.onlyPayloadSize(uint256)(TMP_95)"];
4->1;
}
