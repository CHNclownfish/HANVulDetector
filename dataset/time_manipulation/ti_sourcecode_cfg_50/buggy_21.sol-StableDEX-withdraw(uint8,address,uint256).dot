digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->17;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(type_ == 0 || type_ == 1)

IRs:
TMP_120(bool) = type_ == 0
TMP_121(bool) = type_ == 1
TMP_122(bool) = TMP_120 || TMP_121
TMP_123(None) = SOLIDITY_CALL require(bool)(TMP_122)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
type_ == 0

IRs:
TMP_124(bool) = type_ == 0
CONDITION TMP_124"];
2->3[label="True"];
2->9[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(tokenaddr == address(0))

IRs:
TMP_125 = CONVERT 0 to address
TMP_126(bool) = tokenaddr == TMP_125
TMP_127(None) = SOLIDITY_CALL require(bool)(TMP_126)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(amount > 0 && amount <= userDetails[msg.sender][address(0)] && withdrawfee[address(0)] < amount)

IRs:
TMP_128(bool) = amount > 0
REF_33(mapping(address => uint256)) -> userDetails[msg.sender]
TMP_129 = CONVERT 0 to address
REF_34(uint256) -> REF_33[TMP_129]
TMP_130(bool) = amount <= REF_34
TMP_131(bool) = TMP_128 && TMP_130
TMP_132 = CONVERT 0 to address
REF_35(uint256) -> withdrawfee[TMP_132]
TMP_133(bool) = REF_35 < amount
TMP_134(bool) = TMP_131 && TMP_133
TMP_135(None) = SOLIDITY_CALL require(bool)(TMP_134)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(amount <= address(this).balance)

IRs:
TMP_136 = CONVERT this to address
REF_36 -> BALANCE TMP_136
TMP_137(bool) = amount <= REF_36
TMP_138(None) = SOLIDITY_CALL require(bool)(TMP_137)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
msg.sender.transfer(amount.sub(withdrawfee[address(0)]))

IRs:
TMP_139 = CONVERT 0 to address
REF_39(uint256) -> withdrawfee[TMP_139]
TMP_140(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['amount', 'REF_39'] 
Transfer dest:msg.sender value:TMP_140"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
userDetails[msg.sender][address(0)] = userDetails[msg.sender][address(0)].sub(amount)

IRs:
REF_40(mapping(address => uint256)) -> userDetails[msg.sender]
TMP_142 = CONVERT 0 to address
REF_41(uint256) -> REF_40[TMP_142]
REF_42(mapping(address => uint256)) -> userDetails[msg.sender]
TMP_143 = CONVERT 0 to address
REF_43(uint256) -> REF_42[TMP_143]
TMP_144(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_43', 'amount'] 
REF_41 (->userDetails) := TMP_144(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
feeAmount[admin][address(0)] = feeAmount[admin][address(0)].add(withdrawfee[address(0)])

IRs:
REF_45(mapping(address => uint256)) -> feeAmount[admin]
TMP_145 = CONVERT 0 to address
REF_46(uint256) -> REF_45[TMP_145]
REF_47(mapping(address => uint256)) -> feeAmount[admin]
TMP_146 = CONVERT 0 to address
REF_48(uint256) -> REF_47[TMP_146]
TMP_147 = CONVERT 0 to address
REF_50(uint256) -> withdrawfee[TMP_147]
TMP_148(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_48', 'REF_50'] 
REF_46 (->feeAmount) := TMP_148(uint256)"];
8->14;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(tokenaddr != address(0) && tokendetails[tokenaddr].status == true)

IRs:
TMP_149 = CONVERT 0 to address
TMP_150(bool) = tokenaddr != TMP_149
REF_51(StableDEX.tokens) -> tokendetails[tokenaddr]
REF_52(bool) -> REF_51.status
TMP_151(bool) = REF_52 == True
TMP_152(bool) = TMP_150 && TMP_151
TMP_153(None) = SOLIDITY_CALL require(bool)(TMP_152)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(amount > 0 && amount <= userDetails[msg.sender][tokenaddr] && withdrawfee[tokenaddr] < amount)

IRs:
TMP_154(bool) = amount > 0
REF_53(mapping(address => uint256)) -> userDetails[msg.sender]
REF_54(uint256) -> REF_53[tokenaddr]
TMP_155(bool) = amount <= REF_54
TMP_156(bool) = TMP_154 && TMP_155
REF_55(uint256) -> withdrawfee[tokenaddr]
TMP_157(bool) = REF_55 < amount
TMP_158(bool) = TMP_156 && TMP_157
TMP_159(None) = SOLIDITY_CALL require(bool)(TMP_158)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
Token(tokenaddr).transfer(msg.sender,(amount.sub(withdrawfee[tokenaddr])))

IRs:
TMP_160 = CONVERT tokenaddr to Token
REF_58(uint256) -> withdrawfee[tokenaddr]
TMP_161(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['amount', 'REF_58'] 
TMP_162(bool) = HIGH_LEVEL_CALL, dest:TMP_160(Token), function:transfer, arguments:['msg.sender', 'TMP_161']  "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
userDetails[msg.sender][tokenaddr] = userDetails[msg.sender][tokenaddr].sub(amount)

IRs:
REF_59(mapping(address => uint256)) -> userDetails[msg.sender]
REF_60(uint256) -> REF_59[tokenaddr]
REF_61(mapping(address => uint256)) -> userDetails[msg.sender]
REF_62(uint256) -> REF_61[tokenaddr]
TMP_163(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_62', 'amount'] 
REF_60 (->userDetails) := TMP_163(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
feeAmount[admin][tokenaddr] = feeAmount[admin][tokenaddr].add(withdrawfee[tokenaddr])

IRs:
REF_64(mapping(address => uint256)) -> feeAmount[admin]
REF_65(uint256) -> REF_64[tokenaddr]
REF_66(mapping(address => uint256)) -> feeAmount[admin]
REF_67(uint256) -> REF_66[tokenaddr]
REF_69(uint256) -> withdrawfee[tokenaddr]
TMP_164(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_67', 'REF_69'] 
REF_65 (->feeAmount) := TMP_164(uint256)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
DepositandWithdraw(msg.sender,tokenaddr,amount,1)

IRs:
Emit DepositandWithdraw(msg.sender.tokenaddr.amount.1)"];
15->16;
16[label="Node Type: RETURN 16

EXPRESSION:
true

IRs:
RETURN True"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
dexstatuscheck()

IRs:
MODIFIER_CALL, StableDEX.dexstatuscheck()()"];
17->1;
}
