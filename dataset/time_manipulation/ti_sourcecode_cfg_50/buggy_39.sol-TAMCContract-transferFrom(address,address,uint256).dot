digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(value <= balanceOf[from])

IRs:
REF_8(uint256) -> balanceOf[from]
TMP_25(bool) = value <= REF_8
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(value <= allowance[from][msg.sender])

IRs:
REF_9(mapping(address => uint256)) -> allowance[from]
REF_10(uint256) -> REF_9[msg.sender]
TMP_27(bool) = value <= REF_10
TMP_28(None) = SOLIDITY_CALL require(bool)(TMP_27)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[from] -= value

IRs:
REF_11(uint256) -> balanceOf[from]
REF_11(-> balanceOf) = REF_11 - value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balanceOf[to] += value

IRs:
REF_12(uint256) -> balanceOf[to]
REF_12(-> balanceOf) = REF_12 + value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allowance[from][msg.sender] -= value

IRs:
REF_13(mapping(address => uint256)) -> allowance[from]
REF_14(uint256) -> REF_13[msg.sender]
REF_14(-> allowance) = REF_14 - value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(from,to,value)

IRs:
Emit Transfer(from.to.value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
