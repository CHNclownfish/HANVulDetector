digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->59;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == feeAddress)

IRs:
TMP_220(bool) = msg.sender == feeAddress
TMP_221(None) = SOLIDITY_CALL require(bool)(TMP_220)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(verify((message),v,r,s) == traderAddresses[1])

IRs:
TMP_222(address) = INTERNAL_CALL, StableDEX.verify(string,uint8,bytes32,bytes32)(message,v,r,s)
REF_96(address) -> traderAddresses[1]
TMP_223(bool) = TMP_222 == REF_96
TMP_224(None) = SOLIDITY_CALL require(bool)(TMP_223)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
orderiD = tradeDetails[0]

IRs:
REF_97(uint256) -> tradeDetails[0]
orderiD(uint256) := REF_97(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
Order[orderiD].status == 0

IRs:
REF_98(StableDEX.orders) -> Order[orderiD]
REF_99(uint256) -> REF_98.status
TMP_225(bool) = REF_99 == 0
CONDITION TMP_225"];
5->6[label="True"];
5->24[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
tradeDetails[6] == 0

IRs:
REF_100(uint256) -> tradeDetails[6]
TMP_226(bool) = REF_100 == 0
CONDITION TMP_226"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
amount__ = tradeDetails[3]

IRs:
REF_101(uint256) -> tradeDetails[3]
amount__(uint256) := REF_101(uint256)"];
7->11;
8[label="Node Type: IF 8

EXPRESSION:
tradeDetails[6] == 1

IRs:
REF_102(uint256) -> tradeDetails[6]
TMP_227(bool) = REF_102 == 1
CONDITION TMP_227"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
amount__ = tradeDetails[1]

IRs:
REF_103(uint256) -> tradeDetails[1]
amount__(uint256) := REF_103(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
require(bool)(amount__ > 0 && amount__ <= userDetails[traderAddresses[1]][traderAddresses[0]])

IRs:
TMP_228(bool) = amount__ > 0
REF_104(address) -> traderAddresses[1]
REF_105(mapping(address => uint256)) -> userDetails[REF_104]
REF_106(address) -> traderAddresses[0]
REF_107(uint256) -> REF_105[REF_106]
TMP_229(bool) = amount__ <= REF_107
TMP_230(bool) = TMP_228 && TMP_229
TMP_231(None) = SOLIDITY_CALL require(bool)(TMP_230)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
Order[orderiD].userAddress = traderAddresses[1]

IRs:
REF_108(StableDEX.orders) -> Order[orderiD]
REF_109(address) -> REF_108.userAddress
REF_110(address) -> traderAddresses[1]
REF_109 (->Order) := REF_110(address)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
Order[orderiD].type_ = tradeDetails[6]

IRs:
REF_111(StableDEX.orders) -> Order[orderiD]
REF_112(uint256) -> REF_111.type_
REF_113(uint256) -> tradeDetails[6]
REF_112 (->Order) := REF_113(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
Order[orderiD].price = tradeDetails[2]

IRs:
REF_114(StableDEX.orders) -> Order[orderiD]
REF_115(uint256) -> REF_114.price
REF_116(uint256) -> tradeDetails[2]
REF_115 (->Order) := REF_116(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
Order[orderiD].amount = tradeDetails[1]

IRs:
REF_117(StableDEX.orders) -> Order[orderiD]
REF_118(uint256) -> REF_117.amount
REF_119(uint256) -> tradeDetails[1]
REF_118 (->Order) := REF_119(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
Order[orderiD].total = tradeDetails[3]

IRs:
REF_120(StableDEX.orders) -> Order[orderiD]
REF_121(uint256) -> REF_120.total
REF_122(uint256) -> tradeDetails[3]
REF_121 (->Order) := REF_122(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
Order[orderiD].tradeTotal = tradeDetails[3]

IRs:
REF_123(StableDEX.orders) -> Order[orderiD]
REF_124(uint256) -> REF_123.tradeTotal
REF_125(uint256) -> tradeDetails[3]
REF_124 (->Order) := REF_125(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
Order[orderiD]._decimal = tradeDetails[7]

IRs:
REF_126(StableDEX.orders) -> Order[orderiD]
REF_127(uint256) -> REF_126._decimal
REF_128(uint256) -> tradeDetails[7]
REF_127 (->Order) := REF_128(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
Order[orderiD].tokenAddress = traderAddresses[0]

IRs:
REF_129(StableDEX.orders) -> Order[orderiD]
REF_130(address) -> REF_129.tokenAddress
REF_131(address) -> traderAddresses[0]
REF_130 (->Order) := REF_131(address)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
userDetails[traderAddresses[1]][traderAddresses[0]] = userDetails[traderAddresses[1]][traderAddresses[0]].sub(amount__)

IRs:
REF_132(address) -> traderAddresses[1]
REF_133(mapping(address => uint256)) -> userDetails[REF_132]
REF_134(address) -> traderAddresses[0]
REF_135(uint256) -> REF_133[REF_134]
REF_136(address) -> traderAddresses[1]
REF_137(mapping(address => uint256)) -> userDetails[REF_136]
REF_138(address) -> traderAddresses[0]
REF_139(uint256) -> REF_137[REF_138]
TMP_232(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_139', 'amount__'] 
REF_135 (->userDetails) := TMP_232(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
Order[orderiD].tradeAmount = tradeDetails[1]

IRs:
REF_141(StableDEX.orders) -> Order[orderiD]
REF_142(uint256) -> REF_141.tradeAmount
REF_143(uint256) -> tradeDetails[1]
REF_142 (->Order) := REF_143(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
Order[orderiD].status = 1

IRs:
REF_144(StableDEX.orders) -> Order[orderiD]
REF_145(uint256) -> REF_144.status
REF_145 (->Order) := 1(uint256)"];
23->27;
24[label="Node Type: IF 24

EXPRESSION:
Order[orderiD].status == 1 && tradeDetails[8] == 0

IRs:
REF_146(StableDEX.orders) -> Order[orderiD]
REF_147(uint256) -> REF_146.status
TMP_233(bool) = REF_147 == 1
REF_148(uint256) -> tradeDetails[8]
TMP_234(bool) = REF_148 == 0
TMP_235(bool) = TMP_233 && TMP_234
CONDITION TMP_235"];
24->25[label="True"];
24->26[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
cancelOrder(orderiD)

IRs:
TMP_236(bool) = INTERNAL_CALL, StableDEX.cancelOrder(uint256)(orderiD)"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: IF 28

EXPRESSION:
Order[orderiD].status == 1 && tradeDetails[1] > 0 && tradeDetails[8] > 0 && Order[tradeDetails[8]].status == 1 && tradeDetails[3] > 0

IRs:
REF_149(StableDEX.orders) -> Order[orderiD]
REF_150(uint256) -> REF_149.status
TMP_237(bool) = REF_150 == 1
REF_151(uint256) -> tradeDetails[1]
TMP_238(bool) = REF_151 > 0
TMP_239(bool) = TMP_237 && TMP_238
REF_152(uint256) -> tradeDetails[8]
TMP_240(bool) = REF_152 > 0
TMP_241(bool) = TMP_239 && TMP_240
REF_153(uint256) -> tradeDetails[8]
REF_154(StableDEX.orders) -> Order[REF_153]
REF_155(uint256) -> REF_154.status
TMP_242(bool) = REF_155 == 1
TMP_243(bool) = TMP_241 && TMP_242
REF_156(uint256) -> tradeDetails[3]
TMP_244(bool) = REF_156 > 0
TMP_245(bool) = TMP_243 && TMP_244
CONDITION TMP_245"];
28->29[label="True"];
28->57[label="False"];
29[label="Node Type: EXPRESSION 29

EXPRESSION:
Order[orderiD].tradeAmount = Order[orderiD].tradeAmount.sub(tradeDetails[1])

IRs:
REF_157(StableDEX.orders) -> Order[orderiD]
REF_158(uint256) -> REF_157.tradeAmount
REF_159(StableDEX.orders) -> Order[orderiD]
REF_160(uint256) -> REF_159.tradeAmount
REF_162(uint256) -> tradeDetails[1]
TMP_246(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_160', 'REF_162'] 
REF_158 (->Order) := TMP_246(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
Order[tradeDetails[8]].tradeAmount = Order[tradeDetails[8]].tradeAmount.sub(tradeDetails[1])

IRs:
REF_163(uint256) -> tradeDetails[8]
REF_164(StableDEX.orders) -> Order[REF_163]
REF_165(uint256) -> REF_164.tradeAmount
REF_166(uint256) -> tradeDetails[8]
REF_167(StableDEX.orders) -> Order[REF_166]
REF_168(uint256) -> REF_167.tradeAmount
REF_170(uint256) -> tradeDetails[1]
TMP_247(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_168', 'REF_170'] 
REF_165 (->Order) := TMP_247(uint256)"];
30->31;
31[label="Node Type: IF 31

EXPRESSION:
tradeDetails[2] > 0

IRs:
REF_171(uint256) -> tradeDetails[2]
TMP_248(bool) = REF_171 > 0
CONDITION TMP_248"];
31->32[label="True"];
31->33[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
userDetails[Order[orderiD].userAddress][Order[orderiD].tokenAddress] = userDetails[Order[orderiD].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[2])

IRs:
REF_172(StableDEX.orders) -> Order[orderiD]
REF_173(address) -> REF_172.userAddress
REF_174(mapping(address => uint256)) -> userDetails[REF_173]
REF_175(StableDEX.orders) -> Order[orderiD]
REF_176(address) -> REF_175.tokenAddress
REF_177(uint256) -> REF_174[REF_176]
REF_178(StableDEX.orders) -> Order[orderiD]
REF_179(address) -> REF_178.userAddress
REF_180(mapping(address => uint256)) -> userDetails[REF_179]
REF_181(StableDEX.orders) -> Order[orderiD]
REF_182(address) -> REF_181.tokenAddress
REF_183(uint256) -> REF_180[REF_182]
REF_185(uint256) -> tradeDetails[2]
TMP_249(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_183', 'REF_185'] 
REF_177 (->userDetails) := TMP_249(uint256)"];
32->33;
33[label="Node Type: END_IF 33
"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
Order[orderiD].tradeTotal = Order[orderiD].tradeTotal.sub(((tradeDetails[1].mul(Order[orderiD].price)).div(Order[orderiD]._decimal)))

IRs:
REF_186(StableDEX.orders) -> Order[orderiD]
REF_187(uint256) -> REF_186.tradeTotal
REF_188(StableDEX.orders) -> Order[orderiD]
REF_189(uint256) -> REF_188.tradeTotal
REF_191(uint256) -> tradeDetails[1]
REF_193(StableDEX.orders) -> Order[orderiD]
REF_194(uint256) -> REF_193.price
TMP_250(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_191', 'REF_194'] 
REF_196(StableDEX.orders) -> Order[orderiD]
REF_197(uint256) -> REF_196._decimal
TMP_251(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_250', 'REF_197'] 
TMP_252(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_189', 'TMP_251'] 
REF_187 (->Order) := TMP_252(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
Order[tradeDetails[8]].tradeTotal = Order[tradeDetails[8]].tradeTotal.sub(((tradeDetails[1].mul(Order[tradeDetails[8]].price)).div(Order[tradeDetails[8]]._decimal)))

IRs:
REF_198(uint256) -> tradeDetails[8]
REF_199(StableDEX.orders) -> Order[REF_198]
REF_200(uint256) -> REF_199.tradeTotal
REF_201(uint256) -> tradeDetails[8]
REF_202(StableDEX.orders) -> Order[REF_201]
REF_203(uint256) -> REF_202.tradeTotal
REF_205(uint256) -> tradeDetails[1]
REF_207(uint256) -> tradeDetails[8]
REF_208(StableDEX.orders) -> Order[REF_207]
REF_209(uint256) -> REF_208.price
TMP_253(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_205', 'REF_209'] 
REF_211(uint256) -> tradeDetails[8]
REF_212(StableDEX.orders) -> Order[REF_211]
REF_213(uint256) -> REF_212._decimal
TMP_254(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_253', 'REF_213'] 
TMP_255(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_203', 'TMP_254'] 
REF_200 (->Order) := TMP_255(uint256)"];
35->36;
36[label="Node Type: IF 36

EXPRESSION:
tradeDetails[6] == 1 || tradeDetails[6] == 3

IRs:
REF_214(uint256) -> tradeDetails[6]
TMP_256(bool) = REF_214 == 1
REF_215(uint256) -> tradeDetails[6]
TMP_257(bool) = REF_215 == 3
TMP_258(bool) = TMP_256 || TMP_257
CONDITION TMP_258"];
36->37[label="True"];
36->40[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress] = userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[1])

IRs:
REF_216(StableDEX.orders) -> Order[orderiD]
REF_217(address) -> REF_216.userAddress
REF_218(mapping(address => uint256)) -> userDetails[REF_217]
REF_219(uint256) -> tradeDetails[8]
REF_220(StableDEX.orders) -> Order[REF_219]
REF_221(address) -> REF_220.tokenAddress
REF_222(uint256) -> REF_218[REF_221]
REF_223(StableDEX.orders) -> Order[orderiD]
REF_224(address) -> REF_223.userAddress
REF_225(mapping(address => uint256)) -> userDetails[REF_224]
REF_226(uint256) -> tradeDetails[8]
REF_227(StableDEX.orders) -> Order[REF_226]
REF_228(address) -> REF_227.tokenAddress
REF_229(uint256) -> REF_225[REF_228]
REF_231(uint256) -> tradeDetails[1]
TMP_259(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_229', 'REF_231'] 
REF_222 (->userDetails) := TMP_259(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
userDetails[Order[orderiD].userAddress][traderAddresses[0]] = userDetails[Order[orderiD].userAddress][traderAddresses[0]].sub(tradeDetails[4])

IRs:
REF_232(StableDEX.orders) -> Order[orderiD]
REF_233(address) -> REF_232.userAddress
REF_234(mapping(address => uint256)) -> userDetails[REF_233]
REF_235(address) -> traderAddresses[0]
REF_236(uint256) -> REF_234[REF_235]
REF_237(StableDEX.orders) -> Order[orderiD]
REF_238(address) -> REF_237.userAddress
REF_239(mapping(address => uint256)) -> userDetails[REF_238]
REF_240(address) -> traderAddresses[0]
REF_241(uint256) -> REF_239[REF_240]
REF_243(uint256) -> tradeDetails[4]
TMP_260(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_241', 'REF_243'] 
REF_236 (->userDetails) := TMP_260(uint256)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
feeAmount[admin][traderAddresses[0]] = feeAmount[admin][traderAddresses[0]].add(tradeDetails[4])

IRs:
REF_244(mapping(address => uint256)) -> feeAmount[admin]
REF_245(address) -> traderAddresses[0]
REF_246(uint256) -> REF_244[REF_245]
REF_247(mapping(address => uint256)) -> feeAmount[admin]
REF_248(address) -> traderAddresses[0]
REF_249(uint256) -> REF_247[REF_248]
REF_251(uint256) -> tradeDetails[4]
TMP_261(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_249', 'REF_251'] 
REF_246 (->feeAmount) := TMP_261(uint256)"];
39->42;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress] = userDetails[Order[orderiD].userAddress][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[1].sub(tradeDetails[4]))

IRs:
REF_252(StableDEX.orders) -> Order[orderiD]
REF_253(address) -> REF_252.userAddress
REF_254(mapping(address => uint256)) -> userDetails[REF_253]
REF_255(uint256) -> tradeDetails[8]
REF_256(StableDEX.orders) -> Order[REF_255]
REF_257(address) -> REF_256.tokenAddress
REF_258(uint256) -> REF_254[REF_257]
REF_259(StableDEX.orders) -> Order[orderiD]
REF_260(address) -> REF_259.userAddress
REF_261(mapping(address => uint256)) -> userDetails[REF_260]
REF_262(uint256) -> tradeDetails[8]
REF_263(StableDEX.orders) -> Order[REF_262]
REF_264(address) -> REF_263.tokenAddress
REF_265(uint256) -> REF_261[REF_264]
REF_267(uint256) -> tradeDetails[1]
REF_269(uint256) -> tradeDetails[4]
TMP_262(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_267', 'REF_269'] 
TMP_263(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_265', 'TMP_262'] 
REF_258 (->userDetails) := TMP_263(uint256)"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
feeAmount[admin][Order[tradeDetails[8]].tokenAddress] = feeAmount[admin][Order[tradeDetails[8]].tokenAddress].add(tradeDetails[4])

IRs:
REF_270(mapping(address => uint256)) -> feeAmount[admin]
REF_271(uint256) -> tradeDetails[8]
REF_272(StableDEX.orders) -> Order[REF_271]
REF_273(address) -> REF_272.tokenAddress
REF_274(uint256) -> REF_270[REF_273]
REF_275(mapping(address => uint256)) -> feeAmount[admin]
REF_276(uint256) -> tradeDetails[8]
REF_277(StableDEX.orders) -> Order[REF_276]
REF_278(address) -> REF_277.tokenAddress
REF_279(uint256) -> REF_275[REF_278]
REF_281(uint256) -> tradeDetails[4]
TMP_264(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_279', 'REF_281'] 
REF_274 (->feeAmount) := TMP_264(uint256)"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: IF 43

EXPRESSION:
tradeDetails[6] == 2 || tradeDetails[6] == 3

IRs:
REF_282(uint256) -> tradeDetails[6]
TMP_265(bool) = REF_282 == 2
REF_283(uint256) -> tradeDetails[6]
TMP_266(bool) = REF_283 == 3
TMP_267(bool) = TMP_265 || TMP_266
CONDITION TMP_267"];
43->44[label="True"];
43->47[label="False"];
44[label="Node Type: EXPRESSION 44

EXPRESSION:
userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress] = userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[3])

IRs:
REF_284(uint256) -> tradeDetails[8]
REF_285(StableDEX.orders) -> Order[REF_284]
REF_286(address) -> REF_285.userAddress
REF_287(mapping(address => uint256)) -> userDetails[REF_286]
REF_288(StableDEX.orders) -> Order[orderiD]
REF_289(address) -> REF_288.tokenAddress
REF_290(uint256) -> REF_287[REF_289]
REF_291(uint256) -> tradeDetails[8]
REF_292(StableDEX.orders) -> Order[REF_291]
REF_293(address) -> REF_292.userAddress
REF_294(mapping(address => uint256)) -> userDetails[REF_293]
REF_295(StableDEX.orders) -> Order[orderiD]
REF_296(address) -> REF_295.tokenAddress
REF_297(uint256) -> REF_294[REF_296]
REF_299(uint256) -> tradeDetails[3]
TMP_268(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_297', 'REF_299'] 
REF_290 (->userDetails) := TMP_268(uint256)"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
userDetails[Order[tradeDetails[8]].userAddress][traderAddresses[0]] = userDetails[Order[tradeDetails[8]].userAddress][traderAddresses[0]].sub(tradeDetails[5])

IRs:
REF_300(uint256) -> tradeDetails[8]
REF_301(StableDEX.orders) -> Order[REF_300]
REF_302(address) -> REF_301.userAddress
REF_303(mapping(address => uint256)) -> userDetails[REF_302]
REF_304(address) -> traderAddresses[0]
REF_305(uint256) -> REF_303[REF_304]
REF_306(uint256) -> tradeDetails[8]
REF_307(StableDEX.orders) -> Order[REF_306]
REF_308(address) -> REF_307.userAddress
REF_309(mapping(address => uint256)) -> userDetails[REF_308]
REF_310(address) -> traderAddresses[0]
REF_311(uint256) -> REF_309[REF_310]
REF_313(uint256) -> tradeDetails[5]
TMP_269(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_311', 'REF_313'] 
REF_305 (->userDetails) := TMP_269(uint256)"];
45->46;
46[label="Node Type: EXPRESSION 46

EXPRESSION:
feeAmount[admin][traderAddresses[0]] = feeAmount[admin][traderAddresses[0]].add(tradeDetails[5])

IRs:
REF_314(mapping(address => uint256)) -> feeAmount[admin]
REF_315(address) -> traderAddresses[0]
REF_316(uint256) -> REF_314[REF_315]
REF_317(mapping(address => uint256)) -> feeAmount[admin]
REF_318(address) -> traderAddresses[0]
REF_319(uint256) -> REF_317[REF_318]
REF_321(uint256) -> tradeDetails[5]
TMP_270(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_319', 'REF_321'] 
REF_316 (->feeAmount) := TMP_270(uint256)"];
46->49;
47[label="Node Type: EXPRESSION 47

EXPRESSION:
userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress] = userDetails[Order[tradeDetails[8]].userAddress][Order[orderiD].tokenAddress].add(tradeDetails[3].sub(tradeDetails[5]))

IRs:
REF_322(uint256) -> tradeDetails[8]
REF_323(StableDEX.orders) -> Order[REF_322]
REF_324(address) -> REF_323.userAddress
REF_325(mapping(address => uint256)) -> userDetails[REF_324]
REF_326(StableDEX.orders) -> Order[orderiD]
REF_327(address) -> REF_326.tokenAddress
REF_328(uint256) -> REF_325[REF_327]
REF_329(uint256) -> tradeDetails[8]
REF_330(StableDEX.orders) -> Order[REF_329]
REF_331(address) -> REF_330.userAddress
REF_332(mapping(address => uint256)) -> userDetails[REF_331]
REF_333(StableDEX.orders) -> Order[orderiD]
REF_334(address) -> REF_333.tokenAddress
REF_335(uint256) -> REF_332[REF_334]
REF_337(uint256) -> tradeDetails[3]
REF_339(uint256) -> tradeDetails[5]
TMP_271(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_337', 'REF_339'] 
TMP_272(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_335', 'TMP_271'] 
REF_328 (->userDetails) := TMP_272(uint256)"];
47->48;
48[label="Node Type: EXPRESSION 48

EXPRESSION:
feeAmount[admin][Order[orderiD].tokenAddress] = feeAmount[admin][Order[orderiD].tokenAddress].add(tradeDetails[5])

IRs:
REF_340(mapping(address => uint256)) -> feeAmount[admin]
REF_341(StableDEX.orders) -> Order[orderiD]
REF_342(address) -> REF_341.tokenAddress
REF_343(uint256) -> REF_340[REF_342]
REF_344(mapping(address => uint256)) -> feeAmount[admin]
REF_345(StableDEX.orders) -> Order[orderiD]
REF_346(address) -> REF_345.tokenAddress
REF_347(uint256) -> REF_344[REF_346]
REF_349(uint256) -> tradeDetails[5]
TMP_273(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_347', 'REF_349'] 
REF_343 (->feeAmount) := TMP_273(uint256)"];
48->49;
49[label="Node Type: END_IF 49
"];
49->50;
50[label="Node Type: IF 50

EXPRESSION:
Order[tradeDetails[8]].tradeAmount == 0

IRs:
REF_350(uint256) -> tradeDetails[8]
REF_351(StableDEX.orders) -> Order[REF_350]
REF_352(uint256) -> REF_351.tradeAmount
TMP_274(bool) = REF_352 == 0
CONDITION TMP_274"];
50->51[label="True"];
50->52[label="False"];
51[label="Node Type: EXPRESSION 51

EXPRESSION:
Order[tradeDetails[8]].status = 2

IRs:
REF_353(uint256) -> tradeDetails[8]
REF_354(StableDEX.orders) -> Order[REF_353]
REF_355(uint256) -> REF_354.status
REF_355 (->Order) := 2(uint256)"];
51->52;
52[label="Node Type: END_IF 52
"];
52->53;
53[label="Node Type: IF 53

EXPRESSION:
Order[orderiD].tradeAmount == 0

IRs:
REF_356(StableDEX.orders) -> Order[orderiD]
REF_357(uint256) -> REF_356.tradeAmount
TMP_275(bool) = REF_357 == 0
CONDITION TMP_275"];
53->54[label="True"];
53->55[label="False"];
54[label="Node Type: EXPRESSION 54

EXPRESSION:
Order[orderiD].status = 2

IRs:
REF_358(StableDEX.orders) -> Order[orderiD]
REF_359(uint256) -> REF_358.status
REF_359 (->Order) := 2(uint256)"];
54->55;
55[label="Node Type: END_IF 55
"];
55->56;
56[label="Node Type: EXPRESSION 56

EXPRESSION:
orderPairStatus[orderiD][tradeDetails[8]] = true

IRs:
REF_360(mapping(uint256 => bool)) -> orderPairStatus[orderiD]
REF_361(uint256) -> tradeDetails[8]
REF_362(bool) -> REF_360[REF_361]
REF_362 (->orderPairStatus) := True(bool)"];
56->57;
57[label="Node Type: END_IF 57
"];
57->58;
58[label="Node Type: RETURN 58

EXPRESSION:
true

IRs:
RETURN True"];
59[label="Node Type: EXPRESSION 59

EXPRESSION:
dexstatuscheck()

IRs:
MODIFIER_CALL, StableDEX.dexstatuscheck()()"];
59->1;
}
