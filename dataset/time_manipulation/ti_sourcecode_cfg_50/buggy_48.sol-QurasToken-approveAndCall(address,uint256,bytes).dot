digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][spender] = tokens

IRs:
REF_61(mapping(address => uint256)) -> allowed[msg.sender]
REF_62(uint256) -> REF_61[spender]
REF_62 (->allowed) := tokens(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,spender,tokens)

IRs:
Emit Approval(msg.sender.spender.tokens)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ApproveAndCallFallBack(spender).receiveApproval(msg.sender,tokens,address(this),data)

IRs:
TMP_195 = CONVERT spender to ApproveAndCallFallBack
TMP_196 = CONVERT this to address
HIGH_LEVEL_CALL, dest:TMP_195(ApproveAndCallFallBack), function:receiveApproval, arguments:['msg.sender', 'tokens', 'TMP_196', 'data']  "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
