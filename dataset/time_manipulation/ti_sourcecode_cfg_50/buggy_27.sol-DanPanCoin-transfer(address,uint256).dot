digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(value <= _balances[msg.sender])

IRs:
REF_22(uint256) -> _balances[msg.sender]
TMP_142(bool) = value <= REF_22
TMP_143(None) = SOLIDITY_CALL require(bool)(TMP_142)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(to != address(0))

IRs:
TMP_144 = CONVERT 0 to address
TMP_145(bool) = to != TMP_144
TMP_146(None) = SOLIDITY_CALL require(bool)(TMP_145)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
value == 0

IRs:
TMP_147(bool) = value == 0
CONDITION TMP_147"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,to,0)

IRs:
Emit Transfer(msg.sender.to.0)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
tokensToTransfer = value

IRs:
tokensToTransfer(uint256) := value(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
tokensToBurn = 0

IRs:
tokensToBurn(uint256) := 0(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
tokensToDanPan = 0

IRs:
tokensToDanPan(uint256) := 0(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_balances[msg.sender] = _balances[msg.sender].sub(value)

IRs:
REF_23(uint256) -> _balances[msg.sender]
REF_24(uint256) -> _balances[msg.sender]
TMP_149(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_24', 'value'] 
REF_23 (->_balances) := TMP_149(uint256)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
! _isWhitelisted(msg.sender,to)

IRs:
TMP_150(bool) = INTERNAL_CALL, DanPanCoin._isWhitelisted(address,address)(msg.sender,to)
TMP_151 = ! TMP_150 
CONDITION TMP_151"];
11->12[label="True"];
11->19[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
tokensToBurn = findOnePercent(value)

IRs:
TMP_152(uint256) = INTERNAL_CALL, DanPanCoin.findOnePercent(uint256)(value)
tokensToBurn(uint256) := TMP_152(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
tokensToDanPan = findDPPercent(value)

IRs:
TMP_153(uint256) = INTERNAL_CALL, DanPanCoin.findDPPercent(uint256)(value)
tokensToDanPan(uint256) := TMP_153(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDanPan)

IRs:
TMP_154(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['value', 'tokensToBurn'] 
TMP_155(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_154', 'tokensToDanPan'] 
tokensToTransfer(uint256) := TMP_155(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_totalSupply = _totalSupply.sub(tokensToBurn)

IRs:
TMP_156(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_totalSupply', 'tokensToBurn'] 
_totalSupply(uint256) := TMP_156(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
Transfer(msg.sender,address(0),tokensToBurn)

IRs:
TMP_157 = CONVERT 0 to address
Emit Transfer(msg.sender.TMP_157.tokensToBurn)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_balances[DanPanAddress] = _balances[DanPanAddress].add(tokensToDanPan)

IRs:
REF_29(uint256) -> _balances[DanPanAddress]
REF_30(uint256) -> _balances[DanPanAddress]
TMP_159(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_30', 'tokensToDanPan'] 
REF_29 (->_balances) := TMP_159(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
Transfer(msg.sender,DanPanAddress,tokensToDanPan)

IRs:
Emit Transfer(msg.sender.DanPanAddress.tokensToDanPan)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
assert(bool)(tokensToBurn.add(tokensToTransfer).add(tokensToDanPan) == value)

IRs:
TMP_161(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['tokensToBurn', 'tokensToTransfer'] 
TMP_162(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_161', 'tokensToDanPan'] 
TMP_163(bool) = TMP_162 == value
TMP_164(None) = SOLIDITY_CALL assert(bool)(TMP_163)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_balances[to] = _balances[to].add(tokensToTransfer)

IRs:
REF_34(uint256) -> _balances[to]
REF_35(uint256) -> _balances[to]
TMP_165(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_35', 'tokensToTransfer'] 
REF_34 (->_balances) := TMP_165(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
Transfer(msg.sender,to,tokensToTransfer)

IRs:
Emit Transfer(msg.sender.to.tokensToTransfer)"];
22->23;
23[label="Node Type: RETURN 23

EXPRESSION:
true

IRs:
RETURN True"];
}
