digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gameList[_fixtureId].timestamp = _timestamp

IRs:
REF_22(WhiteBetting.GameInfo) -> gameList[_fixtureId]
REF_23(uint256) -> REF_22.timestamp
REF_23 (->gameList) := _timestamp(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
gameList[_fixtureId].odd_homeTeam = _odd_homeTeam

IRs:
REF_24(WhiteBetting.GameInfo) -> gameList[_fixtureId]
REF_25(uint32) -> REF_24.odd_homeTeam
REF_25 (->gameList) := _odd_homeTeam(uint32)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
gameList[_fixtureId].odd_drawTeam = _odd_drawTeam

IRs:
REF_26(WhiteBetting.GameInfo) -> gameList[_fixtureId]
REF_27(uint32) -> REF_26.odd_drawTeam
REF_27 (->gameList) := _odd_drawTeam(uint32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
gameList[_fixtureId].odd_awayTeam = _odd_awayTeam

IRs:
REF_28(WhiteBetting.GameInfo) -> gameList[_fixtureId]
REF_29(uint32) -> REF_28.odd_awayTeam
REF_29 (->gameList) := _odd_awayTeam(uint32)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
gameList[_fixtureId].odd_over = _odd_over

IRs:
REF_30(WhiteBetting.GameInfo) -> gameList[_fixtureId]
REF_31(uint32) -> REF_30.odd_over
REF_31 (->gameList) := _odd_over(uint32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
gameList[_fixtureId].odd_under = _odd_under

IRs:
REF_32(WhiteBetting.GameInfo) -> gameList[_fixtureId]
REF_33(uint32) -> REF_32.odd_under
REF_33 (->gameList) := _odd_under(uint32)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
gameList[_fixtureId].odd_homeTeamAndDraw = _odd_homeTeamAndDraw

IRs:
REF_34(WhiteBetting.GameInfo) -> gameList[_fixtureId]
REF_35(uint32) -> REF_34.odd_homeTeamAndDraw
REF_35 (->gameList) := _odd_homeTeamAndDraw(uint32)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
gameList[_fixtureId].odd_homeAndAwayTeam = _odd_homeAndAwayTeam

IRs:
REF_36(WhiteBetting.GameInfo) -> gameList[_fixtureId]
REF_37(uint32) -> REF_36.odd_homeAndAwayTeam
REF_37 (->gameList) := _odd_homeAndAwayTeam(uint32)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
gameList[_fixtureId].odd_awayTeamAndDraw = _odd_awayTeamAndDraw

IRs:
REF_38(WhiteBetting.GameInfo) -> gameList[_fixtureId]
REF_39(uint32) -> REF_38.odd_awayTeamAndDraw
REF_39 (->gameList) := _odd_awayTeamAndDraw(uint32)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
gameList[_fixtureId].open_status = _open_status

IRs:
REF_40(WhiteBetting.GameInfo) -> gameList[_fixtureId]
REF_41(uint8) -> REF_40.open_status
REF_41 (->gameList) := _open_status(uint8)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
gameList[_fixtureId].isDone = false

IRs:
REF_42(WhiteBetting.GameInfo) -> gameList[_fixtureId]
REF_43(bool) -> REF_42.isDone
REF_43 (->gameList) := False(bool)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
SetGame(_fixtureId,_timestamp,_odd_homeTeam,_odd_drawTeam,_odd_awayTeam,_odd_over,_odd_under,_odd_homeTeamAndDraw,_odd_homeAndAwayTeam,_odd_awayTeamAndDraw,_open_status)

IRs:
Emit SetGame(_fixtureId._timestamp._odd_homeTeam._odd_drawTeam._odd_awayTeam._odd_over._odd_under._odd_homeTeamAndDraw._odd_homeAndAwayTeam._odd_awayTeamAndDraw._open_status)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, WhiteBetting.onlyOwner()()"];
13->1;
}
