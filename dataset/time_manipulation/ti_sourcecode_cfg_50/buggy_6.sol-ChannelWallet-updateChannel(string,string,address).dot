digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(bytes(from).length > 0)

IRs:
TMP_219 = CONVERT from to bytes
REF_23 -> LENGTH TMP_219
TMP_220(bool) = REF_23 > 0
TMP_221(None) = SOLIDITY_CALL require(bool)(TMP_220)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(bytes(to).length > 0)

IRs:
TMP_222 = CONVERT to to bytes
REF_24 -> LENGTH TMP_222
TMP_223(bool) = REF_24 > 0
TMP_224(None) = SOLIDITY_CALL require(bool)(TMP_223)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(addressMap[to] == address(0))

IRs:
REF_25(address) -> addressMap[to]
TMP_225 = CONVERT 0 to address
TMP_226(bool) = REF_25 == TMP_225
TMP_227(None) = SOLIDITY_CALL require(bool)(TMP_226)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
addressMap[to] = _address

IRs:
REF_26(address) -> addressMap[to]
REF_26 (->addressMap) := _address(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
addressMap[from] = address(0)

IRs:
REF_27(address) -> addressMap[from]
TMP_228 = CONVERT 0 to address
REF_27 (->addressMap) := TMP_228(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
UpdateAddress(from,to)

IRs:
Emit UpdateAddress(from.to)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyMaster()

IRs:
MODIFIER_CALL, Ownable.onlyMaster()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyWhenNotStopped()

IRs:
MODIFIER_CALL, Ownable.onlyWhenNotStopped()()"];
8->1;
}
