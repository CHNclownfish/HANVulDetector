digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value == (bet * 1000000000000000))

IRs:
TMP_85(uint256) = bet * 1000000000000000
TMP_86(bool) = msg.value == TMP_85
TMP_87(None) = SOLIDITY_CALL require(bool)(TMP_86)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
guesses[DOWN].guesses_number ++

IRs:
REF_21(StockBet.Guess) -> guesses[DOWN]
REF_22(uint256) -> REF_21.guesses_number
TMP_88(uint256) := REF_22(uint256)
REF_22(-> guesses) = REF_22 + 1"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
guesses[DOWN].players[msg.sender] = PaidStatus.NOT_PAID

IRs:
REF_23(StockBet.Guess) -> guesses[DOWN]
REF_24(mapping(address => StockBet.PaidStatus)) -> REF_23.players
REF_25(StockBet.PaidStatus) -> REF_24[msg.sender]
REF_26(StockBet.PaidStatus) -> PaidStatus.NOT_PAID
REF_25 (->guesses) := REF_26(StockBet.PaidStatus)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
PlayerBet(msg.sender,DOWN)

IRs:
Emit PlayerBet(msg.sender.DOWN)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
byPlayer()

IRs:
MODIFIER_CALL, StockBet.byPlayer()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
inState(State.OPEN)

IRs:
REF_27(StockBet.State) -> State.OPEN
MODIFIER_CALL, StockBet.inState(StockBet.State)(REF_27)"];
6->1;
}
