digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(source.length == 34,length of source must be 34)

IRs:
REF_23 -> LENGTH source
TMP_99(bool) = REF_23 == 34
TMP_100(None) = SOLIDITY_CALL require(bool,string)(TMP_99,length of source must be 34)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
hashFunction = uint8(source[0])

IRs:
REF_24(None) -> source[0]
TMP_101 = CONVERT REF_24 to uint8
hashFunction(uint8) := TMP_101(uint8)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
digestSize = uint8(source[1])

IRs:
REF_25(None) -> source[1]
TMP_102 = CONVERT REF_25 to uint8
digestSize(uint8) := TMP_102(uint8)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: INLINE ASM 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(MultiHash(hashFunction,digestSize,hash))

IRs:
TMP_103 = new MultiHash(hashFunction,digestSize,hash)
RETURN TMP_103"];
}
