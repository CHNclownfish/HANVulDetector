digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(sender != address(0),ERC20: transfer from the zero address)

IRs:
TMP_84 = CONVERT 0 to address
TMP_85(bool) = sender != TMP_84
TMP_86(None) = SOLIDITY_CALL require(bool,string)(TMP_85,ERC20: transfer from the zero address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(recipient != address(0),ERC20: transfer to the zero address)

IRs:
TMP_87 = CONVERT 0 to address
TMP_88(bool) = recipient != TMP_87
TMP_89(None) = SOLIDITY_CALL require(bool,string)(TMP_88,ERC20: transfer to the zero address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
senderTimeElasped = now - (_balances[sender].time)

IRs:
REF_12(LollypopToken.transferMapping) -> _balances[sender]
REF_13(uint256) -> REF_12.time
TMP_90(uint256) = now - REF_13
senderTimeElasped(uint256) := TMP_90(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
recipientTimeElasped = now - (_balances[recipient].time)

IRs:
REF_14(LollypopToken.transferMapping) -> _balances[recipient]
REF_15(uint256) -> REF_14.time
TMP_91(uint256) = now - REF_15
recipientTimeElasped(uint256) := TMP_91(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
senderTimeElasped >= minAgeOfToken && (_totalSupply < _maxTotalSupply)

IRs:
TMP_92(bool) = senderTimeElasped >= minAgeOfToken
TMP_93(bool) = _totalSupply < _maxTotalSupply
TMP_94(bool) = TMP_92 && TMP_93
CONDITION TMP_94"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
bonus = calculateBonus(senderTimeElasped,balanceOf(sender))

IRs:
TMP_95(uint256) = INTERNAL_CALL, LollypopToken.balanceOf(address)(sender)
TMP_96(uint256) = INTERNAL_CALL, LollypopToken.calculateBonus(uint256,uint256)(senderTimeElasped,TMP_95)
bonus(uint256) := TMP_96(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
mint(sender,bonus)

IRs:
INTERNAL_CALL, LollypopToken.mint(address,uint256)(sender,bonus)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
recipientTimeElasped >= minAgeOfToken && (_totalSupply < _maxTotalSupply) && sender != recipient

IRs:
TMP_98(bool) = recipientTimeElasped >= minAgeOfToken
TMP_99(bool) = _totalSupply < _maxTotalSupply
TMP_100(bool) = TMP_98 && TMP_99
TMP_101(bool) = sender != recipient
TMP_102(bool) = TMP_100 && TMP_101
CONDITION TMP_102"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
bonus_scope_0 = calculateBonus(recipientTimeElasped,balanceOf(recipient))

IRs:
TMP_103(uint256) = INTERNAL_CALL, LollypopToken.balanceOf(address)(recipient)
TMP_104(uint256) = INTERNAL_CALL, LollypopToken.calculateBonus(uint256,uint256)(recipientTimeElasped,TMP_103)
bonus_scope_0(uint256) := TMP_104(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
mint(recipient,bonus_scope_0)

IRs:
INTERNAL_CALL, LollypopToken.mint(address,uint256)(recipient,bonus_scope_0)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_balances[sender].amount = _balances[sender].amount.sub(amount)

IRs:
REF_16(LollypopToken.transferMapping) -> _balances[sender]
REF_17(uint256) -> REF_16.amount
REF_18(LollypopToken.transferMapping) -> _balances[sender]
REF_19(uint256) -> REF_18.amount
TMP_106(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_19', 'amount'] 
REF_17 (->_balances) := TMP_106(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_balances[recipient].amount = _balances[recipient].amount.add(amount)

IRs:
REF_21(LollypopToken.transferMapping) -> _balances[recipient]
REF_22(uint256) -> REF_21.amount
REF_23(LollypopToken.transferMapping) -> _balances[recipient]
REF_24(uint256) -> REF_23.amount
TMP_107(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_24', 'amount'] 
REF_22 (->_balances) := TMP_107(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_balances[sender].time = now

IRs:
REF_26(LollypopToken.transferMapping) -> _balances[sender]
REF_27(uint256) -> REF_26.time
REF_27 (->_balances) := now(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_balances[recipient].time = now

IRs:
REF_28(LollypopToken.transferMapping) -> _balances[recipient]
REF_29(uint256) -> REF_28.time
REF_29 (->_balances) := now(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
Transfer(sender,recipient,amount)

IRs:
Emit Transfer(sender.recipient.amount)"];
}
