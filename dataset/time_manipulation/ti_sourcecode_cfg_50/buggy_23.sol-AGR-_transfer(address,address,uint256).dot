digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(to != address(0))

IRs:
TMP_298 = CONVERT 0 to address
TMP_299(bool) = to != TMP_298
TMP_300(None) = SOLIDITY_CALL require(bool)(TMP_299)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_balances[from] = _balances[from].sub(value)

IRs:
REF_98(uint256) -> _balances[from]
REF_99(uint256) -> _balances[from]
TMP_301(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_99', 'value'] 
REF_98 (->_balances) := TMP_301(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_balances[to] = _balances[to].add(value)

IRs:
REF_101(uint256) -> _balances[to]
REF_102(uint256) -> _balances[to]
TMP_302(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_102', 'value'] 
REF_101 (->_balances) := TMP_302(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(from,to,value)

IRs:
Emit Transfer(from.to.value)"];
}
