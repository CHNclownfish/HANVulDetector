digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(freezeOf[msg.sender] >= _value)

IRs:
REF_41(uint256) -> freezeOf[msg.sender]
TMP_89(bool) = REF_41 >= _value
TMP_90(None) = SOLIDITY_CALL require(bool)(TMP_89)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_91(bool) = _value > 0
TMP_92(None) = SOLIDITY_CALL require(bool)(TMP_91)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender],_value)

IRs:
REF_42(uint256) -> freezeOf[msg.sender]
REF_44(uint256) -> freezeOf[msg.sender]
TMP_93(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_44,_value)
REF_42 (->freezeOf) := TMP_93(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender],_value)

IRs:
REF_45(uint256) -> balanceOf[msg.sender]
REF_47(uint256) -> balanceOf[msg.sender]
TMP_94(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_47,_value)
REF_45 (->balanceOf) := TMP_94(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Unfreeze(msg.sender,_value)

IRs:
Emit Unfreeze(msg.sender._value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
