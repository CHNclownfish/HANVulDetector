digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue)

IRs:
REF_110(mapping(address => uint256)) -> allowed[msg.sender]
REF_111(uint256) -> REF_110[_spender]
REF_112(mapping(address => uint256)) -> allowed[msg.sender]
REF_113(uint256) -> REF_112[_spender]
TMP_164(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_113', '_addedValue'] 
REF_111 (->allowed) := TMP_164(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_115(mapping(address => uint256)) -> allowed[msg.sender]
REF_116(uint256) -> REF_115[_spender]
Emit Approval(msg.sender._spender.REF_116)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
