digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceOf[msg.sender] >= _value)

IRs:
REF_29(uint256) -> balanceOf[msg.sender]
TMP_75(bool) = REF_29 >= _value
TMP_76(None) = SOLIDITY_CALL require(bool)(TMP_75)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_77(bool) = _value > 0
TMP_78(None) = SOLIDITY_CALL require(bool)(TMP_77)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender],_value)

IRs:
REF_30(uint256) -> balanceOf[msg.sender]
REF_32(uint256) -> balanceOf[msg.sender]
TMP_79(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_32,_value)
REF_30 (->balanceOf) := TMP_79(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply = SafeMath.safeSub(totalSupply,_value)

IRs:
TMP_80(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(totalSupply,_value)
totalSupply(uint256) := TMP_80(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Burn(msg.sender,_value)

IRs:
Emit Burn(msg.sender._value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
