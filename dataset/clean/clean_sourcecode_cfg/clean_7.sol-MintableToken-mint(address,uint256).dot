digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = totalSupply.plus(amount)

IRs:
TMP_208(uint256) = LIBRARY_CALL, dest:SafeMathLib, function:SafeMathLib.plus(uint256,uint256), arguments:['totalSupply', 'amount'] 
totalSupply(uint256) := TMP_208(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[receiver] = balances[receiver].plus(amount)

IRs:
REF_72(uint256) -> balances[receiver]
REF_73(uint256) -> balances[receiver]
TMP_209(uint256) = LIBRARY_CALL, dest:SafeMathLib, function:SafeMathLib.plus(uint256,uint256), arguments:['REF_73', 'amount'] 
REF_72 (->balances) := TMP_209(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(0,receiver,amount)

IRs:
Emit Transfer(0.receiver.amount)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyMintAgent()

IRs:
MODIFIER_CALL, MintableToken.onlyMintAgent()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, MintableToken.canMint()()"];
5->1;
}
