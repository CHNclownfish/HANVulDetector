digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
filled[orderHash] = safeAdd(orderTakerAssetFilledAmount,fillResults.takerAssetFilledAmount)

IRs:
REF_692(uint256) -> filled[orderHash]
REF_693(uint256) -> fillResults.takerAssetFilledAmount
TMP_993(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(orderTakerAssetFilledAmount,REF_693)
REF_692 (->filled) := TMP_993(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Fill(order.makerAddress,order.feeRecipientAddress,takerAddress,msg.sender,fillResults.makerAssetFilledAmount,fillResults.takerAssetFilledAmount,fillResults.makerFeePaid,fillResults.takerFeePaid,orderHash,order.makerAssetData,order.takerAssetData)

IRs:
REF_694(address) -> order.makerAddress
REF_695(address) -> order.feeRecipientAddress
REF_696(uint256) -> fillResults.makerAssetFilledAmount
REF_697(uint256) -> fillResults.takerAssetFilledAmount
REF_698(uint256) -> fillResults.makerFeePaid
REF_699(uint256) -> fillResults.takerFeePaid
REF_700(bytes) -> order.makerAssetData
REF_701(bytes) -> order.takerAssetData
Emit Fill(REF_694.REF_695.takerAddress.msg.sender.REF_696.REF_697.REF_698.REF_699.orderHash.REF_700.REF_701)"];
}
