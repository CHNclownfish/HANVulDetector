digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_46 = CONVERT 0 to address
TMP_47(bool) = _to != TMP_46
TMP_48(None) = SOLIDITY_CALL require(bool)(TMP_47)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_49(bool) = _value > 0
TMP_50(None) = SOLIDITY_CALL require(bool)(TMP_49)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(unFreezeStartDate < now,not unfrozen yet)

IRs:
TMP_51(bool) = unFreezeStartDate < now
TMP_52(None) = SOLIDITY_CALL require(bool,string)(TMP_51,not unfrozen yet)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)((getUnfrozenAmount(msg.sender).sub(withdrawnBalances[msg.sender])) >= _value)

IRs:
TMP_53(uint256) = INTERNAL_CALL, Keeper.getUnfrozenAmount(address)(msg.sender)
REF_7(uint256) -> withdrawnBalances[msg.sender]
TMP_54(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_53', 'REF_7'] 
TMP_55(bool) = TMP_54 >= _value
TMP_56(None) = SOLIDITY_CALL require(bool)(TMP_55)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
withdrawnBalances[msg.sender] = withdrawnBalances[msg.sender].add(_value)

IRs:
REF_8(uint256) -> withdrawnBalances[msg.sender]
REF_9(uint256) -> withdrawnBalances[msg.sender]
TMP_57(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_9', '_value'] 
REF_8 (->withdrawnBalances) := TMP_57(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
totalBalance = totalBalance.sub(_value)

IRs:
TMP_58(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalBalance', '_value'] 
totalBalance(uint256) := TMP_58(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
token.transfer(_to,_value)

IRs:
TMP_59(bool) = HIGH_LEVEL_CALL, dest:token(IERC20), function:transfer, arguments:['_to', '_value']  "];
}
