digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
makerAssetData = orders[0].makerAssetData

IRs:
REF_251(LibOrder.Order) -> orders[0]
REF_252(bytes) -> REF_251.makerAssetData
makerAssetData(bytes) := REF_252(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
ordersLength = orders.length

IRs:
REF_253 -> LENGTH orders
ordersLength(uint256) := REF_253(uint256)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->16;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i != ordersLength

IRs:
TMP_525(bool) = i != ordersLength
CONDITION TMP_525"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
orders[i].makerAssetData = makerAssetData

IRs:
REF_254(LibOrder.Order) -> orders[i]
REF_255(bytes) -> REF_254.makerAssetData
REF_255 (->orders) := makerAssetData(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
remainingMakerAssetFillAmount = safeSub(makerAssetFillAmount,totalFillResults.makerAssetFilledAmount)

IRs:
REF_256(uint256) -> totalFillResults.makerAssetFilledAmount
TMP_526(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(makerAssetFillAmount,REF_256)
remainingMakerAssetFillAmount(uint256) := TMP_526(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
remainingTakerAssetFillAmount = getPartialAmountFloor(orders[i].takerAssetAmount,orders[i].makerAssetAmount,remainingMakerAssetFillAmount)

IRs:
REF_257(LibOrder.Order) -> orders[i]
REF_258(uint256) -> REF_257.takerAssetAmount
REF_259(LibOrder.Order) -> orders[i]
REF_260(uint256) -> REF_259.makerAssetAmount
TMP_527(uint256) = INTERNAL_CALL, LibMath.getPartialAmountFloor(uint256,uint256,uint256)(REF_258,REF_260,remainingMakerAssetFillAmount)
remainingTakerAssetFillAmount(uint256) := TMP_527(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
singleFillResults = fillOrderNoThrow(orders[i],remainingTakerAssetFillAmount,signatures[i])

IRs:
REF_261(LibOrder.Order) -> orders[i]
REF_262(bytes) -> signatures[i]
TMP_528(LibFillResults.FillResults) = INTERNAL_CALL, MixinWrapperFunctions.fillOrderNoThrow(LibOrder.Order,uint256,bytes)(REF_261,remainingTakerAssetFillAmount,REF_262)
singleFillResults(LibFillResults.FillResults) := TMP_528(LibFillResults.FillResults)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
addFillResults(totalFillResults,singleFillResults)

IRs:
INTERNAL_CALL, LibFillResults.addFillResults(LibFillResults.FillResults,LibFillResults.FillResults)(totalFillResults,singleFillResults)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
totalFillResults.makerAssetFilledAmount >= makerAssetFillAmount

IRs:
REF_263(uint256) -> totalFillResults.makerAssetFilledAmount
TMP_530(bool) = REF_263 >= makerAssetFillAmount
CONDITION TMP_530"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: BREAK 13
"];
13->4;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
i ++

IRs:
TMP_531(uint256) := i(uint256)
i(uint256) = i + 1"];
15->6;
16[label="Node Type: RETURN 16

EXPRESSION:
totalFillResults

IRs:
RETURN totalFillResults"];
}
