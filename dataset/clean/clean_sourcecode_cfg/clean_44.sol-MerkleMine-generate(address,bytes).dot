digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->19;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
leaf = keccak256()(_recipient)

IRs:
TMP_37(bytes32) = SOLIDITY_CALL keccak256()(_recipient)
leaf(bytes32) := TMP_37(bytes32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(MerkleProof.verifyProof(_merkleProof,genesisRoot,leaf))

IRs:
TMP_38(bool) = LIBRARY_CALL, dest:MerkleProof, function:MerkleProof.verifyProof(bytes,bytes32,bytes32), arguments:['_merkleProof', 'genesisRoot', 'leaf'] 
TMP_39(None) = SOLIDITY_CALL require(bool)(TMP_38)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
generated[_recipient] = true

IRs:
REF_6(bool) -> generated[_recipient]
REF_6 (->generated) := True(bool)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
caller = msg.sender

IRs:
caller(address) := msg.sender(address)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
caller == _recipient

IRs:
TMP_40(bool) = caller == _recipient
CONDITION TMP_40"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(token.transfer(_recipient,tokensPerAllocation))

IRs:
TMP_41(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transfer, arguments:['_recipient', 'tokensPerAllocation']  
TMP_42(None) = SOLIDITY_CALL require(bool)(TMP_41)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Generate(_recipient,_recipient,tokensPerAllocation,0,block.number)

IRs:
Emit Generate(_recipient._recipient.tokensPerAllocation.0.block.number)"];
7->18;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(block.number >= callerAllocationStartBlock)

IRs:
TMP_44(bool) = block.number >= callerAllocationStartBlock
TMP_45(None) = SOLIDITY_CALL require(bool)(TMP_44)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
callerTokenAmount = callerTokenAmountAtBlock(block.number)

IRs:
TMP_46(uint256) = INTERNAL_CALL, MerkleMine.callerTokenAmountAtBlock(uint256)(block.number)
callerTokenAmount(uint256) := TMP_46(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
recipientTokenAmount = tokensPerAllocation.sub(callerTokenAmount)

IRs:
TMP_47(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['tokensPerAllocation', 'callerTokenAmount'] 
recipientTokenAmount(uint256) := TMP_47(uint256)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
callerTokenAmount > 0

IRs:
TMP_48(bool) = callerTokenAmount > 0
CONDITION TMP_48"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
require(bool)(token.transfer(caller,callerTokenAmount))

IRs:
TMP_49(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transfer, arguments:['caller', 'callerTokenAmount']  
TMP_50(None) = SOLIDITY_CALL require(bool)(TMP_49)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
recipientTokenAmount > 0

IRs:
TMP_51(bool) = recipientTokenAmount > 0
CONDITION TMP_51"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
require(bool)(token.transfer(_recipient,recipientTokenAmount))

IRs:
TMP_52(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transfer, arguments:['_recipient', 'recipientTokenAmount']  
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
Generate(_recipient,caller,recipientTokenAmount,callerTokenAmount,block.number)

IRs:
Emit Generate(_recipient.caller.recipientTokenAmount.callerTokenAmount.block.number)"];
17->18;
18[label="Node Type: END_IF 18
"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
isStarted()

IRs:
MODIFIER_CALL, MerkleMine.isStarted()()"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
notGenerated(_recipient)

IRs:
MODIFIER_CALL, MerkleMine.notGenerated(address)(_recipient)"];
20->1;
}
