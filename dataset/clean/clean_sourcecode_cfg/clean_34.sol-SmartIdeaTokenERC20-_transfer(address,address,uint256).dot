digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != 0x0)

IRs:
TMP_3(bool) = _to != 0
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_1(uint256) -> balanceOf[_from]
TMP_5(bool) = REF_1 >= _value
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balanceOf[_to] + _value > balanceOf[_to])

IRs:
REF_2(uint256) -> balanceOf[_to]
TMP_7(uint256) = REF_2 + _value
REF_3(uint256) -> balanceOf[_to]
TMP_8(bool) = TMP_7 > REF_3
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
previousBalances = balanceOf[_from] + balanceOf[_to]

IRs:
REF_4(uint256) -> balanceOf[_from]
REF_5(uint256) -> balanceOf[_to]
TMP_10(uint256) = REF_4 + REF_5
previousBalances(uint256) := TMP_10(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balanceOf[_from] -= _value

IRs:
REF_6(uint256) -> balanceOf[_from]
REF_6(-> balanceOf) = REF_6 - _value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balanceOf[_to] += _value

IRs:
REF_7(uint256) -> balanceOf[_to]
REF_7(-> balanceOf) = REF_7 + _value"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from._to._value)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
assert(bool)(balanceOf[_from] + balanceOf[_to] == previousBalances)

IRs:
REF_8(uint256) -> balanceOf[_from]
REF_9(uint256) -> balanceOf[_to]
TMP_12(uint256) = REF_8 + REF_9
TMP_13(bool) = TMP_12 == previousBalances
TMP_14(None) = SOLIDITY_CALL assert(bool)(TMP_13)"];
}
