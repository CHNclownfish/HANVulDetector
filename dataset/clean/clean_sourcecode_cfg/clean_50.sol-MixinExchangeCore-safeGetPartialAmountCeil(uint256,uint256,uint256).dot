digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(denominator > 0,DIVISION_BY_ZERO)

IRs:
TMP_239(bool) = denominator > 0
TMP_240(None) = SOLIDITY_CALL require(bool,string)(TMP_239,DIVISION_BY_ZERO)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(! isRoundingErrorCeil(numerator,denominator,target),ROUNDING_ERROR)

IRs:
TMP_241(bool) = INTERNAL_CALL, LibMath.isRoundingErrorCeil(uint256,uint256,uint256)(numerator,denominator,target)
TMP_242 = ! TMP_241 
TMP_243(None) = SOLIDITY_CALL require(bool,string)(TMP_242,ROUNDING_ERROR)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
partialAmount = safeDiv(safeAdd(safeMul(numerator,target),safeSub(denominator,1)),denominator)

IRs:
TMP_244(uint256) = INTERNAL_CALL, SafeMath.safeMul(uint256,uint256)(numerator,target)
TMP_245(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(denominator,1)
TMP_246(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(TMP_244,TMP_245)
TMP_247(uint256) = INTERNAL_CALL, SafeMath.safeDiv(uint256,uint256)(TMP_246,denominator)
partialAmount(uint256) := TMP_247(uint256)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
partialAmount

IRs:
RETURN partialAmount"];
}
