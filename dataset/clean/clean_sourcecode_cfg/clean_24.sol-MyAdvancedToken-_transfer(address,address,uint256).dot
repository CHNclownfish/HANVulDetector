digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != 0x0)

IRs:
TMP_67(bool) = _to != 0
TMP_68(None) = SOLIDITY_CALL require(bool)(TMP_67)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_50(uint256) -> balanceOf[_from]
TMP_69(bool) = REF_50 >= _value
TMP_70(None) = SOLIDITY_CALL require(bool)(TMP_69)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balanceOf[_to] + _value >= balanceOf[_to])

IRs:
REF_51(uint256) -> balanceOf[_to]
TMP_71(uint256) = REF_51 + _value
REF_52(uint256) -> balanceOf[_to]
TMP_72(bool) = TMP_71 >= REF_52
TMP_73(None) = SOLIDITY_CALL require(bool)(TMP_72)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(! frozenAccount[_from])

IRs:
REF_53(bool) -> frozenAccount[_from]
TMP_74 = ! REF_53 
TMP_75(None) = SOLIDITY_CALL require(bool)(TMP_74)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(! frozenAccount[_to])

IRs:
REF_54(bool) -> frozenAccount[_to]
TMP_76 = ! REF_54 
TMP_77(None) = SOLIDITY_CALL require(bool)(TMP_76)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balanceOf[_from] -= _value

IRs:
REF_55(uint256) -> balanceOf[_from]
REF_55(-> balanceOf) = REF_55 - _value"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balanceOf[_to] += _value

IRs:
REF_56(uint256) -> balanceOf[_to]
REF_56(-> balanceOf) = REF_56 + _value"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from._to._value)"];
}
