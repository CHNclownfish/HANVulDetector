digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
holderId = holderIndex[_holder]

IRs:
REF_65(uint256) -> holderIndex[_holder]
holderId(uint256) := REF_65(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
holderId == 0

IRs:
TMP_102(bool) = holderId == 0
CONDITION TMP_102"];
2->3[label="True"];
2->6[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
holderId = ++ holdersCount

IRs:
holdersCount(uint256) = holdersCount + 1
holderId(uint256) := holdersCount(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
holders[holderId].addr = _holder

IRs:
REF_66(EToken2.Holder) -> holders[holderId]
REF_67(address) -> REF_66.addr
REF_67 (->holders) := _holder(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
holderIndex[_holder] = holderId

IRs:
REF_68(uint256) -> holderIndex[_holder]
REF_68 (->holderIndex) := holderId(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
holderId

IRs:
RETURN holderId"];
}
