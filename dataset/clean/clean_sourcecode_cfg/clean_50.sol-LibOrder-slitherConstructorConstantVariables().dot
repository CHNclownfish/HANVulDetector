digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
EIP191_HEADER = 

IRs:
EIP191_HEADER(string) := (string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
EIP712_DOMAIN_NAME = 0x Protocol

IRs:
EIP712_DOMAIN_NAME(string) := 0x Protocol(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
EIP712_DOMAIN_VERSION = 2

IRs:
EIP712_DOMAIN_VERSION(string) := 2(string)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256()(abi.encodePacked(EIP712Domain(,string name,,string version,,address verifyingContract,)))

IRs:
TMP_189(bytes) = SOLIDITY_CALL abi.encodePacked()(EIP712Domain(,string name,,string version,,address verifyingContract,))
TMP_190(bytes32) = SOLIDITY_CALL keccak256()(TMP_189)
EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH(bytes32) := TMP_190(bytes32)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
EIP712_ORDER_SCHEMA_HASH = keccak256()(abi.encodePacked(Order(,address makerAddress,,address takerAddress,,address feeRecipientAddress,,address senderAddress,,uint256 makerAssetAmount,,uint256 takerAssetAmount,,uint256 makerFee,,uint256 takerFee,,uint256 expirationTimeSeconds,,uint256 salt,,bytes makerAssetData,,bytes takerAssetData,)))

IRs:
TMP_191(bytes) = SOLIDITY_CALL abi.encodePacked()(Order(,address makerAddress,,address takerAddress,,address feeRecipientAddress,,address senderAddress,,uint256 makerAssetAmount,,uint256 takerAssetAmount,,uint256 makerFee,,uint256 takerFee,,uint256 expirationTimeSeconds,,uint256 salt,,bytes makerAssetData,,bytes takerAssetData,))
TMP_192(bytes32) = SOLIDITY_CALL keccak256()(TMP_191)
EIP712_ORDER_SCHEMA_HASH(bytes32) := TMP_192(bytes32)"];
}
