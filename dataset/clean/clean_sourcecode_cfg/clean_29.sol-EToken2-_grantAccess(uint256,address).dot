digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: IF 1

EXPRESSION:
getHolderId(_to) != 0

IRs:
TMP_188(uint256) = INTERNAL_CALL, EToken2.getHolderId(address)(_to)
TMP_189(bool) = TMP_188 != 0
CONDITION TMP_189"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_error(Should recover to new address)

IRs:
INTERNAL_CALL, EToken2._error(bytes32)(Should recover to new address)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
from = holders[_fromId].addr

IRs:
REF_124(EToken2.Holder) -> holders[_fromId]
REF_125(address) -> REF_124.addr
from(address) := REF_125(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
holders[_fromId].addr = _to

IRs:
REF_126(EToken2.Holder) -> holders[_fromId]
REF_127(address) -> REF_126.addr
REF_127 (->holders) := _to(address)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
holderIndex[_to] = _fromId

IRs:
REF_128(uint256) -> holderIndex[_to]
REF_128 (->holderIndex) := _fromId(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
eventsHistory.emitRecovery(from,_to,msg.sender)

IRs:
HIGH_LEVEL_CALL, dest:eventsHistory(Emitter), function:emitRecovery, arguments:['from', '_to', 'msg.sender']  "];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
checkSigned(_fromId,2)

IRs:
MODIFIER_CALL, EToken2.checkSigned(uint256,uint256)(_fromId,2)"];
10->1;
}
