digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
assetProxyContract = IAssetProxy(assetProxy)

IRs:
TMP_579 = CONVERT assetProxy to IAssetProxy
assetProxyContract(IAssetProxy) := TMP_579(IAssetProxy)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
assetProxyId = assetProxyContract.getProxyId()

IRs:
TMP_580(bytes4) = HIGH_LEVEL_CALL, dest:assetProxyContract(IAssetProxy), function:getProxyId, arguments:[]  
assetProxyId(bytes4) := TMP_580(bytes4)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
currentAssetProxy = assetProxies[assetProxyId]

IRs:
REF_277(IAssetProxy) -> assetProxies[assetProxyId]
currentAssetProxy(address) := REF_277(IAssetProxy)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(currentAssetProxy == address(0),ASSET_PROXY_ALREADY_EXISTS)

IRs:
TMP_581 = CONVERT 0 to address
TMP_582(bool) = currentAssetProxy == TMP_581
TMP_583(None) = SOLIDITY_CALL require(bool,string)(TMP_582,ASSET_PROXY_ALREADY_EXISTS)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assetProxies[assetProxyId] = assetProxyContract

IRs:
REF_278(IAssetProxy) -> assetProxies[assetProxyId]
REF_278 (->assetProxies) := assetProxyContract(IAssetProxy)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
AssetProxyRegistered(assetProxyId,assetProxy)

IRs:
Emit AssetProxyRegistered(assetProxyId.assetProxy)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
7->1;
}
