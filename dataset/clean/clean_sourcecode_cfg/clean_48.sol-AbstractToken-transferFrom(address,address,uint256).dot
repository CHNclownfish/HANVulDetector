digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
allowances[_from][msg.sender] < _value

IRs:
REF_6(mapping(address => uint256)) -> allowances[_from]
REF_7(uint256) -> REF_6[msg.sender]
TMP_31(bool) = REF_7 < _value
CONDITION TMP_31"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
accounts[_from] < _value

IRs:
REF_8(uint256) -> accounts[_from]
TMP_32(bool) = REF_8 < _value
CONDITION TMP_32"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
allowances[_from][msg.sender] = safeSub(allowances[_from][msg.sender],_value)

IRs:
REF_9(mapping(address => uint256)) -> allowances[_from]
REF_10(uint256) -> REF_9[msg.sender]
REF_11(mapping(address => uint256)) -> allowances[_from]
REF_12(uint256) -> REF_11[msg.sender]
TMP_33(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_12,_value)
REF_10 (->allowances) := TMP_33(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_value > 0 && _from != _to

IRs:
TMP_34(bool) = _value > 0
TMP_35(bool) = _from != _to
TMP_36(bool) = TMP_34 && TMP_35
CONDITION TMP_36"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
accounts[_from] = safeSub(accounts[_from],_value)

IRs:
REF_13(uint256) -> accounts[_from]
REF_14(uint256) -> accounts[_from]
TMP_37(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_14,_value)
REF_13 (->accounts) := TMP_37(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
accounts[_to] = safeAdd(accounts[_to],_value)

IRs:
REF_15(uint256) -> accounts[_to]
REF_16(uint256) -> accounts[_to]
TMP_38(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_16,_value)
REF_15 (->accounts) := TMP_38(uint256)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from._to._value)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
true

IRs:
RETURN True"];
}
