digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(amount <= _allowed[account][msg.sender])

IRs:
REF_49(mapping(address => uint256)) -> _allowed[account]
REF_50(uint256) -> REF_49[msg.sender]
TMP_64(bool) = amount <= REF_50
TMP_65(None) = SOLIDITY_CALL require(bool)(TMP_64)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount)

IRs:
REF_51(mapping(address => uint256)) -> _allowed[account]
REF_52(uint256) -> REF_51[msg.sender]
REF_53(mapping(address => uint256)) -> _allowed[account]
REF_54(uint256) -> REF_53[msg.sender]
TMP_66(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_54', 'amount'] 
REF_52 (->_allowed) := TMP_66(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_burn(account,amount)

IRs:
INTERNAL_CALL, ERC20._burn(address,uint256)(account,amount)"];
}
