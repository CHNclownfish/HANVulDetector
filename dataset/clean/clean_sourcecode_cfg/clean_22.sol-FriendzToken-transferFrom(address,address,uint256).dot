digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_from != address(0))

IRs:
TMP_127 = CONVERT 0 to address
TMP_128(bool) = _from != TMP_127
TMP_129(None) = SOLIDITY_CALL require(bool)(TMP_128)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_130 = CONVERT 0 to address
TMP_131(bool) = _to != TMP_130
TMP_132(None) = SOLIDITY_CALL require(bool)(TMP_131)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_54(uint256) -> balances[_from]
REF_55(uint256) -> balances[_from]
TMP_133(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_55', '_value'] 
REF_54 (->balances) := TMP_133(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_57(uint256) -> balances[_to]
REF_58(uint256) -> balances[_to]
TMP_134(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_58', '_value'] 
REF_57 (->balances) := TMP_134(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_60(mapping(address => uint256)) -> allowed[_from]
REF_61(uint256) -> REF_60[msg.sender]
REF_62(mapping(address => uint256)) -> allowed[_from]
REF_63(uint256) -> REF_62[msg.sender]
TMP_135(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_63', '_value'] 
REF_61 (->allowed) := TMP_135(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from._to._value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
canTransfer(_from,_value)

IRs:
MODIFIER_CALL, FriendzToken.canTransfer(address,uint256)(_from,_value)"];
8->1;
}
