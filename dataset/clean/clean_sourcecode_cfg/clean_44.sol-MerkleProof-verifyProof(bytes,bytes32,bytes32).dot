digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_proof.length % 32 != 0

IRs:
REF_0 -> LENGTH _proof
TMP_12(uint256) = REF_0 % 32
TMP_13(bool) = TMP_12 != 0
CONDITION TMP_13"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
computedHash = _leaf

IRs:
computedHash(bytes32) := _leaf(bytes32)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->16;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 32

IRs:
i(uint256) := 32(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i <= _proof.length

IRs:
REF_1 -> LENGTH _proof
TMP_14(bool) = i <= REF_1
CONDITION TMP_14"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: INLINE ASM 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
computedHash < proofElement

IRs:
TMP_15(bool) = computedHash < proofElement
CONDITION TMP_15"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
computedHash = keccak256()(computedHash,proofElement)

IRs:
TMP_16(bytes32) = SOLIDITY_CALL keccak256()(computedHash,proofElement)
computedHash(bytes32) := TMP_16(bytes32)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
computedHash = keccak256()(proofElement,computedHash)

IRs:
TMP_17(bytes32) = SOLIDITY_CALL keccak256()(proofElement,computedHash)
computedHash(bytes32) := TMP_17(bytes32)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
i += 32

IRs:
i(uint256) = i + 32"];
15->9;
16[label="Node Type: RETURN 16

EXPRESSION:
computedHash == _root

IRs:
TMP_18(bool) = computedHash == _root
RETURN TMP_18"];
}
