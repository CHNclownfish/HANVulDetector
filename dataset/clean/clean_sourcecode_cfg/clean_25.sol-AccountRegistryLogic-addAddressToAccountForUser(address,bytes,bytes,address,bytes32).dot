digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(! usedSignatures[keccak256()(abi.encodePacked(_newAddressSig))],Signature not unique)

IRs:
TMP_45(bytes) = SOLIDITY_CALL abi.encodePacked()(_newAddressSig)
TMP_46(bytes32) = SOLIDITY_CALL keccak256()(TMP_45)
REF_11(bool) -> usedSignatures[TMP_46]
TMP_47 = ! REF_11 
TMP_48(None) = SOLIDITY_CALL require(bool,string)(TMP_47,Signature not unique)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(! usedSignatures[keccak256()(abi.encodePacked(_senderSig))],Signature not unique)

IRs:
TMP_49(bytes) = SOLIDITY_CALL abi.encodePacked()(_senderSig)
TMP_50(bytes32) = SOLIDITY_CALL keccak256()(TMP_49)
REF_13(bool) -> usedSignatures[TMP_50]
TMP_51 = ! REF_13 
TMP_52(None) = SOLIDITY_CALL require(bool,string)(TMP_51,Signature not unique)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
usedSignatures[keccak256()(abi.encodePacked(_newAddressSig))] = true

IRs:
TMP_53(bytes) = SOLIDITY_CALL abi.encodePacked()(_newAddressSig)
TMP_54(bytes32) = SOLIDITY_CALL keccak256()(TMP_53)
REF_15(bool) -> usedSignatures[TMP_54]
REF_15 (->usedSignatures) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
usedSignatures[keccak256()(abi.encodePacked(_senderSig))] = true

IRs:
TMP_55(bytes) = SOLIDITY_CALL abi.encodePacked()(_senderSig)
TMP_56(bytes32) = SOLIDITY_CALL keccak256()(TMP_55)
REF_17(bool) -> usedSignatures[TMP_56]
REF_17 (->usedSignatures) := True(bool)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_currentAddressDigest = signingLogic.generateAddAddressSchemaHash(_newAddress,_nonce)

IRs:
TMP_57(bytes32) = HIGH_LEVEL_CALL, dest:signingLogic(SigningLogicInterface), function:generateAddAddressSchemaHash, arguments:['_newAddress', '_nonce']  
_currentAddressDigest(bytes32) := TMP_57(bytes32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(_sender == signingLogic.recoverSigner(_currentAddressDigest,_senderSig))

IRs:
TMP_58(address) = HIGH_LEVEL_CALL, dest:signingLogic(SigningLogicInterface), function:recoverSigner, arguments:['_currentAddressDigest', '_senderSig']  
TMP_59(bool) = _sender == TMP_58
TMP_60(None) = SOLIDITY_CALL require(bool)(TMP_59)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_newAddressDigest = signingLogic.generateAddAddressSchemaHash(_sender,_nonce)

IRs:
TMP_61(bytes32) = HIGH_LEVEL_CALL, dest:signingLogic(SigningLogicInterface), function:generateAddAddressSchemaHash, arguments:['_sender', '_nonce']  
_newAddressDigest(bytes32) := TMP_61(bytes32)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
require(bool)(_newAddress == signingLogic.recoverSigner(_newAddressDigest,_newAddressSig))

IRs:
TMP_62(address) = HIGH_LEVEL_CALL, dest:signingLogic(SigningLogicInterface), function:recoverSigner, arguments:['_newAddressDigest', '_newAddressSig']  
TMP_63(bool) = _newAddress == TMP_62
TMP_64(None) = SOLIDITY_CALL require(bool)(TMP_63)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
registry.addAddressToAccount(_newAddress,_sender)

IRs:
HIGH_LEVEL_CALL, dest:registry(AccountRegistryInterface), function:addAddressToAccount, arguments:['_newAddress', '_sender']  "];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
_accountId = registry.accountIdForAddress(_newAddress)

IRs:
TMP_66(uint256) = HIGH_LEVEL_CALL, dest:registry(AccountRegistryInterface), function:accountIdForAddress, arguments:['_newAddress']  
_accountId(uint256) := TMP_66(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
AddressAdded(_accountId,_newAddress)

IRs:
Emit AddressAdded(_accountId._newAddress)"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
nonZero(_newAddress)

IRs:
MODIFIER_CALL, AccountRegistryLogic.nonZero(address)(_newAddress)"];
12->1;
}
