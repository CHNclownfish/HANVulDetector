digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newNumerator > 0)

IRs:
TMP_132(bool) = newNumerator > 0
TMP_133(None) = SOLIDITY_CALL require(bool)(TMP_132)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require_limited_change(newNumerator)

IRs:
INTERNAL_CALL, C20.require_limited_change(uint256)(newNumerator)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
currentPrice.numerator = newNumerator

IRs:
REF_59(uint256) -> currentPrice.numerator
REF_59 (->currentPrice) := newNumerator(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
prices[previousUpdateTime] = currentPrice

IRs:
REF_60(C20.Price) -> prices[previousUpdateTime]
REF_60 (->prices) := currentPrice(C20.Price)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
previousUpdateTime = now

IRs:
previousUpdateTime(uint256) := now(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
PriceUpdate(newNumerator,currentPrice.denominator)

IRs:
REF_61(uint256) -> currentPrice.denominator
Emit PriceUpdate(newNumerator.REF_61)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyManagingWallets()

IRs:
MODIFIER_CALL, C20.onlyManagingWallets()()"];
7->1;
}
