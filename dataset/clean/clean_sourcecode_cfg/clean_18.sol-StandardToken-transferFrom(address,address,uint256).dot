digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(allowed[_from][msg.sender] >= _value)

IRs:
REF_0(mapping(address => uint256)) -> allowed[_from]
REF_1(uint256) -> REF_0[msg.sender]
TMP_45(bool) = REF_1 >= _value
TMP_46(None) = SOLIDITY_CALL require(bool)(TMP_45)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_2(mapping(address => uint256)) -> allowed[_from]
REF_3(uint256) -> REF_2[msg.sender]
REF_3(-> allowed) = REF_3 - _value"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_transfer(_from,_to,_value)

IRs:
TMP_47(bool) = INTERNAL_CALL, StandardToken._transfer(address,address,uint256)(_from,_to,_value)
RETURN TMP_47"];
}
