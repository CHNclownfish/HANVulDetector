digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(value <= _balances[from])

IRs:
REF_75(uint256) -> _balances[from]
TMP_96(bool) = value <= REF_75
TMP_97(None) = SOLIDITY_CALL require(bool)(TMP_96)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(to != address(0))

IRs:
TMP_98 = CONVERT 0 to address
TMP_99(bool) = to != TMP_98
TMP_100(None) = SOLIDITY_CALL require(bool)(TMP_99)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_balances[from] = _balances[from].sub(value)

IRs:
REF_76(uint256) -> _balances[from]
REF_77(uint256) -> _balances[from]
TMP_101(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_77', 'value'] 
REF_76 (->_balances) := TMP_101(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_balances[to] = _balances[to].add(value)

IRs:
REF_79(uint256) -> _balances[to]
REF_80(uint256) -> _balances[to]
TMP_102(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_80', 'value'] 
REF_79 (->_balances) := TMP_102(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(from,to,value)

IRs:
Emit Transfer(from.to.value)"];
}
