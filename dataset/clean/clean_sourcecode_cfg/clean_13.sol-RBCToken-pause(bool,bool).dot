digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! (newPausedPublic == false && newPausedOwnerAdmin == true))

IRs:
TMP_131(bool) = newPausedPublic == False
TMP_132(bool) = newPausedOwnerAdmin == True
TMP_133(bool) = TMP_131 && TMP_132
TMP_134 = ! TMP_133 
TMP_135(None) = SOLIDITY_CALL require(bool)(TMP_134)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
pausedPublic = newPausedPublic

IRs:
pausedPublic(bool) := newPausedPublic(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pausedOwnerAdmin = newPausedOwnerAdmin

IRs:
pausedOwnerAdmin(bool) := newPausedOwnerAdmin(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
PausePublic(newPausedPublic)

IRs:
Emit PausePublic(newPausedPublic)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
PauseOwnerAdmin(newPausedOwnerAdmin)

IRs:
Emit PauseOwnerAdmin(newPausedOwnerAdmin)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
