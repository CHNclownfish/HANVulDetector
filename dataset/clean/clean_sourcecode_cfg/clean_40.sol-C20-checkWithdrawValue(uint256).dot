digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(amountTokensToWithdraw > 0)

IRs:
TMP_230(bool) = amountTokensToWithdraw > 0
TMP_231(None) = SOLIDITY_CALL require(bool)(TMP_230)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf(msg.sender) >= amountTokensToWithdraw)

IRs:
TMP_232(uint256) = INTERNAL_CALL, StandardToken.balanceOf(address)(msg.sender)
TMP_233(bool) = TMP_232 >= amountTokensToWithdraw
TMP_234(None) = SOLIDITY_CALL require(bool)(TMP_233)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
withdrawValue = safeMul(amountTokensToWithdraw,currentPrice.denominator) / currentPrice.numerator

IRs:
REF_100(uint256) -> currentPrice.denominator
TMP_235(uint256) = INTERNAL_CALL, SafeMath.safeMul(uint256,uint256)(amountTokensToWithdraw,REF_100)
REF_101(uint256) -> currentPrice.numerator
TMP_236(uint256) = TMP_235 / REF_101
withdrawValue(uint256) := TMP_236(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(this.balance >= withdrawValue)

IRs:
REF_102 -> BALANCE this
TMP_237(bool) = REF_102 >= withdrawValue
TMP_238(None) = SOLIDITY_CALL require(bool)(TMP_237)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
withdrawValue

IRs:
RETURN withdrawValue"];
}
