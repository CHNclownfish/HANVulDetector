digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(denominator > 0,DIVISION_BY_ZERO)

IRs:
TMP_804(bool) = denominator > 0
TMP_805(None) = SOLIDITY_CALL require(bool,string)(TMP_804,DIVISION_BY_ZERO)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
target == 0 || numerator == 0

IRs:
TMP_806(bool) = target == 0
TMP_807(bool) = numerator == 0
TMP_808(bool) = TMP_806 || TMP_807
CONDITION TMP_808"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
remainder = mulmod(uint256,uint256,uint256)(target,numerator,denominator)

IRs:
TMP_809(uint256) = SOLIDITY_CALL mulmod(uint256,uint256,uint256)(target,numerator,denominator)
remainder(uint256) := TMP_809(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isError = safeMul(1000,remainder) >= safeMul(numerator,target)

IRs:
TMP_810(uint256) = INTERNAL_CALL, SafeMath.safeMul(uint256,uint256)(1000,remainder)
TMP_811(uint256) = INTERNAL_CALL, SafeMath.safeMul(uint256,uint256)(numerator,target)
TMP_812(bool) = TMP_810 >= TMP_811
isError(bool) := TMP_812(bool)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
isError

IRs:
RETURN isError"];
}
