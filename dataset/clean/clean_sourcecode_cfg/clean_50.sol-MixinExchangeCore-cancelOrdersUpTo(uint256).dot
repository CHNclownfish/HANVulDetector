digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
makerAddress = getCurrentContextAddress()

IRs:
TMP_278(address) = INTERNAL_CALL, MTransactions.getCurrentContextAddress()()
makerAddress(address) := TMP_278(address)"];
1->9;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
newOrderEpoch = targetOrderEpoch + 1

IRs:
TMP_279(uint256) = targetOrderEpoch + 1
newOrderEpoch(uint256) := TMP_279(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
oldOrderEpoch = orderEpoch[makerAddress][senderAddress]

IRs:
REF_62(mapping(address => uint256)) -> orderEpoch[makerAddress]
REF_63(uint256) -> REF_62[senderAddress]
oldOrderEpoch(uint256) := REF_63(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(newOrderEpoch > oldOrderEpoch,INVALID_NEW_ORDER_EPOCH)

IRs:
TMP_280(bool) = newOrderEpoch > oldOrderEpoch
TMP_281(None) = SOLIDITY_CALL require(bool,string)(TMP_280,INVALID_NEW_ORDER_EPOCH)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
orderEpoch[makerAddress][senderAddress] = newOrderEpoch

IRs:
REF_64(mapping(address => uint256)) -> orderEpoch[makerAddress]
REF_65(uint256) -> REF_64[senderAddress]
REF_65 (->orderEpoch) := newOrderEpoch(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
CancelUpTo(makerAddress,senderAddress,newOrderEpoch)

IRs:
Emit CancelUpTo(makerAddress.senderAddress.newOrderEpoch)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
nonReentrant()

IRs:
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()"];
8->1;
9[label="Node Type: IF 9

EXPRESSION:
makerAddress == msg.sender

IRs:
TMP_284(bool) = makerAddress == msg.sender
CONDITION TMP_284"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
senderAddress = address(0)

IRs:
TMP_285 = CONVERT 0 to address
senderAddress(address) := TMP_285(address)"];
10->12;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
senderAddress = msg.sender

IRs:
senderAddress(address) := msg.sender(address)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->3;
}
