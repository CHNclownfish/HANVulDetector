digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(account != address(0),)

IRs:
TMP_22 = CONVERT 0 to address
TMP_23(bool) = account != TMP_22
TMP_24(None) = SOLIDITY_CALL require(bool,string)(TMP_23,)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(! has(role,account),)

IRs:
TMP_25(bool) = INTERNAL_CALL, Roles.has(Roles.Role,address)(role,account)
TMP_26 = ! TMP_25 
TMP_27(None) = SOLIDITY_CALL require(bool,string)(TMP_26,)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
role.bearer[account] = true

IRs:
REF_0(mapping(address => bool)) -> role.bearer
REF_1(bool) -> REF_0[account]
REF_1 (->role) := True(bool)"];
}
