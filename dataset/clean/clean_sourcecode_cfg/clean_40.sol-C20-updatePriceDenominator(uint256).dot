digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(block.number > fundingEndBlock)

IRs:
TMP_145(bool) = block.number > fundingEndBlock
TMP_146(None) = SOLIDITY_CALL require(bool)(TMP_145)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(newDenominator > 0)

IRs:
TMP_147(bool) = newDenominator > 0
TMP_148(None) = SOLIDITY_CALL require(bool)(TMP_147)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
currentPrice.denominator = newDenominator

IRs:
REF_63(uint256) -> currentPrice.denominator
REF_63 (->currentPrice) := newDenominator(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
prices[previousUpdateTime] = currentPrice

IRs:
REF_64(C20.Price) -> prices[previousUpdateTime]
REF_64 (->prices) := currentPrice(C20.Price)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
previousUpdateTime = now

IRs:
previousUpdateTime(uint256) := now(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
PriceUpdate(currentPrice.numerator,newDenominator)

IRs:
REF_65(uint256) -> currentPrice.numerator
Emit PriceUpdate(REF_65.newDenominator)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyFundWallet()

IRs:
MODIFIER_CALL, C20.onlyFundWallet()()"];
7->1;
}
