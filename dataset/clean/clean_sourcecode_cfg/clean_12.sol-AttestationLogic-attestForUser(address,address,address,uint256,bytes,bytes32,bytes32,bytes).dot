digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
validateSubjectSig(_subject,_dataHash,_requestNonce,_subjectSig)

IRs:
INTERNAL_CALL, AttestationLogic.validateSubjectSig(address,bytes32,bytes32,bytes)(_subject,_dataHash,_requestNonce,_subjectSig)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
TraitAttested(_subject,_attester,_requester,_dataHash)

IRs:
Emit TraitAttested(_subject._attester._requester._dataHash)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_reward > 0

IRs:
TMP_330(bool) = _reward > 0
CONDITION TMP_330"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokenEscrowMarketplace.requestTokenPayment(_requester,_attester,_reward,_requestNonce,_requesterSig)

IRs:
HIGH_LEVEL_CALL, dest:tokenEscrowMarketplace(TokenEscrowMarketplace), function:requestTokenPayment, arguments:['_requester', '_attester', '_reward', '_requestNonce', '_requesterSig']  "];
4->5;
5[label="Node Type: END_IF 5
"];
}
