digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
now > unFreezeStartDate

IRs:
TMP_60(bool) = now > unFreezeStartDate
CONDITION TMP_60"];
1->2[label="True"];
1->9[label="False"];
2[label="Node Type: IF 2

EXPRESSION:
now > totalUnFreezeDate

IRs:
TMP_61(bool) = now > totalUnFreezeDate
CONDITION TMP_61"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
balances[_holder]

IRs:
REF_13(uint256) -> balances[_holder]
RETURN REF_13"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
partialFreezePeriodLen = totalUnFreezeDate.sub(unFreezeStartDate)

IRs:
TMP_62(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalUnFreezeDate', 'unFreezeStartDate'] 
partialFreezePeriodLen(uint256) := TMP_62(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
secondsSincePeriodStart = now.sub(unFreezeStartDate)

IRs:
TMP_63(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['now', 'unFreezeStartDate'] 
secondsSincePeriodStart(uint256) := TMP_63(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
amount = balances[_holder].mul(secondsSincePeriodStart).div(partialFreezePeriodLen)

IRs:
REF_16(uint256) -> balances[_holder]
TMP_64(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_16', 'secondsSincePeriodStart'] 
TMP_65(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_64', 'partialFreezePeriodLen'] 
amount(uint256) := TMP_65(uint256)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
amount

IRs:
RETURN amount"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
0

IRs:
RETURN 0"];
}
