digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_blockNumber < callerAllocationStartBlock

IRs:
TMP_57(bool) = _blockNumber < callerAllocationStartBlock
CONDITION TMP_57"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
_blockNumber >= callerAllocationEndBlock

IRs:
TMP_58(bool) = _blockNumber >= callerAllocationEndBlock
CONDITION TMP_58"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
tokensPerAllocation

IRs:
RETURN tokensPerAllocation"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
blocksSinceCallerAllocationStartBlock = _blockNumber.sub(callerAllocationStartBlock)

IRs:
TMP_59(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_blockNumber', 'callerAllocationStartBlock'] 
blocksSinceCallerAllocationStartBlock(uint256) := TMP_59(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
tokensPerAllocation.mul(blocksSinceCallerAllocationStartBlock).div(callerAllocationPeriod)

IRs:
TMP_60(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['tokensPerAllocation', 'blocksSinceCallerAllocationStartBlock'] 
TMP_61(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_60', 'callerAllocationPeriod'] 
RETURN TMP_61"];
}
