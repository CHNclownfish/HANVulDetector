digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = safeSub(balances[msg.sender],tokens)

IRs:
REF_15(uint256) -> balances[msg.sender]
REF_16(uint256) -> balances[msg.sender]
TMP_80(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_16,tokens)
REF_15 (->balances) := TMP_80(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[to] = safeAdd(balances[to],tokens)

IRs:
REF_17(uint256) -> balances[to]
REF_18(uint256) -> balances[to]
TMP_81(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_18,tokens)
REF_17 (->balances) := TMP_81(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(msg.sender,to,tokens)

IRs:
Emit Transfer(msg.sender.to.tokens)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
