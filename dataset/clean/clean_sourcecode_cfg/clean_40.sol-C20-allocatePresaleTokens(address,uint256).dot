digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(block.number < fundingEndBlock)

IRs:
TMP_161(bool) = block.number < fundingEndBlock
TMP_162(None) = SOLIDITY_CALL require(bool)(TMP_161)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(participant != address(0))

IRs:
TMP_163 = CONVERT 0 to address
TMP_164(bool) = participant != TMP_163
TMP_165(None) = SOLIDITY_CALL require(bool)(TMP_164)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whitelist[participant] = true

IRs:
REF_70(bool) -> whitelist[participant]
REF_70 (->whitelist) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
allocateTokens(participant,amountTokens)

IRs:
INTERNAL_CALL, C20.allocateTokens(address,uint256)(participant,amountTokens)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Whitelist(participant)

IRs:
Emit Whitelist(participant)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
AllocatePresale(participant,amountTokens)

IRs:
Emit AllocatePresale(participant.amountTokens)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyFundWallet()

IRs:
MODIFIER_CALL, C20.onlyFundWallet()()"];
7->1;
}
