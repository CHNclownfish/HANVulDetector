digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_beneficiary != address(0))

IRs:
TMP_12 = CONVERT 0 to address
TMP_13(bool) = _beneficiary != TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_15(bool) = _value > 0
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_beneficiary] = balances[_beneficiary].add(_value)

IRs:
REF_0(uint256) -> balances[_beneficiary]
REF_1(uint256) -> balances[_beneficiary]
TMP_17(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_1', '_value'] 
REF_0 (->balances) := TMP_17(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply = totalSupply.add(_value)

IRs:
TMP_18(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply', '_value'] 
totalSupply(uint256) := TMP_18(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Mint(_beneficiary,_value)

IRs:
Emit Mint(_beneficiary._value)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(0x0,_beneficiary,_value)

IRs:
Emit Transfer(0._beneficiary._value)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
icoOnly()

IRs:
MODIFIER_CALL, CosmoCoin.icoOnly()()"];
7->1;
}
