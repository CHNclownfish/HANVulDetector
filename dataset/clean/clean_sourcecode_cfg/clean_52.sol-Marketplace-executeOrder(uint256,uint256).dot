digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->17;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
seller = auctionByAssetId[assetId].seller

IRs:
REF_12(Marketplace.Auction) -> auctionByAssetId[assetId]
REF_13(address) -> REF_12.seller
seller(address) := REF_13(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(seller != address(0))

IRs:
TMP_93 = CONVERT 0 to address
TMP_94(bool) = seller != TMP_93
TMP_95(None) = SOLIDITY_CALL require(bool)(TMP_94)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(seller != msg.sender)

IRs:
TMP_96(bool) = seller != msg.sender
TMP_97(None) = SOLIDITY_CALL require(bool)(TMP_96)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(auctionByAssetId[assetId].price == price)

IRs:
REF_14(Marketplace.Auction) -> auctionByAssetId[assetId]
REF_15(uint256) -> REF_14.price
TMP_98(bool) = REF_15 == price
TMP_99(None) = SOLIDITY_CALL require(bool)(TMP_98)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(now < auctionByAssetId[assetId].expiresAt)

IRs:
REF_16(Marketplace.Auction) -> auctionByAssetId[assetId]
REF_17(uint256) -> REF_16.expiresAt
TMP_100(bool) = now < REF_17
TMP_101(None) = SOLIDITY_CALL require(bool)(TMP_100)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(seller == nonFungibleRegistry.ownerOf(assetId))

IRs:
TMP_102(address) = HIGH_LEVEL_CALL, dest:nonFungibleRegistry(ERC721Interface), function:ownerOf, arguments:['assetId']  
TMP_103(bool) = seller == TMP_102
TMP_104(None) = SOLIDITY_CALL require(bool)(TMP_103)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
saleShareAmount = 0

IRs:
saleShareAmount(uint256) := 0(uint256)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
ownerCutPercentage > 0

IRs:
TMP_105(bool) = ownerCutPercentage > 0
CONDITION TMP_105"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
saleShareAmount = price.mul(ownerCutPercentage).div(100)

IRs:
TMP_106(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['price', 'ownerCutPercentage'] 
TMP_107(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_106', '100'] 
saleShareAmount(uint256) := TMP_107(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
acceptedToken.transferFrom(msg.sender,owner,saleShareAmount)

IRs:
TMP_108(bool) = HIGH_LEVEL_CALL, dest:acceptedToken(ERC20Interface), function:transferFrom, arguments:['msg.sender', 'owner', 'saleShareAmount']  "];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
acceptedToken.transferFrom(msg.sender,seller,price.sub(saleShareAmount))

IRs:
TMP_109(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['price', 'saleShareAmount'] 
TMP_110(bool) = HIGH_LEVEL_CALL, dest:acceptedToken(ERC20Interface), function:transferFrom, arguments:['msg.sender', 'seller', 'TMP_109']  "];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
nonFungibleRegistry.safeTransferFrom(seller,msg.sender,assetId)

IRs:
HIGH_LEVEL_CALL, dest:nonFungibleRegistry(ERC721Interface), function:safeTransferFrom, arguments:['seller', 'msg.sender', 'assetId']  "];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
auctionId = auctionByAssetId[assetId].id

IRs:
REF_25(Marketplace.Auction) -> auctionByAssetId[assetId]
REF_26(bytes32) -> REF_25.id
auctionId(bytes32) := REF_26(bytes32)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
delete auctionByAssetId[assetId]

IRs:
REF_27(Marketplace.Auction) -> auctionByAssetId[assetId]
auctionByAssetId = delete REF_27 "];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
AuctionSuccessful(auctionId,assetId,seller,price,msg.sender)

IRs:
Emit AuctionSuccessful(auctionId.assetId.seller.price.msg.sender)"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
17->1;
}
