digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_amount <= balances[address(this)])

IRs:
TMP_181 = CONVERT this to address
REF_51(uint256) -> balances[TMP_181]
TMP_182(bool) = _amount <= REF_51
TMP_183(None) = SOLIDITY_CALL require(bool)(TMP_182)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_totalsupply = _totalsupply.sub(_amount)

IRs:
TMP_184(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_totalsupply', '_amount'] 
_totalsupply(uint256) := TMP_184(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[address(this)] = balances[address(this)].sub(_amount)

IRs:
TMP_185 = CONVERT this to address
REF_53(uint256) -> balances[TMP_185]
TMP_186 = CONVERT this to address
REF_54(uint256) -> balances[TMP_186]
TMP_187(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_54', '_amount'] 
REF_53 (->balances) := TMP_187(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[0x0] = balances[0x0].add(_amount)

IRs:
REF_56(uint256) -> balances[0]
REF_57(uint256) -> balances[0]
TMP_188(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_57', '_amount'] 
REF_56 (->balances) := TMP_188(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(address(this),0x0,_amount)

IRs:
TMP_189 = CONVERT this to address
Emit Transfer(TMP_189.0._amount)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, SocialActivityToken.onlyOwner()()"];
6->1;
}
