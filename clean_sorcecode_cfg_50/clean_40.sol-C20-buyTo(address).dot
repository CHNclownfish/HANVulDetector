digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! halted)

IRs:
TMP_173 = ! halted 
TMP_174(None) = SOLIDITY_CALL require(bool)(TMP_173)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(participant != address(0))

IRs:
TMP_175 = CONVERT 0 to address
TMP_176(bool) = participant != TMP_175
TMP_177(None) = SOLIDITY_CALL require(bool)(TMP_176)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(msg.value >= minAmount)

IRs:
TMP_178(bool) = msg.value >= minAmount
TMP_179(None) = SOLIDITY_CALL require(bool)(TMP_178)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(block.number >= fundingStartBlock && block.number < fundingEndBlock)

IRs:
TMP_180(bool) = block.number >= fundingStartBlock
TMP_181(bool) = block.number < fundingEndBlock
TMP_182(bool) = TMP_180 && TMP_181
TMP_183(None) = SOLIDITY_CALL require(bool)(TMP_182)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
icoDenominator = icoDenominatorPrice()

IRs:
TMP_184(uint256) = INTERNAL_CALL, C20.icoDenominatorPrice()()
icoDenominator(uint256) := TMP_184(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
tokensToBuy = safeMul(msg.value,currentPrice.numerator) / icoDenominator

IRs:
REF_72(uint256) -> currentPrice.numerator
TMP_185(uint256) = INTERNAL_CALL, SafeMath.safeMul(uint256,uint256)(msg.value,REF_72)
TMP_186(uint256) = TMP_185 / icoDenominator
tokensToBuy(uint256) := TMP_186(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
allocateTokens(participant,tokensToBuy)

IRs:
INTERNAL_CALL, C20.allocateTokens(address,uint256)(participant,tokensToBuy)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
fundWallet.transfer(msg.value)

IRs:
Transfer dest:fundWallet value:msg.value"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Buy(msg.sender,participant,msg.value,tokensToBuy)

IRs:
Emit Buy(msg.sender.participant.msg.value.tokensToBuy)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyWhitelist()

IRs:
MODIFIER_CALL, C20.onlyWhitelist()()"];
10->1;
}
