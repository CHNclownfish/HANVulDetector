digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != 0x0)

IRs:
TMP_46(bool) = _to != 0
TMP_47(None) = SOLIDITY_CALL require(bool)(TMP_46)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value > 0)

IRs:
TMP_48(bool) = _value > 0
TMP_49(None) = SOLIDITY_CALL require(bool)(TMP_48)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balanceOf[msg.sender] >= _value)

IRs:
REF_2(uint256) -> balanceOf[msg.sender]
TMP_50(bool) = REF_2 >= _value
TMP_51(None) = SOLIDITY_CALL require(bool)(TMP_50)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(balanceOf[_to] + _value > balanceOf[_to])

IRs:
REF_3(uint256) -> balanceOf[_to]
TMP_52(uint256) = REF_3 + _value
REF_4(uint256) -> balanceOf[_to]
TMP_53(bool) = TMP_52 > REF_4
TMP_54(None) = SOLIDITY_CALL require(bool)(TMP_53)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender],_value)

IRs:
REF_5(uint256) -> balanceOf[msg.sender]
REF_7(uint256) -> balanceOf[msg.sender]
TMP_55(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_7,_value)
REF_5 (->balanceOf) := TMP_55(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to],_value)

IRs:
REF_8(uint256) -> balanceOf[_to]
REF_10(uint256) -> balanceOf[_to]
TMP_56(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_10,_value)
REF_8 (->balanceOf) := TMP_56(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender._to._value)"];
}
