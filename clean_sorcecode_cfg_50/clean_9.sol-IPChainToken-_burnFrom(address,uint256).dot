digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(amount <= _allowed[account][msg.sender])

IRs:
REF_105(mapping(address => uint256)) -> _allowed[account]
REF_106(uint256) -> REF_105[msg.sender]
TMP_115(bool) = amount <= REF_106
TMP_116(None) = SOLIDITY_CALL require(bool)(TMP_115)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount)

IRs:
REF_107(mapping(address => uint256)) -> _allowed[account]
REF_108(uint256) -> REF_107[msg.sender]
REF_109(mapping(address => uint256)) -> _allowed[account]
REF_110(uint256) -> REF_109[msg.sender]
TMP_117(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_110', 'amount'] 
REF_108 (->_allowed) := TMP_117(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_burn(account,amount)

IRs:
INTERNAL_CALL, ERC20._burn(address,uint256)(account,amount)"];
}
