digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
fromId = _createHolderId(msg.sender)

IRs:
TMP_171(uint256) = INTERNAL_CALL, EToken2._createHolderId(address)(msg.sender)
fromId(uint256) := TMP_171(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
fromId == getHolderId(_to)

IRs:
TMP_172(uint256) = INTERNAL_CALL, EToken2.getHolderId(address)(_to)
TMP_173(bool) = fromId == TMP_172
CONDITION TMP_173"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_error(Cannot trust to oneself)

IRs:
INTERNAL_CALL, EToken2._error(bytes32)(Cannot trust to oneself)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
false

IRs:
RETURN False"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
isTrusted(msg.sender,_to)

IRs:
TMP_175(bool) = INTERNAL_CALL, EToken2.isTrusted(address,address)(msg.sender,_to)
CONDITION TMP_175"];
6->7[label="True"];
6->9[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_error(Already trusted)

IRs:
INTERNAL_CALL, EToken2._error(bytes32)(Already trusted)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
holders[fromId].trust[_to] = true

IRs:
REF_118(EToken2.Holder) -> holders[fromId]
REF_119(mapping(address => bool)) -> REF_118.trust
REF_120(bool) -> REF_119[_to]
REF_120 (->holders) := True(bool)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
true

IRs:
RETURN True"];
}
