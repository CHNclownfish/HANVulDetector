digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_spender != owner

IRs:
TMP_181(bool) = _spender != owner
CONDITION TMP_181"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_96(mapping(address => uint256)) -> allowed[_owner]
REF_97(uint256) -> REF_96[_spender]
RETURN REF_97"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_owner == overdraftAllocation

IRs:
TMP_182(bool) = _owner == overdraftAllocation
CONDITION TMP_182"];
6->7[label="True"];
6->9[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
unlockedTokens = _calculateUnlockedTokens(overdraftCliff,overdraftPeriodLength,overdraftPeriodAmount,overdraftPeriodsNumber,overdraftUnvested)

IRs:
TMP_183(uint256) = INTERNAL_CALL, NexoToken._calculateUnlockedTokens(uint256,uint256,uint256,uint8,uint256)(overdraftCliff,overdraftPeriodLength,overdraftPeriodAmount,overdraftPeriodsNumber,overdraftUnvested)
unlockedTokens(uint256) := TMP_183(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
spentTokens = sub(overdraftTotal,balanceOf(overdraftAllocation))

IRs:
TMP_184(uint256) = INTERNAL_CALL, StandardToken.balanceOf(address)(overdraftAllocation)
TMP_185(uint256) = INTERNAL_CALL, SafeMath.sub(uint256,uint256)(overdraftTotal,TMP_184)
spentTokens(uint256) := TMP_185(uint256)"];
8->22;
9[label="Node Type: IF 9

EXPRESSION:
_owner == teamAllocation

IRs:
TMP_186(bool) = _owner == teamAllocation
CONDITION TMP_186"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
unlockedTokens = _calculateUnlockedTokens(teamCliff,teamPeriodLength,teamPeriodAmount,teamPeriodsNumber,teamUnvested)

IRs:
TMP_187(uint256) = INTERNAL_CALL, NexoToken._calculateUnlockedTokens(uint256,uint256,uint256,uint8,uint256)(teamCliff,teamPeriodLength,teamPeriodAmount,teamPeriodsNumber,teamUnvested)
unlockedTokens(uint256) := TMP_187(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
spentTokens = sub(teamTotal,balanceOf(teamAllocation))

IRs:
TMP_188(uint256) = INTERNAL_CALL, StandardToken.balanceOf(address)(teamAllocation)
TMP_189(uint256) = INTERNAL_CALL, SafeMath.sub(uint256,uint256)(teamTotal,TMP_188)
spentTokens(uint256) := TMP_189(uint256)"];
11->21;
12[label="Node Type: IF 12

EXPRESSION:
_owner == communityAllocation

IRs:
TMP_190(bool) = _owner == communityAllocation
CONDITION TMP_190"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
unlockedTokens = _calculateUnlockedTokens(communityCliff,communityPeriodLength,communityPeriodAmount,communityPeriodsNumber,communityUnvested)

IRs:
TMP_191(uint256) = INTERNAL_CALL, NexoToken._calculateUnlockedTokens(uint256,uint256,uint256,uint8,uint256)(communityCliff,communityPeriodLength,communityPeriodAmount,communityPeriodsNumber,communityUnvested)
unlockedTokens(uint256) := TMP_191(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
spentTokens = sub(communityTotal,balanceOf(communityAllocation))

IRs:
TMP_192(uint256) = INTERNAL_CALL, StandardToken.balanceOf(address)(communityAllocation)
TMP_193(uint256) = INTERNAL_CALL, SafeMath.sub(uint256,uint256)(communityTotal,TMP_192)
spentTokens(uint256) := TMP_193(uint256)"];
14->20;
15[label="Node Type: IF 15

EXPRESSION:
_owner == advisersAllocation

IRs:
TMP_194(bool) = _owner == advisersAllocation
CONDITION TMP_194"];
15->16[label="True"];
15->18[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
unlockedTokens = _calculateUnlockedTokens(advisersCliff,advisersPeriodLength,advisersPeriodAmount,advisersPeriodsNumber,advisersUnvested)

IRs:
TMP_195(uint256) = INTERNAL_CALL, NexoToken._calculateUnlockedTokens(uint256,uint256,uint256,uint8,uint256)(advisersCliff,advisersPeriodLength,advisersPeriodAmount,advisersPeriodsNumber,advisersUnvested)
unlockedTokens(uint256) := TMP_195(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
spentTokens = sub(advisersTotal,balanceOf(advisersAllocation))

IRs:
TMP_196(uint256) = INTERNAL_CALL, StandardToken.balanceOf(address)(advisersAllocation)
TMP_197(uint256) = INTERNAL_CALL, SafeMath.sub(uint256,uint256)(advisersTotal,TMP_196)
spentTokens(uint256) := TMP_197(uint256)"];
17->19;
18[label="Node Type: RETURN 18

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_98(mapping(address => uint256)) -> allowed[_owner]
REF_99(uint256) -> REF_98[_spender]
RETURN REF_99"];
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: RETURN 23

EXPRESSION:
sub(unlockedTokens,spentTokens)

IRs:
TMP_198(uint256) = INTERNAL_CALL, SafeMath.sub(uint256,uint256)(unlockedTokens,spentTokens)
RETURN TMP_198"];
}
