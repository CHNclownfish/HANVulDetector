digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
address(ambi2) != 0x0

IRs:
TMP_8 = CONVERT ambi2 to address
TMP_9(bool) = TMP_8 != 0
CONDITION TMP_9"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! _ambi2.claimFor(this,msg.sender) && ! _ambi2.isOwner(this,msg.sender)

IRs:
TMP_10(bool) = HIGH_LEVEL_CALL, dest:_ambi2(Ambi2), function:claimFor, arguments:['this', 'msg.sender']  
TMP_11 = ! TMP_10 
TMP_12(bool) = HIGH_LEVEL_CALL, dest:_ambi2(Ambi2), function:isOwner, arguments:['this', 'msg.sender']  
TMP_13 = ! TMP_12 
TMP_14(bool) = TMP_11 && TMP_13
CONDITION TMP_14"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
ambi2 = _ambi2

IRs:
ambi2(Ambi2) := _ambi2(Ambi2)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
