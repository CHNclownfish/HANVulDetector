digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(value <= _allowed[account][msg.sender])

IRs:
REF_42(mapping(address => uint256)) -> _allowed[account]
REF_43(uint256) -> REF_42[msg.sender]
TMP_73(bool) = value <= REF_43
TMP_74(None) = SOLIDITY_CALL require(bool)(TMP_73)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value)

IRs:
REF_44(mapping(address => uint256)) -> _allowed[account]
REF_45(uint256) -> REF_44[msg.sender]
REF_46(mapping(address => uint256)) -> _allowed[account]
REF_47(uint256) -> REF_46[msg.sender]
TMP_75(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_47', 'value'] 
REF_45 (->_allowed) := TMP_75(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_burn(account,value)

IRs:
INTERNAL_CALL, ERC20._burn(address,uint256)(account,value)"];
}
