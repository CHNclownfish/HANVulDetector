digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
blocked_amounts[_addr] == 0x0

IRs:
REF_35(uint256) -> blocked_amounts[_addr]
TMP_105(bool) = REF_35 == 0
CONDITION TMP_105"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0x0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
purchase_dates[_addr] > now

IRs:
REF_36(uint256) -> purchase_dates[_addr]
TMP_106(bool) = REF_36 > now
CONDITION TMP_106"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
blocked_amounts[_addr]

IRs:
REF_37(uint256) -> blocked_amounts[_addr]
RETURN REF_37"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
alpha = uint256(now).sub(purchase_dates[_addr])

IRs:
TMP_107 = CONVERT now to uint256
REF_39(uint256) -> purchase_dates[_addr]
TMP_108(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_107', 'REF_39'] 
alpha(uint256) := TMP_108(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
beta = release_dates[_addr].sub(purchase_dates[_addr])

IRs:
REF_40(uint256) -> release_dates[_addr]
REF_42(uint256) -> purchase_dates[_addr]
TMP_109(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_40', 'REF_42'] 
beta(uint256) := TMP_109(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
tokens = blocked_amounts[_addr].sub(alpha.mul(blocked_amounts[_addr]).div(beta))

IRs:
REF_43(uint256) -> blocked_amounts[_addr]
REF_46(uint256) -> blocked_amounts[_addr]
TMP_110(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['alpha', 'REF_46'] 
TMP_111(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_110', 'beta'] 
TMP_112(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_43', 'TMP_111'] 
tokens(uint256) := TMP_112(uint256)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
tokens

IRs:
RETURN tokens"];
}
