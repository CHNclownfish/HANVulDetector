digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(account != address(0))

IRs:
TMP_31 = CONVERT 0 to address
TMP_32(bool) = account != TMP_31
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(has(role,account))

IRs:
TMP_34(bool) = INTERNAL_CALL, Roles.has(Roles.Role,address)(role,account)
TMP_35(None) = SOLIDITY_CALL require(bool)(TMP_34)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
role.bearer[account] = false

IRs:
REF_4(mapping(address => bool)) -> role.bearer
REF_5(bool) -> REF_4[account]
REF_5 (->role) := False(bool)"];
}
