digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
rightOrder.makerAssetData = leftOrder.takerAssetData

IRs:
REF_282(bytes) -> rightOrder.makerAssetData
REF_283(bytes) -> leftOrder.takerAssetData
REF_282 (->rightOrder) := REF_283(bytes)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
rightOrder.takerAssetData = leftOrder.makerAssetData

IRs:
REF_284(bytes) -> rightOrder.takerAssetData
REF_285(bytes) -> leftOrder.makerAssetData
REF_284 (->rightOrder) := REF_285(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
leftOrderInfo = getOrderInfo(leftOrder)

IRs:
TMP_658(LibOrder.OrderInfo) = INTERNAL_CALL, IExchangeCore.getOrderInfo(LibOrder.Order)(leftOrder)
leftOrderInfo(LibOrder.OrderInfo) := TMP_658(LibOrder.OrderInfo)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
rightOrderInfo = getOrderInfo(rightOrder)

IRs:
TMP_659(LibOrder.OrderInfo) = INTERNAL_CALL, IExchangeCore.getOrderInfo(LibOrder.Order)(rightOrder)
rightOrderInfo(LibOrder.OrderInfo) := TMP_659(LibOrder.OrderInfo)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
takerAddress = getCurrentContextAddress()

IRs:
TMP_660(address) = INTERNAL_CALL, MTransactions.getCurrentContextAddress()()
takerAddress(address) := TMP_660(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
assertFillableOrder(leftOrder,leftOrderInfo,takerAddress,leftSignature)

IRs:
INTERNAL_CALL, MExchangeCore.assertFillableOrder(LibOrder.Order,LibOrder.OrderInfo,address,bytes)(leftOrder,leftOrderInfo,takerAddress,leftSignature)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
assertFillableOrder(rightOrder,rightOrderInfo,takerAddress,rightSignature)

IRs:
INTERNAL_CALL, MExchangeCore.assertFillableOrder(LibOrder.Order,LibOrder.OrderInfo,address,bytes)(rightOrder,rightOrderInfo,takerAddress,rightSignature)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
assertValidMatch(leftOrder,rightOrder)

IRs:
INTERNAL_CALL, MixinMatchOrders.assertValidMatch(LibOrder.Order,LibOrder.Order)(leftOrder,rightOrder)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
matchedFillResults = calculateMatchedFillResults(leftOrder,rightOrder,leftOrderInfo.orderTakerAssetFilledAmount,rightOrderInfo.orderTakerAssetFilledAmount)

IRs:
REF_286(uint256) -> leftOrderInfo.orderTakerAssetFilledAmount
REF_287(uint256) -> rightOrderInfo.orderTakerAssetFilledAmount
TMP_664(LibFillResults.MatchedFillResults) = INTERNAL_CALL, MixinMatchOrders.calculateMatchedFillResults(LibOrder.Order,LibOrder.Order,uint256,uint256)(leftOrder,rightOrder,REF_286,REF_287)
matchedFillResults(LibFillResults.MatchedFillResults) := TMP_664(LibFillResults.MatchedFillResults)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
assertValidFill(leftOrder,leftOrderInfo,matchedFillResults.left.takerAssetFilledAmount,matchedFillResults.left.takerAssetFilledAmount,matchedFillResults.left.makerAssetFilledAmount)

IRs:
REF_288(LibFillResults.FillResults) -> matchedFillResults.left
REF_289(uint256) -> REF_288.takerAssetFilledAmount
REF_290(LibFillResults.FillResults) -> matchedFillResults.left
REF_291(uint256) -> REF_290.takerAssetFilledAmount
REF_292(LibFillResults.FillResults) -> matchedFillResults.left
REF_293(uint256) -> REF_292.makerAssetFilledAmount
INTERNAL_CALL, MExchangeCore.assertValidFill(LibOrder.Order,LibOrder.OrderInfo,uint256,uint256,uint256)(leftOrder,leftOrderInfo,REF_289,REF_291,REF_293)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
assertValidFill(rightOrder,rightOrderInfo,matchedFillResults.right.takerAssetFilledAmount,matchedFillResults.right.takerAssetFilledAmount,matchedFillResults.right.makerAssetFilledAmount)

IRs:
REF_294(LibFillResults.FillResults) -> matchedFillResults.right
REF_295(uint256) -> REF_294.takerAssetFilledAmount
REF_296(LibFillResults.FillResults) -> matchedFillResults.right
REF_297(uint256) -> REF_296.takerAssetFilledAmount
REF_298(LibFillResults.FillResults) -> matchedFillResults.right
REF_299(uint256) -> REF_298.makerAssetFilledAmount
INTERNAL_CALL, MExchangeCore.assertValidFill(LibOrder.Order,LibOrder.OrderInfo,uint256,uint256,uint256)(rightOrder,rightOrderInfo,REF_295,REF_297,REF_299)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
updateFilledState(leftOrder,takerAddress,leftOrderInfo.orderHash,leftOrderInfo.orderTakerAssetFilledAmount,matchedFillResults.left)

IRs:
REF_300(bytes32) -> leftOrderInfo.orderHash
REF_301(uint256) -> leftOrderInfo.orderTakerAssetFilledAmount
REF_302(LibFillResults.FillResults) -> matchedFillResults.left
INTERNAL_CALL, MExchangeCore.updateFilledState(LibOrder.Order,address,bytes32,uint256,LibFillResults.FillResults)(leftOrder,takerAddress,REF_300,REF_301,REF_302)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateFilledState(rightOrder,takerAddress,rightOrderInfo.orderHash,rightOrderInfo.orderTakerAssetFilledAmount,matchedFillResults.right)

IRs:
REF_303(bytes32) -> rightOrderInfo.orderHash
REF_304(uint256) -> rightOrderInfo.orderTakerAssetFilledAmount
REF_305(LibFillResults.FillResults) -> matchedFillResults.right
INTERNAL_CALL, MExchangeCore.updateFilledState(LibOrder.Order,address,bytes32,uint256,LibFillResults.FillResults)(rightOrder,takerAddress,REF_303,REF_304,REF_305)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
settleMatchedOrders(leftOrder,rightOrder,takerAddress,matchedFillResults)

IRs:
INTERNAL_CALL, MixinMatchOrders.settleMatchedOrders(LibOrder.Order,LibOrder.Order,address,LibFillResults.MatchedFillResults)(leftOrder,rightOrder,takerAddress,matchedFillResults)"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
matchedFillResults

IRs:
RETURN matchedFillResults"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
nonReentrant()

IRs:
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()"];
16->1;
}
