digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! funding

IRs:
TMP_20 = ! funding 
CONDITION TMP_20"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
block.number < fundingStartBlock

IRs:
TMP_21(bool) = block.number < fundingStartBlock
CONDITION TMP_21"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
block.number > fundingEndBlock

IRs:
TMP_22(bool) = block.number > fundingEndBlock
CONDITION TMP_22"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: THROW 8
"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
msg.value == 0

IRs:
TMP_23(bool) = msg.value == 0
CONDITION TMP_23"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: THROW 11
"];
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
msg.value > (tokenCreationCap - totalTokens) / tokenCreationRate

IRs:
TMP_24(uint256) = tokenCreationCap - totalTokens
TMP_25(uint256) = TMP_24 / tokenCreationRate
TMP_26(bool) = msg.value > TMP_25
CONDITION TMP_26"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: THROW 14
"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
numTokens = msg.value * tokenCreationRate

IRs:
TMP_27(uint256) = msg.value * tokenCreationRate
numTokens(uint256) := TMP_27(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
totalTokens += numTokens

IRs:
totalTokens(uint256) = totalTokens + numTokens"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
balances[msg.sender] += numTokens

IRs:
REF_7(uint256) -> balances[msg.sender]
REF_7(-> balances) = REF_7 + numTokens"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
Transfer(0,msg.sender,numTokens)

IRs:
Emit Transfer(0.msg.sender.numTokens)"];
}
