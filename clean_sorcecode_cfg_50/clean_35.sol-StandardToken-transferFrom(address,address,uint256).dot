digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_from != address(0))

IRs:
TMP_21 = CONVERT 0 to address
TMP_22(bool) = _from != TMP_21
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_24 = CONVERT 0 to address
TMP_25(bool) = _to != TMP_24
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_allowance = allowed[_from][msg.sender]

IRs:
REF_6(mapping(address => uint256)) -> allowed[_from]
REF_7(uint256) -> REF_6[msg.sender]
_allowance(uint256) := REF_7(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_from] = balances[_from].sub(_value)

IRs:
REF_8(uint256) -> balances[_from]
REF_9(uint256) -> balances[_from]
TMP_27(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_9', '_value'] 
REF_8 (->balances) := TMP_27(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = balances[_to].add(_value)

IRs:
REF_11(uint256) -> balances[_to]
REF_12(uint256) -> balances[_to]
TMP_28(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_12', '_value'] 
REF_11 (->balances) := TMP_28(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
allowed[_from][msg.sender] = _allowance.sub(_value)

IRs:
REF_14(mapping(address => uint256)) -> allowed[_from]
REF_15(uint256) -> REF_14[msg.sender]
TMP_29(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_allowance', '_value'] 
REF_15 (->allowed) := TMP_29(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from._to._value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
