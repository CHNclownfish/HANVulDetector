digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(dst != address(0))

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = dst != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_balances[msg.sender] >= wad)

IRs:
REF_1(uint256) -> _balances[msg.sender]
TMP_3(bool) = REF_1 >= wad
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_balances[msg.sender] = sub(_balances[msg.sender],wad)

IRs:
REF_2(uint256) -> _balances[msg.sender]
REF_3(uint256) -> _balances[msg.sender]
TMP_5(uint256) = INTERNAL_CALL, MeetOneTokenBase.sub(uint256,uint256)(REF_3,wad)
REF_2 (->_balances) := TMP_5(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_balances[dst] = add(_balances[dst],wad)

IRs:
REF_4(uint256) -> _balances[dst]
REF_5(uint256) -> _balances[dst]
TMP_6(uint256) = INTERNAL_CALL, MeetOneTokenBase.add(uint256,uint256)(REF_5,wad)
REF_4 (->_balances) := TMP_6(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,dst,wad)

IRs:
Emit Transfer(msg.sender.dst.wad)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
