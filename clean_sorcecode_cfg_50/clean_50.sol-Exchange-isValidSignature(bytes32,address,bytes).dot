digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(signature.length > 0,LENGTH_GREATER_THAN_0_REQUIRED)

IRs:
REF_496 -> LENGTH signature
TMP_874(bool) = REF_496 > 0
TMP_875(None) = SOLIDITY_CALL require(bool,string)(TMP_874,LENGTH_GREATER_THAN_0_REQUIRED)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
signatureTypeRaw = uint8(signature.popLastByte())

IRs:
TMP_876(bytes1) = LIBRARY_CALL, dest:LibBytes, function:LibBytes.popLastByte(bytes), arguments:['signature'] 
TMP_877 = CONVERT TMP_876 to uint8
signatureTypeRaw(uint8) := TMP_877(uint8)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(signatureTypeRaw < uint8(SignatureType.NSignatureTypes),SIGNATURE_UNSUPPORTED)

IRs:
REF_498(MSignatureValidator.SignatureType) -> SignatureType.NSignatureTypes
TMP_878 = CONVERT REF_498 to uint8
TMP_879(bool) = signatureTypeRaw < TMP_878
TMP_880(None) = SOLIDITY_CALL require(bool,string)(TMP_879,SIGNATURE_UNSUPPORTED)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
signatureType = MSignatureValidator.SignatureType(signatureTypeRaw)

IRs:
TMP_881 = CONVERT signatureTypeRaw to MSignatureValidator.SignatureType
signatureType(MSignatureValidator.SignatureType) := TMP_881(MSignatureValidator.SignatureType)"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7
"];
7->8;
8[label="Node Type: NEW VARIABLE 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
signatureType == SignatureType.Illegal

IRs:
REF_499(MSignatureValidator.SignatureType) -> SignatureType.Illegal
TMP_882(bool) = signatureType == REF_499
CONDITION TMP_882"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
revert(string)(SIGNATURE_ILLEGAL)

IRs:
TMP_883(None) = SOLIDITY_CALL revert(string)(SIGNATURE_ILLEGAL)"];
10->50;
11[label="Node Type: IF 11

EXPRESSION:
signatureType == SignatureType.Invalid

IRs:
REF_500(MSignatureValidator.SignatureType) -> SignatureType.Invalid
TMP_884(bool) = signatureType == REF_500
CONDITION TMP_884"];
11->12[label="True"];
11->15[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
require(bool,string)(signature.length == 0,LENGTH_0_REQUIRED)

IRs:
REF_501 -> LENGTH signature
TMP_885(bool) = REF_501 == 0
TMP_886(None) = SOLIDITY_CALL require(bool,string)(TMP_885,LENGTH_0_REQUIRED)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isValid = false

IRs:
isValid(bool) := False(bool)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
isValid

IRs:
RETURN isValid"];
15[label="Node Type: IF 15

EXPRESSION:
signatureType == SignatureType.EIP712

IRs:
REF_502(MSignatureValidator.SignatureType) -> SignatureType.EIP712
TMP_887(bool) = signatureType == REF_502
CONDITION TMP_887"];
15->16[label="True"];
15->23[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
require(bool,string)(signature.length == 65,LENGTH_65_REQUIRED)

IRs:
REF_503 -> LENGTH signature
TMP_888(bool) = REF_503 == 65
TMP_889(None) = SOLIDITY_CALL require(bool,string)(TMP_888,LENGTH_65_REQUIRED)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
v = uint8(signature[0])

IRs:
REF_504(None) -> signature[0]
TMP_890 = CONVERT REF_504 to uint8
v(uint8) := TMP_890(uint8)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
r = signature.readBytes32(1)

IRs:
TMP_891(bytes32) = LIBRARY_CALL, dest:LibBytes, function:LibBytes.readBytes32(bytes,uint256), arguments:['signature', '1'] 
r(bytes32) := TMP_891(bytes32)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
s = signature.readBytes32(33)

IRs:
TMP_892(bytes32) = LIBRARY_CALL, dest:LibBytes, function:LibBytes.readBytes32(bytes,uint256), arguments:['signature', '33'] 
s(bytes32) := TMP_892(bytes32)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
recovered = ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s)

IRs:
TMP_893(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s)
recovered(address) := TMP_893(address)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
isValid = signerAddress == recovered

IRs:
TMP_894(bool) = signerAddress == recovered
isValid(bool) := TMP_894(bool)"];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
isValid

IRs:
RETURN isValid"];
23[label="Node Type: IF 23

EXPRESSION:
signatureType == SignatureType.EthSign

IRs:
REF_507(MSignatureValidator.SignatureType) -> SignatureType.EthSign
TMP_895(bool) = signatureType == REF_507
CONDITION TMP_895"];
23->24[label="True"];
23->31[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
require(bool,string)(signature.length == 65,LENGTH_65_REQUIRED)

IRs:
REF_508 -> LENGTH signature
TMP_896(bool) = REF_508 == 65
TMP_897(None) = SOLIDITY_CALL require(bool,string)(TMP_896,LENGTH_65_REQUIRED)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
v = uint8(signature[0])

IRs:
REF_509(None) -> signature[0]
TMP_898 = CONVERT REF_509 to uint8
v(uint8) := TMP_898(uint8)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
r = signature.readBytes32(1)

IRs:
TMP_899(bytes32) = LIBRARY_CALL, dest:LibBytes, function:LibBytes.readBytes32(bytes,uint256), arguments:['signature', '1'] 
r(bytes32) := TMP_899(bytes32)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
s = signature.readBytes32(33)

IRs:
TMP_900(bytes32) = LIBRARY_CALL, dest:LibBytes, function:LibBytes.readBytes32(bytes,uint256), arguments:['signature', '33'] 
s(bytes32) := TMP_900(bytes32)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
recovered = ecrecover(bytes32,uint8,bytes32,bytes32)(keccak256()(abi.encodePacked(Ethereum Signed Message:
32,hash)),v,r,s)

IRs:
TMP_901(bytes) = SOLIDITY_CALL abi.encodePacked()(Ethereum Signed Message:
32,hash)
TMP_902(bytes32) = SOLIDITY_CALL keccak256()(TMP_901)
TMP_903(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(TMP_902,v,r,s)
recovered(address) := TMP_903(address)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
isValid = signerAddress == recovered

IRs:
TMP_904(bool) = signerAddress == recovered
isValid(bool) := TMP_904(bool)"];
29->30;
30[label="Node Type: RETURN 30

EXPRESSION:
isValid

IRs:
RETURN isValid"];
31[label="Node Type: IF 31

EXPRESSION:
signatureType == SignatureType.Wallet

IRs:
REF_513(MSignatureValidator.SignatureType) -> SignatureType.Wallet
TMP_905(bool) = signatureType == REF_513
CONDITION TMP_905"];
31->32[label="True"];
31->34[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
isValid = isValidWalletSignature(hash,signerAddress,signature)

IRs:
TMP_906(bool) = INTERNAL_CALL, MixinSignatureValidator.isValidWalletSignature(bytes32,address,bytes)(hash,signerAddress,signature)
isValid(bool) := TMP_906(bool)"];
32->33;
33[label="Node Type: RETURN 33

EXPRESSION:
isValid

IRs:
RETURN isValid"];
34[label="Node Type: IF 34

EXPRESSION:
signatureType == SignatureType.Validator

IRs:
REF_514(MSignatureValidator.SignatureType) -> SignatureType.Validator
TMP_907(bool) = signatureType == REF_514
CONDITION TMP_907"];
34->35[label="True"];
34->41[label="False"];
35[label="Node Type: NEW VARIABLE 35

EXPRESSION:
validatorAddress = signature.popLast20Bytes()

IRs:
TMP_908(address) = LIBRARY_CALL, dest:LibBytes, function:LibBytes.popLast20Bytes(bytes), arguments:['signature'] 
validatorAddress(address) := TMP_908(address)"];
35->36;
36[label="Node Type: IF 36

EXPRESSION:
! allowedValidators[signerAddress][validatorAddress]

IRs:
REF_516(mapping(address => bool)) -> allowedValidators[signerAddress]
REF_517(bool) -> REF_516[validatorAddress]
TMP_909 = ! REF_517 
CONDITION TMP_909"];
36->37[label="True"];
36->38[label="False"];
37[label="Node Type: RETURN 37

EXPRESSION:
false

IRs:
RETURN False"];
38[label="Node Type: END_IF 38
"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
isValid = isValidValidatorSignature(validatorAddress,hash,signerAddress,signature)

IRs:
TMP_910(bool) = INTERNAL_CALL, MixinSignatureValidator.isValidValidatorSignature(address,bytes32,address,bytes)(validatorAddress,hash,signerAddress,signature)
isValid(bool) := TMP_910(bool)"];
39->40;
40[label="Node Type: RETURN 40

EXPRESSION:
isValid

IRs:
RETURN isValid"];
41[label="Node Type: IF 41

EXPRESSION:
signatureType == SignatureType.PreSigned

IRs:
REF_518(MSignatureValidator.SignatureType) -> SignatureType.PreSigned
TMP_911(bool) = signatureType == REF_518
CONDITION TMP_911"];
41->42[label="True"];
41->44[label="False"];
42[label="Node Type: EXPRESSION 42

EXPRESSION:
isValid = preSigned[hash][signerAddress]

IRs:
REF_519(mapping(address => bool)) -> preSigned[hash]
REF_520(bool) -> REF_519[signerAddress]
isValid(bool) := REF_520(bool)"];
42->43;
43[label="Node Type: RETURN 43

EXPRESSION:
isValid

IRs:
RETURN isValid"];
44[label="Node Type: END_IF 44
"];
44->45;
45[label="Node Type: END_IF 45
"];
45->46;
46[label="Node Type: END_IF 46
"];
46->47;
47[label="Node Type: END_IF 47
"];
47->48;
48[label="Node Type: END_IF 48
"];
48->49;
49[label="Node Type: END_IF 49
"];
49->50;
50[label="Node Type: END_IF 50
"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
revert(string)(SIGNATURE_UNSUPPORTED)

IRs:
TMP_912(None) = SOLIDITY_CALL revert(string)(SIGNATURE_UNSUPPORTED)"];
}
