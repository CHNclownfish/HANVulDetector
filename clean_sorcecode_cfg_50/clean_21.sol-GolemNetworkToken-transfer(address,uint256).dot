digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
funding

IRs:
CONDITION funding"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
senderBalance = balances[msg.sender]

IRs:
REF_0(uint256) -> balances[msg.sender]
senderBalance(uint256) := REF_0(uint256)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
senderBalance >= _value && _value > 0

IRs:
TMP_6(bool) = senderBalance >= _value
TMP_7(bool) = _value > 0
TMP_8(bool) = TMP_6 && TMP_7
CONDITION TMP_8"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
senderBalance -= _value

IRs:
senderBalance(uint256) = senderBalance - _value"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[msg.sender] = senderBalance

IRs:
REF_1(uint256) -> balances[msg.sender]
REF_1 (->balances) := senderBalance(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances[_to] += _value

IRs:
REF_2(uint256) -> balances[_to]
REF_2(-> balances) = REF_2 + _value"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender._to._value)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
false

IRs:
RETURN False"];
}
