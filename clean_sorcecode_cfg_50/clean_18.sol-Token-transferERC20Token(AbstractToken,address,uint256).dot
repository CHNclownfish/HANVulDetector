digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_token.balanceOf(address(this)) >= _value)

IRs:
TMP_92 = CONVERT this to address
TMP_93(uint256) = HIGH_LEVEL_CALL, dest:_token(AbstractToken), function:balanceOf, arguments:['TMP_92']  
TMP_94(bool) = TMP_93 >= _value
TMP_95(None) = SOLIDITY_CALL require(bool)(TMP_94)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
receiverBalance = _token.balanceOf(_to)

IRs:
TMP_96(uint256) = HIGH_LEVEL_CALL, dest:_token(AbstractToken), function:balanceOf, arguments:['_to']  
receiverBalance(uint256) := TMP_96(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_token.transfer(_to,_value))

IRs:
TMP_97(bool) = HIGH_LEVEL_CALL, dest:_token(AbstractToken), function:transfer, arguments:['_to', '_value']  
TMP_98(None) = SOLIDITY_CALL require(bool)(TMP_97)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
receiverNewBalance = _token.balanceOf(_to)

IRs:
TMP_99(uint256) = HIGH_LEVEL_CALL, dest:_token(AbstractToken), function:balanceOf, arguments:['_to']  
receiverNewBalance(uint256) := TMP_99(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(receiverNewBalance == add(receiverBalance,_value))

IRs:
TMP_100(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(receiverBalance,_value)
TMP_101(bool) = receiverNewBalance == TMP_100
TMP_102(None) = SOLIDITY_CALL assert(bool)(TMP_101)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
7->1;
}
