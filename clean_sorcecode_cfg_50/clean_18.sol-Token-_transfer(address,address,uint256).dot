digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_65 = CONVERT 0 to address
TMP_66(bool) = _to != TMP_65
TMP_67(None) = SOLIDITY_CALL require(bool)(TMP_66)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balances[_from] >= _value)

IRs:
REF_22(uint256) -> balances[_from]
TMP_68(bool) = REF_22 >= _value
TMP_69(None) = SOLIDITY_CALL require(bool)(TMP_68)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] -= _value

IRs:
REF_23(uint256) -> balances[_from]
REF_23(-> balances) = REF_23 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = add(balances[_to],_value)

IRs:
REF_24(uint256) -> balances[_to]
REF_25(uint256) -> balances[_to]
TMP_70(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(REF_25,_value)
REF_24 (->balances) := TMP_70(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from._to._value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
