digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(this.balance < withdrawValue)

IRs:
REF_97 -> BALANCE this
TMP_226(bool) = REF_97 < withdrawValue
TMP_227(None) = SOLIDITY_CALL assert(bool)(TMP_226)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[participant] = safeAdd(balances[participant],tokens)

IRs:
REF_98(uint256) -> balances[participant]
REF_99(uint256) -> balances[participant]
TMP_228(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_99,tokens)
REF_98 (->balances) := TMP_228(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Withdraw(participant,tokens,0)

IRs:
Emit Withdraw(participant.tokens.0)"];
}
