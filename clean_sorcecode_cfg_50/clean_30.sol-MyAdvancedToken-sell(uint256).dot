digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
myAddress = address(this)

IRs:
TMP_96 = CONVERT this to address
myAddress(address) := TMP_96(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(myAddress.balance >= amount * sellPrice)

IRs:
REF_59 -> BALANCE myAddress
TMP_97(uint256) = amount * sellPrice
TMP_98(bool) = REF_59 >= TMP_97
TMP_99(None) = SOLIDITY_CALL require(bool)(TMP_98)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_transfer(msg.sender,address(this),amount)

IRs:
TMP_100 = CONVERT this to address
INTERNAL_CALL, MyAdvancedToken._transfer(address,address,uint256)(msg.sender,TMP_100,amount)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
msg.sender.transfer(amount * sellPrice)

IRs:
TMP_102(uint256) = amount * sellPrice
Transfer dest:msg.sender value:TMP_102"];
}
