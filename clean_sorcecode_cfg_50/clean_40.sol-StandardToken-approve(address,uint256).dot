digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((_value == 0) || (allowed[msg.sender][_spender] == 0))

IRs:
TMP_57(bool) = _value == 0
REF_18(mapping(address => uint256)) -> allowed[msg.sender]
REF_19(uint256) -> REF_18[_spender]
TMP_58(bool) = REF_19 == 0
TMP_59(bool) = TMP_57 || TMP_58
TMP_60(None) = SOLIDITY_CALL require(bool)(TMP_59)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_20(mapping(address => uint256)) -> allowed[msg.sender]
REF_21(uint256) -> REF_20[_spender]
REF_21 (->allowed) := _value(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender._spender._value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyPayloadSize(2)

IRs:
MODIFIER_CALL, SafeMath.onlyPayloadSize(uint256)(2)"];
5->1;
}
