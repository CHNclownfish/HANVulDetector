digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
filled[orderHash] = safeAdd(orderTakerAssetFilledAmount,fillResults.takerAssetFilledAmount)

IRs:
REF_102(uint256) -> filled[orderHash]
REF_103(uint256) -> fillResults.takerAssetFilledAmount
TMP_315(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(orderTakerAssetFilledAmount,REF_103)
REF_102 (->filled) := TMP_315(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Fill(order.makerAddress,order.feeRecipientAddress,takerAddress,msg.sender,fillResults.makerAssetFilledAmount,fillResults.takerAssetFilledAmount,fillResults.makerFeePaid,fillResults.takerFeePaid,orderHash,order.makerAssetData,order.takerAssetData)

IRs:
REF_104(address) -> order.makerAddress
REF_105(address) -> order.feeRecipientAddress
REF_106(uint256) -> fillResults.makerAssetFilledAmount
REF_107(uint256) -> fillResults.takerAssetFilledAmount
REF_108(uint256) -> fillResults.makerFeePaid
REF_109(uint256) -> fillResults.takerFeePaid
REF_110(bytes) -> order.makerAssetData
REF_111(bytes) -> order.takerAssetData
Emit Fill(REF_104.REF_105.takerAddress.msg.sender.REF_106.REF_107.REF_108.REF_109.orderHash.REF_110.REF_111)"];
}
