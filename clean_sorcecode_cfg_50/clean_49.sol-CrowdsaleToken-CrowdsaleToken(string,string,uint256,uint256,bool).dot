digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply = _initialSupply

IRs:
totalSupply(uint256) := _initialSupply(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
decimals = _decimals

IRs:
decimals(uint256) := _decimals(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[owner] = totalSupply

IRs:
REF_117(uint256) -> balances[owner]
REF_117 (->balances) := totalSupply(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
totalSupply > 0

IRs:
TMP_320(bool) = totalSupply > 0
CONDITION TMP_320"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Minted(owner,totalSupply)

IRs:
Emit Minted(owner.totalSupply)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
! _mintable

IRs:
TMP_322 = ! _mintable 
CONDITION TMP_322"];
10->11[label="True"];
10->15[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
totalSupply == 0

IRs:
TMP_323(bool) = totalSupply == 0
CONDITION TMP_323"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: THROW 13
"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: END_IF 15
"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
UpgradeableToken(msg.sender)

IRs:
INTERNAL_CALL, UpgradeableToken.UpgradeableToken(address)(msg.sender)"];
16->1;
}
