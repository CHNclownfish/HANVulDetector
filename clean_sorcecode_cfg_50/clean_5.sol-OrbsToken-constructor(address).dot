digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_distributor != address(0),Distributor address must not be 0!)

IRs:
TMP_130 = CONVERT 0 to address
TMP_131(bool) = _distributor != TMP_130
TMP_132(None) = SOLIDITY_CALL require(bool,string)(TMP_131,Distributor address must not be 0!)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply_ = totalSupply_.add(TOTAL_SUPPLY)

IRs:
TMP_133(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply_', 'TOTAL_SUPPLY'] 
totalSupply_(uint256) := TMP_133(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_distributor] = balances[_distributor].add(TOTAL_SUPPLY)

IRs:
REF_104(uint256) -> balances[_distributor]
REF_105(uint256) -> balances[_distributor]
TMP_134(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_105', 'TOTAL_SUPPLY'] 
REF_104 (->balances) := TMP_134(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(address(0),_distributor,TOTAL_SUPPLY)

IRs:
TMP_135 = CONVERT 0 to address
Emit Transfer(TMP_135._distributor.TOTAL_SUPPLY)"];
}
