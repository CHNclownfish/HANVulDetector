digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(value <= _balances[msg.sender])

IRs:
REF_3(uint256) -> _balances[msg.sender]
TMP_17(bool) = value <= REF_3
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(to != address(0))

IRs:
TMP_19 = CONVERT 0 to address
TMP_20(bool) = to != TMP_19
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_balances[msg.sender] = _balances[msg.sender].sub(value)

IRs:
REF_4(uint256) -> _balances[msg.sender]
REF_5(uint256) -> _balances[msg.sender]
TMP_22(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_5', 'value'] 
REF_4 (->_balances) := TMP_22(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_balances[to] = _balances[to].add(value)

IRs:
REF_7(uint256) -> _balances[to]
REF_8(uint256) -> _balances[to]
TMP_23(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_8', 'value'] 
REF_7 (->_balances) := TMP_23(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,to,value)

IRs:
Emit Transfer(msg.sender.to.value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
