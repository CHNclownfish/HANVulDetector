digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
inviteAddress = signingLogic.recoverSigner(keccak256()(abi.encodePacked(msg.sender)),_sig)

IRs:
TMP_21(bytes) = SOLIDITY_CALL abi.encodePacked()(msg.sender)
TMP_22(bytes32) = SOLIDITY_CALL keccak256()(TMP_21)
TMP_23(address) = HIGH_LEVEL_CALL, dest:signingLogic(SigningLogicInterface), function:recoverSigner, arguments:['TMP_22', '_sig']  
inviteAddress(address) := TMP_23(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(! pendingInvites[inviteAddress])

IRs:
REF_2(bool) -> pendingInvites[inviteAddress]
TMP_24 = ! REF_2 
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pendingInvites[inviteAddress] = true

IRs:
REF_3(bool) -> pendingInvites[inviteAddress]
REF_3 (->pendingInvites) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
InviteCreated(msg.sender,inviteAddress)

IRs:
Emit InviteCreated(msg.sender.inviteAddress)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyUser()

IRs:
MODIFIER_CALL, AccountRegistryLogic.onlyUser()()"];
5->1;
}
