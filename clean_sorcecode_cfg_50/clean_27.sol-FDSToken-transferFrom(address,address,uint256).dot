digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value)

IRs:
REF_52(mapping(address => uint256)) -> _allowed[from]
REF_53(uint256) -> REF_52[msg.sender]
REF_54(mapping(address => uint256)) -> _allowed[from]
REF_55(uint256) -> REF_54[msg.sender]
TMP_63(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_55', 'value'] 
REF_53 (->_allowed) := TMP_63(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_transfer(from,to,value)

IRs:
INTERNAL_CALL, ERC20._transfer(address,address,uint256)(from,to,value)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(from,msg.sender,_allowed[from][msg.sender])

IRs:
REF_57(mapping(address => uint256)) -> _allowed[from]
REF_58(uint256) -> REF_57[msg.sender]
Emit Approval(from.msg.sender.REF_58)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
}
