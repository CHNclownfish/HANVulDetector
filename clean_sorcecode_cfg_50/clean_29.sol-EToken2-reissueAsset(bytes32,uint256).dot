digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->20;
1[label="Node Type: IF 1

EXPRESSION:
_value == 0

IRs:
TMP_122(bool) = _value == 0
CONDITION TMP_122"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_error(Cannot reissue 0 value)

IRs:
INTERNAL_CALL, EToken2._error(bytes32)(Cannot reissue 0 value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
asset = assets[_symbol]

IRs:
REF_85(EToken2.Asset) -> assets[_symbol]
asset(EToken2.Asset) := REF_85(EToken2.Asset)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
! asset.isReissuable

IRs:
REF_86(bool) -> asset.isReissuable
TMP_124 = ! REF_86 
CONDITION TMP_124"];
6->7[label="True"];
6->9[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_error(Cannot reissue fixed asset)

IRs:
INTERNAL_CALL, EToken2._error(bytes32)(Cannot reissue fixed asset)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
asset.totalSupply + _value < asset.totalSupply

IRs:
REF_87(uint256) -> asset.totalSupply
TMP_126(uint256) = REF_87 + _value
REF_88(uint256) -> asset.totalSupply
TMP_127(bool) = TMP_126 < REF_88
CONDITION TMP_127"];
10->11[label="True"];
10->13[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_error(Total supply overflow)

IRs:
INTERNAL_CALL, EToken2._error(bytes32)(Total supply overflow)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
false

IRs:
RETURN False"];
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
holderId = getHolderId(msg.sender)

IRs:
TMP_129(uint256) = INTERNAL_CALL, EToken2.getHolderId(address)(msg.sender)
holderId(uint256) := TMP_129(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
asset.wallets[holderId].balance += _value

IRs:
REF_89(mapping(uint256 => EToken2.Wallet)) -> asset.wallets
REF_90(EToken2.Wallet) -> REF_89[holderId]
REF_91(uint256) -> REF_90.balance
REF_91(-> asset) = REF_91 + _value"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
asset.totalSupply += _value

IRs:
REF_92(uint256) -> asset.totalSupply
REF_92(-> asset) = REF_92 + _value"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
eventsHistory.emitIssue(_symbol,_value,_address(holderId))

IRs:
TMP_130(address) = INTERNAL_CALL, EToken2._address(uint256)(holderId)
HIGH_LEVEL_CALL, dest:eventsHistory(Emitter), function:emitIssue, arguments:['_symbol', '_value', 'TMP_130']  "];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
_proxyTransferEvent(0,holderId,_value,_symbol)

IRs:
INTERNAL_CALL, EToken2._proxyTransferEvent(uint256,uint256,uint256,bytes32)(0,holderId,_value,_symbol)"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
true

IRs:
RETURN True"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
onlyOwner(_symbol)

IRs:
MODIFIER_CALL, EToken2.onlyOwner(bytes32)(_symbol)"];
20->1;
}
