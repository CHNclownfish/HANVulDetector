digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
participant = msg.sender

IRs:
participant(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tokens = withdrawals[participant].tokens

IRs:
REF_82(C20.Withdrawal) -> withdrawals[participant]
REF_83(uint256) -> REF_82.tokens
tokens(uint256) := REF_83(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(tokens > 0)

IRs:
TMP_212(bool) = tokens > 0
TMP_213(None) = SOLIDITY_CALL require(bool)(TMP_212)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
requestTime = withdrawals[participant].time

IRs:
REF_84(C20.Withdrawal) -> withdrawals[participant]
REF_85(uint256) -> REF_84.time
requestTime(uint256) := REF_85(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
price = prices[requestTime]

IRs:
REF_86(C20.Price) -> prices[requestTime]
price(C20.Price) := REF_86(C20.Price)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(price.numerator > 0)

IRs:
REF_87(uint256) -> price.numerator
TMP_214(bool) = REF_87 > 0
TMP_215(None) = SOLIDITY_CALL require(bool)(TMP_214)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
withdrawValue = safeMul(tokens,price.denominator) / price.numerator

IRs:
REF_88(uint256) -> price.denominator
TMP_216(uint256) = INTERNAL_CALL, SafeMath.safeMul(uint256,uint256)(tokens,REF_88)
REF_89(uint256) -> price.numerator
TMP_217(uint256) = TMP_216 / REF_89
withdrawValue(uint256) := TMP_217(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
withdrawals[participant].tokens = 0

IRs:
REF_90(C20.Withdrawal) -> withdrawals[participant]
REF_91(uint256) -> REF_90.tokens
REF_91 (->withdrawals) := 0(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
this.balance >= withdrawValue

IRs:
REF_92 -> BALANCE this
TMP_218(bool) = REF_92 >= withdrawValue
CONDITION TMP_218"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
enact_withdrawal_greater_equal(participant,withdrawValue,tokens)

IRs:
INTERNAL_CALL, C20.enact_withdrawal_greater_equal(address,uint256,uint256)(participant,withdrawValue,tokens)"];
10->12;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
enact_withdrawal_less(participant,withdrawValue,tokens)

IRs:
INTERNAL_CALL, C20.enact_withdrawal_less(address,uint256,uint256)(participant,withdrawValue,tokens)"];
11->12;
12[label="Node Type: END_IF 12
"];
}
