digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[from] = safeSub(balances[from],tokens)

IRs:
REF_21(uint256) -> balances[from]
REF_22(uint256) -> balances[from]
TMP_84(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_22,tokens)
REF_21 (->balances) := TMP_84(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[from][msg.sender] = safeSub(allowed[from][msg.sender],tokens)

IRs:
REF_23(mapping(address => uint256)) -> allowed[from]
REF_24(uint256) -> REF_23[msg.sender]
REF_25(mapping(address => uint256)) -> allowed[from]
REF_26(uint256) -> REF_25[msg.sender]
TMP_85(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_26,tokens)
REF_24 (->allowed) := TMP_85(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[to] = safeAdd(balances[to],tokens)

IRs:
REF_27(uint256) -> balances[to]
REF_28(uint256) -> balances[to]
TMP_86(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_28,tokens)
REF_27 (->balances) := TMP_86(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(from,to,tokens)

IRs:
Emit Transfer(from.to.tokens)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
}
