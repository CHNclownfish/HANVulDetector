digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! funding

IRs:
TMP_29 = ! funding 
CONDITION TMP_29"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
(block.number <= fundingEndBlock || totalTokens < tokenCreationMin) && totalTokens < tokenCreationCap

IRs:
TMP_30(bool) = block.number <= fundingEndBlock
TMP_31(bool) = totalTokens < tokenCreationMin
TMP_32(bool) = TMP_30 || TMP_31
TMP_33(bool) = totalTokens < tokenCreationCap
TMP_34(bool) = TMP_32 && TMP_33
CONDITION TMP_34"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
funding = false

IRs:
funding(bool) := False(bool)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
percentOfTotal = 18

IRs:
percentOfTotal(uint256) := 18(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
additionalTokens = totalTokens * percentOfTotal / (100 - percentOfTotal)

IRs:
TMP_35(uint256) = totalTokens * percentOfTotal
TMP_36(uint256) = 100 - percentOfTotal
TMP_37(uint256) = TMP_35 / TMP_36
additionalTokens(uint256) := TMP_37(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
totalTokens += additionalTokens

IRs:
totalTokens(uint256) = totalTokens + additionalTokens"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
balances[lockedAllocation] += additionalTokens

IRs:
REF_8(uint256) -> balances[lockedAllocation]
REF_8(-> balances) = REF_8 + additionalTokens"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
Transfer(0,lockedAllocation,additionalTokens)

IRs:
Emit Transfer(0.lockedAllocation.additionalTokens)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
! golemFactory.send(this.balance)

IRs:
REF_10 -> BALANCE this
TMP_39 = SEND dest:golemFactory value:REF_10
TMP_40 = ! TMP_39 
CONDITION TMP_40"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: THROW 14
"];
15[label="Node Type: END_IF 15
"];
}
