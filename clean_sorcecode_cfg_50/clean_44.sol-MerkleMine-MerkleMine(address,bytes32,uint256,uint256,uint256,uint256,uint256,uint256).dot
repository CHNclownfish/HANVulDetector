digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_token != address(0))

IRs:
TMP_19 = CONVERT 0 to address
TMP_20(bool) = _token != TMP_19
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_totalGenesisRecipients > 0)

IRs:
TMP_22(bool) = _totalGenesisRecipients > 0
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_genesisBlock <= block.number)

IRs:
TMP_24(bool) = _genesisBlock <= block.number
TMP_25(None) = SOLIDITY_CALL require(bool)(TMP_24)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_callerAllocationStartBlock > block.number)

IRs:
TMP_26(bool) = _callerAllocationStartBlock > block.number
TMP_27(None) = SOLIDITY_CALL require(bool)(TMP_26)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_callerAllocationEndBlock > _callerAllocationStartBlock)

IRs:
TMP_28(bool) = _callerAllocationEndBlock > _callerAllocationStartBlock
TMP_29(None) = SOLIDITY_CALL require(bool)(TMP_28)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
token = ERC20(_token)

IRs:
TMP_30 = CONVERT _token to ERC20
token(ERC20) := TMP_30(ERC20)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
genesisRoot = _genesisRoot

IRs:
genesisRoot(bytes32) := _genesisRoot(bytes32)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
totalGenesisTokens = _totalGenesisTokens

IRs:
totalGenesisTokens(uint256) := _totalGenesisTokens(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
totalGenesisRecipients = _totalGenesisRecipients

IRs:
totalGenesisRecipients(uint256) := _totalGenesisRecipients(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
tokensPerAllocation = _totalGenesisTokens.div(_totalGenesisRecipients)

IRs:
TMP_31(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['_totalGenesisTokens', '_totalGenesisRecipients'] 
tokensPerAllocation(uint256) := TMP_31(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
balanceThreshold = _balanceThreshold

IRs:
balanceThreshold(uint256) := _balanceThreshold(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
genesisBlock = _genesisBlock

IRs:
genesisBlock(uint256) := _genesisBlock(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
callerAllocationStartBlock = _callerAllocationStartBlock

IRs:
callerAllocationStartBlock(uint256) := _callerAllocationStartBlock(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
callerAllocationEndBlock = _callerAllocationEndBlock

IRs:
callerAllocationEndBlock(uint256) := _callerAllocationEndBlock(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
callerAllocationPeriod = _callerAllocationEndBlock.sub(_callerAllocationStartBlock)

IRs:
TMP_32(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_callerAllocationEndBlock', '_callerAllocationStartBlock'] 
callerAllocationPeriod(uint256) := TMP_32(uint256)"];
}
