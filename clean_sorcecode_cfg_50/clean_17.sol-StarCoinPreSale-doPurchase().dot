digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->24;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! crowdsaleFinished)

IRs:
TMP_284 = ! crowdsaleFinished 
TMP_285(None) = SOLIDITY_CALL require(bool)(TMP_284)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
tokens = msg.value.mul(starEthRate)

IRs:
TMP_286(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['msg.value', 'starEthRate'] 
tokens(uint256) := TMP_286(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
referralBonus = calculateReferralBonus(tokens)

IRs:
TMP_287(uint256) = INTERNAL_CALL, StarCoinPreSale.calculateReferralBonus(uint256)(tokens)
referralBonus(uint256) := TMP_287(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
referral = investorWhiteList.getReferralOf(msg.sender)

IRs:
TMP_288(address) = HIGH_LEVEL_CALL, dest:investorWhiteList(InvestorWhiteList), function:getReferralOf, arguments:['msg.sender']  
referral(address) := TMP_288(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
tokens = tokens.add(calculateBonus(tokens))

IRs:
TMP_289(uint256) = INTERNAL_CALL, StarCoinPreSale.calculateBonus(uint256)(tokens)
TMP_290(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['tokens', 'TMP_289'] 
tokens(uint256) := TMP_290(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
newTokensSold = tokensSold.add(tokens)

IRs:
TMP_291(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['tokensSold', 'tokens'] 
newTokensSold(uint256) := TMP_291(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
referralBonus > 0 && referral != 0x0

IRs:
TMP_292(bool) = referralBonus > 0
TMP_293(bool) = referral != 0
TMP_294(bool) = TMP_292 && TMP_293
CONDITION TMP_294"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
newTokensSold = newTokensSold.add(referralBonus)

IRs:
TMP_295(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['newTokensSold', 'referralBonus'] 
newTokensSold(uint256) := TMP_295(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(newTokensSold <= hardCap)

IRs:
TMP_296(bool) = newTokensSold <= hardCap
TMP_297(None) = SOLIDITY_CALL require(bool)(TMP_296)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
! softCapReached && newTokensSold >= softCap

IRs:
TMP_298 = ! softCapReached 
TMP_299(bool) = newTokensSold >= softCap
TMP_300(bool) = TMP_298 && TMP_299
CONDITION TMP_300"];
11->12[label="True"];
11->14[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
softCapReached = true

IRs:
softCapReached(bool) := True(bool)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
SoftCapReached(softCap)

IRs:
Emit SoftCapReached(softCap)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
collected = collected.add(msg.value)

IRs:
TMP_302(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['collected', 'msg.value'] 
collected(uint256) := TMP_302(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
tokensSold = newTokensSold

IRs:
tokensSold(uint256) := newTokensSold(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
deposited[msg.sender] = deposited[msg.sender].add(msg.value)

IRs:
REF_193(uint256) -> deposited[msg.sender]
REF_194(uint256) -> deposited[msg.sender]
TMP_303(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_194', 'msg.value'] 
REF_193 (->deposited) := TMP_303(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
token.transfer(msg.sender,tokens)

IRs:
TMP_304(bool) = HIGH_LEVEL_CALL, dest:token(StarCoin), function:transfer, arguments:['msg.sender', 'tokens']  "];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
NewContribution(msg.sender,tokens,msg.value)

IRs:
Emit NewContribution(msg.sender.tokens.msg.value)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
referralBonus > 0 && referral != 0x0

IRs:
TMP_306(bool) = referralBonus > 0
TMP_307(bool) = referral != 0
TMP_308(bool) = TMP_306 && TMP_307
CONDITION TMP_308"];
20->21[label="True"];
20->23[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
token.transfer(referral,referralBonus)

IRs:
TMP_309(bool) = HIGH_LEVEL_CALL, dest:token(StarCoin), function:transfer, arguments:['referral', 'referralBonus']  "];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
NewReferralTransfer(msg.sender,referral,referralBonus)

IRs:
Emit NewReferralTransfer(msg.sender.referral.referralBonus)"];
22->23;
23[label="Node Type: END_IF 23
"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
icoActive()

IRs:
MODIFIER_CALL, StarCoinPreSale.icoActive()()"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
25->1;
}
