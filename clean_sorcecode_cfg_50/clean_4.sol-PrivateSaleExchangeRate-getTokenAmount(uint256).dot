digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
cost = 550

IRs:
cost(uint256) := 550(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_weiAmount < 10000000000000000000

IRs:
TMP_32(bool) = _weiAmount < 10000000000000000000
CONDITION TMP_32"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
cost = 550

IRs:
cost(uint256) := 550(uint256)"];
3->20;
4[label="Node Type: IF 4

EXPRESSION:
_weiAmount < 25000000000000000000

IRs:
TMP_33(bool) = _weiAmount < 25000000000000000000
CONDITION TMP_33"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
cost = 545

IRs:
cost(uint256) := 545(uint256)"];
5->19;
6[label="Node Type: IF 6

EXPRESSION:
_weiAmount < 50000000000000000000

IRs:
TMP_34(bool) = _weiAmount < 50000000000000000000
CONDITION TMP_34"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
cost = 540

IRs:
cost(uint256) := 540(uint256)"];
7->18;
8[label="Node Type: IF 8

EXPRESSION:
_weiAmount < 250000000000000000000

IRs:
TMP_35(bool) = _weiAmount < 250000000000000000000
CONDITION TMP_35"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
cost = 530

IRs:
cost(uint256) := 530(uint256)"];
9->17;
10[label="Node Type: IF 10

EXPRESSION:
_weiAmount < 500000000000000000000

IRs:
TMP_36(bool) = _weiAmount < 500000000000000000000
CONDITION TMP_36"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
cost = 520

IRs:
cost(uint256) := 520(uint256)"];
11->16;
12[label="Node Type: IF 12

EXPRESSION:
_weiAmount < 1000000000000000000000

IRs:
TMP_37(bool) = _weiAmount < 1000000000000000000000
CONDITION TMP_37"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
cost = 510

IRs:
cost(uint256) := 510(uint256)"];
13->15;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
cost = 500

IRs:
cost(uint256) := 500(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: RETURN 21

EXPRESSION:
_weiAmount.mul(rate).mul(10000).div(cost)

IRs:
TMP_38(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_weiAmount', 'rate'] 
TMP_39(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_38', '10000'] 
TMP_40(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_39', 'cost'] 
RETURN TMP_40"];
}
