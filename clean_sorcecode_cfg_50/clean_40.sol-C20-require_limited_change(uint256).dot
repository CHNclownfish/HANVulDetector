digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
percentage_diff = 0

IRs:
percentage_diff(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
percentage_diff = safeMul(newNumerator,100) / currentPrice.numerator

IRs:
TMP_137(uint256) = INTERNAL_CALL, SafeMath.safeMul(uint256,uint256)(newNumerator,100)
REF_62(uint256) -> currentPrice.numerator
TMP_138(uint256) = TMP_137 / REF_62
percentage_diff(uint256) := TMP_138(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
percentage_diff = safeSub(percentage_diff,100)

IRs:
TMP_139(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(percentage_diff,100)
percentage_diff(uint256) := TMP_139(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(percentage_diff <= 20)

IRs:
TMP_140(bool) = percentage_diff <= 20
TMP_141(None) = SOLIDITY_CALL require(bool)(TMP_140)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
only_if_controlWallet()

IRs:
MODIFIER_CALL, C20.only_if_controlWallet()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require_waited()

IRs:
MODIFIER_CALL, C20.require_waited()()"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
only_if_increase(newNumerator)

IRs:
MODIFIER_CALL, C20.only_if_increase(uint256)(newNumerator)"];
7->1;
}
