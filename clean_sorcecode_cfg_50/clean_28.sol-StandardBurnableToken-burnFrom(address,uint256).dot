digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value <= allowed[_from][msg.sender])

IRs:
REF_110(mapping(address => uint256)) -> allowed[_from]
REF_111(uint256) -> REF_110[msg.sender]
TMP_105(bool) = _value <= REF_111
TMP_106(None) = SOLIDITY_CALL require(bool)(TMP_105)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

IRs:
REF_112(mapping(address => uint256)) -> allowed[_from]
REF_113(uint256) -> REF_112[msg.sender]
REF_114(mapping(address => uint256)) -> allowed[_from]
REF_115(uint256) -> REF_114[msg.sender]
TMP_107(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_115', '_value'] 
REF_113 (->allowed) := TMP_107(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_burn(_from,_value)

IRs:
INTERNAL_CALL, BurnableToken._burn(address,uint256)(_from,_value)"];
}
