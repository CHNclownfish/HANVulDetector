digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
signature.length != 65

IRs:
REF_0 -> LENGTH signature
TMP_0(bool) = REF_0 != 65
CONDITION TMP_0"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
(address(0))

IRs:
TMP_1 = CONVERT 0 to address
RETURN TMP_1"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
v < 27

IRs:
TMP_2(bool) = v < 27
CONDITION TMP_2"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
v += 27

IRs:
v(uint8) = v + 27"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
v != 27 && v != 28

IRs:
TMP_3(bool) = v != 27
TMP_4(bool) = v != 28
TMP_5(bool) = TMP_3 && TMP_4
CONDITION TMP_5"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: RETURN 12

EXPRESSION:
(address(0))

IRs:
TMP_6 = CONVERT 0 to address
RETURN TMP_6"];
13[label="Node Type: RETURN 13

EXPRESSION:
ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s)

IRs:
TMP_7(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s)
RETURN TMP_7"];
}
