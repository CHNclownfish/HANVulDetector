digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender != address(0),)

IRs:
TMP_110 = CONVERT 0 to address
TMP_111(bool) = msg.sender != TMP_110
TMP_112(None) = SOLIDITY_CALL require(bool,string)(TMP_111,)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(msg.sender == _owner,)

IRs:
TMP_113(bool) = msg.sender == _owner
TMP_114(None) = SOLIDITY_CALL require(bool,string)(TMP_113,)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_totalSupply = safeAdd(_totalSupply,value)

IRs:
TMP_115(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(_totalSupply,value)
_totalSupply(uint256) := TMP_115(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_owner] = safeAdd(balances[_owner],value)

IRs:
REF_38(uint256) -> balances[_owner]
REF_39(uint256) -> balances[_owner]
TMP_116(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_39,value)
REF_38 (->balances) := TMP_116(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(address(0),_owner,value)

IRs:
TMP_117 = CONVERT 0 to address
Emit Transfer(TMP_117._owner.value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyMinter()

IRs:
MODIFIER_CALL, MinterRole.onlyMinter()()"];
7->1;
}
