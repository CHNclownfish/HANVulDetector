digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(account != address(0),)

IRs:
TMP_101 = CONVERT 0 to address
TMP_102(bool) = account != TMP_101
TMP_103(None) = SOLIDITY_CALL require(bool,string)(TMP_102,)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(account != _owner,)

IRs:
TMP_104(bool) = account != _owner
TMP_105(None) = SOLIDITY_CALL require(bool,string)(TMP_104,)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[account] = safeAdd(balances[account],value)

IRs:
REF_34(uint256) -> balances[account]
REF_35(uint256) -> balances[account]
TMP_106(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_35,value)
REF_34 (->balances) := TMP_106(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_owner] = safeSub(balances[_owner],value)

IRs:
REF_36(uint256) -> balances[_owner]
REF_37(uint256) -> balances[_owner]
TMP_107(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_37,value)
REF_36 (->balances) := TMP_107(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_owner,account,value)

IRs:
Emit Transfer(_owner.account.value)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyMinter()

IRs:
MODIFIER_CALL, MinterRole.onlyMinter()()"];
7->1;
}
