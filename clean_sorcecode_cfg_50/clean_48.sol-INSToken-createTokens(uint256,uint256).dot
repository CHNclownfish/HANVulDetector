digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_75(bool) = msg.sender == owner
TMP_76(None) = SOLIDITY_CALL require(bool)(TMP_75)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_value > 0

IRs:
TMP_77(bool) = _value > 0
CONDITION TMP_77"];
2->3[label="True"];
2->9[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
_value > safeSub(MAX_TOKEN_COUNT,tokenCount)

IRs:
TMP_78(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(MAX_TOKEN_COUNT,tokenCount)
TMP_79(bool) = _value > TMP_78
CONDITION TMP_79"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
false

IRs:
RETURN False"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
accounts[msg.sender] = safeAdd(accounts[msg.sender],_value)

IRs:
REF_44(uint256) -> accounts[msg.sender]
REF_45(uint256) -> accounts[msg.sender]
TMP_80(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_45,_value)
REF_44 (->accounts) := TMP_80(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tokenCount = safeAdd(tokenCount,_value)

IRs:
TMP_81(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(tokenCount,_value)
tokenCount(uint256) := TMP_81(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
totalCollected = safeAdd(totalCollected,_collected)

IRs:
TMP_82(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(totalCollected,_collected)
totalCollected(uint256) := TMP_82(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
}
