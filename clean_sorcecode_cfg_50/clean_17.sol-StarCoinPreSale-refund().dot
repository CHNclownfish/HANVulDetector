digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(softCapReached == false)

IRs:
TMP_231(bool) = softCapReached == False
TMP_232(None) = SOLIDITY_CALL require(bool)(TMP_231)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(deposited[msg.sender] > 0)

IRs:
REF_155(uint256) -> deposited[msg.sender]
TMP_233(bool) = REF_155 > 0
TMP_234(None) = SOLIDITY_CALL require(bool)(TMP_233)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
refund = deposited[msg.sender]

IRs:
REF_156(uint256) -> deposited[msg.sender]
refund(uint256) := REF_156(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
deposited[msg.sender] = 0

IRs:
REF_157(uint256) -> deposited[msg.sender]
REF_157 (->deposited) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
msg.sender.transfer(refund)

IRs:
Transfer dest:msg.sender value:refund"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
weiRefunded = weiRefunded.add(refund)

IRs:
TMP_236(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['weiRefunded', 'refund'] 
weiRefunded(uint256) := TMP_236(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Refunded(msg.sender,refund)

IRs:
Emit Refunded(msg.sender.refund)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
icoEnded()

IRs:
MODIFIER_CALL, StarCoinPreSale.icoEnded()()"];
8->1;
}
