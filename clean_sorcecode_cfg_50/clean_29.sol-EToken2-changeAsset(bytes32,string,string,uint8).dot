digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: IF 1

EXPRESSION:
isLocked(_symbol)

IRs:
TMP_115(bool) = INTERNAL_CALL, EToken2.isLocked(bytes32)(_symbol)
CONDITION TMP_115"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_error(Asset is locked)

IRs:
INTERNAL_CALL, EToken2._error(bytes32)(Asset is locked)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assets[_symbol].name = _name

IRs:
REF_76(EToken2.Asset) -> assets[_symbol]
REF_77(string) -> REF_76.name
REF_77 (->assets) := _name(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
assets[_symbol].description = _description

IRs:
REF_78(EToken2.Asset) -> assets[_symbol]
REF_79(string) -> REF_78.description
REF_79 (->assets) := _description(string)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
assets[_symbol].baseUnit = _baseUnit

IRs:
REF_80(EToken2.Asset) -> assets[_symbol]
REF_81(uint8) -> REF_80.baseUnit
REF_81 (->assets) := _baseUnit(uint8)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
eventsHistory.emitChange(_symbol)

IRs:
HIGH_LEVEL_CALL, dest:eventsHistory(Emitter), function:emitChange, arguments:['_symbol']  "];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyOwner(_symbol)

IRs:
MODIFIER_CALL, EToken2.onlyOwner(bytes32)(_symbol)"];
10->1;
}
