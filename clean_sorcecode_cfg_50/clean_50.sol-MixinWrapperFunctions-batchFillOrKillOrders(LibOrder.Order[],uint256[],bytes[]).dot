digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ordersLength = orders.length

IRs:
REF_212 -> LENGTH orders
ordersLength(uint256) := REF_212(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->9;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i != ordersLength

IRs:
TMP_495(bool) = i != ordersLength
CONDITION TMP_495"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
singleFillResults = fillOrKillOrderInternal(orders[i],takerAssetFillAmounts[i],signatures[i])

IRs:
REF_213(LibOrder.Order) -> orders[i]
REF_214(uint256) -> takerAssetFillAmounts[i]
REF_215(bytes) -> signatures[i]
TMP_496(LibFillResults.FillResults) = INTERNAL_CALL, MixinWrapperFunctions.fillOrKillOrderInternal(LibOrder.Order,uint256,bytes)(REF_213,REF_214,REF_215)
singleFillResults(LibFillResults.FillResults) := TMP_496(LibFillResults.FillResults)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
addFillResults(totalFillResults,singleFillResults)

IRs:
INTERNAL_CALL, LibFillResults.addFillResults(LibFillResults.FillResults,LibFillResults.FillResults)(totalFillResults,singleFillResults)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
i ++

IRs:
TMP_498(uint256) := i(uint256)
i(uint256) = i + 1"];
8->5;
9[label="Node Type: RETURN 9

EXPRESSION:
totalFillResults

IRs:
RETURN totalFillResults"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
nonReentrant()

IRs:
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()"];
10->1;
}
