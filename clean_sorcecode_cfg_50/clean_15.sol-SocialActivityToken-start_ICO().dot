digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
stage = Stages.ICO

IRs:
REF_43(SocialActivityToken.Stages) -> Stages.ICO
stage(SocialActivityToken.Stages) := REF_43(SocialActivityToken.Stages)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
stopped = false

IRs:
stopped(bool) := False(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
startdate = now

IRs:
startdate(uint256) := now(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
ico_first = now + 1209600

IRs:
TMP_167(uint256) = now + 1209600
ico_first(uint256) := TMP_167(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ico_second = ico_first + 1209600

IRs:
TMP_168(uint256) = ico_first + 1209600
ico_second(uint256) := TMP_168(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ico_third = ico_second + 1209600

IRs:
TMP_169(uint256) = ico_second + 1209600
ico_third(uint256) := TMP_169(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
ico_fourth = ico_third + 1209600

IRs:
TMP_170(uint256) = ico_third + 1209600
ico_fourth(uint256) := TMP_170(uint256)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, SocialActivityToken.onlyOwner()()"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
atStage(Stages.NOTSTARTED)

IRs:
REF_44(SocialActivityToken.Stages) -> Stages.NOTSTARTED
MODIFIER_CALL, SocialActivityToken.atStage(SocialActivityToken.Stages)(REF_44)"];
9->1;
}
