digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
(to,symbol,success) = registryICAP.parse(_icap)

IRs:
TUPLE_0(address,bytes32,bool) = HIGH_LEVEL_CALL, dest:registryICAP(RegistryICAPInterface), function:parse, arguments:['_icap']  
to(address)= UNPACK TUPLE_0 index: 0 
symbol(bytes32)= UNPACK TUPLE_0 index: 1 
success(bool)= UNPACK TUPLE_0 index: 2 "];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
! success

IRs:
TMP_79 = ! success 
CONDITION TMP_79"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_error(ICAP is not registered)

IRs:
INTERNAL_CALL, EToken2._error(bytes32)(ICAP is not registered)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
! isEnabled(sha3()(symbol,Features.ICAP))

IRs:
REF_59(EToken2.Features) -> Features.ICAP
TMP_81(bytes32) = SOLIDITY_CALL sha3()(symbol,REF_59)
TMP_82(bool) = INTERNAL_CALL, EToken2.isEnabled(bytes32)(TMP_81)
TMP_83 = ! TMP_82 
CONDITION TMP_83"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_error(ICAP feature is disabled)

IRs:
INTERNAL_CALL, EToken2._error(bytes32)(ICAP feature is disabled)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
false

IRs:
RETURN False"];
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
! _isProxy(symbol)

IRs:
TMP_85(bool) = INTERNAL_CALL, EToken2._isProxy(bytes32)(symbol)
TMP_86 = ! TMP_85 
CONDITION TMP_86"];
13->14[label="True"];
13->16[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_error(Only proxy: access denied)

IRs:
INTERNAL_CALL, EToken2._error(bytes32)(Only proxy: access denied)"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
false

IRs:
RETURN False"];
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
toId = _createHolderId(to)

IRs:
TMP_88(uint256) = INTERNAL_CALL, EToken2._createHolderId(address)(to)
toId(uint256) := TMP_88(uint256)"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
! _transfer(_fromId,toId,_value,symbol,_reference,_senderId)

IRs:
TMP_89(bool) = INTERNAL_CALL, EToken2._transfer(uint256,uint256,uint256,bytes32,string,uint256)(_fromId,toId,_value,symbol,_reference,_senderId)
TMP_90 = ! TMP_89 
CONDITION TMP_90"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
false

IRs:
RETURN False"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
eventsHistory.emitTransferToICAP(_address(_fromId),_address(toId),_icap,_value,_reference)

IRs:
TMP_91(address) = INTERNAL_CALL, EToken2._address(uint256)(_fromId)
TMP_92(address) = INTERNAL_CALL, EToken2._address(uint256)(toId)
HIGH_LEVEL_CALL, dest:eventsHistory(Emitter), function:emitTransferToICAP, arguments:['TMP_91', 'TMP_92', '_icap', '_value', '_reference']  "];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
true

IRs:
RETURN True"];
}
