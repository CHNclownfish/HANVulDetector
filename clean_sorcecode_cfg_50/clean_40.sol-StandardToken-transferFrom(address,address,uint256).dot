digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0))

IRs:
TMP_43 = CONVERT 0 to address
TMP_44(bool) = _to != TMP_43
TMP_45(None) = SOLIDITY_CALL require(bool)(TMP_44)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0)

IRs:
REF_6(uint256) -> balances[_from]
TMP_46(bool) = REF_6 >= _value
REF_7(mapping(address => uint256)) -> allowed[_from]
REF_8(uint256) -> REF_7[msg.sender]
TMP_47(bool) = REF_8 >= _value
TMP_48(bool) = TMP_46 && TMP_47
TMP_49(bool) = _value > 0
TMP_50(bool) = TMP_48 && TMP_49
TMP_51(None) = SOLIDITY_CALL require(bool)(TMP_50)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] = safeSub(balances[_from],_value)

IRs:
REF_9(uint256) -> balances[_from]
REF_10(uint256) -> balances[_from]
TMP_52(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_10,_value)
REF_9 (->balances) := TMP_52(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] = safeAdd(balances[_to],_value)

IRs:
REF_11(uint256) -> balances[_to]
REF_12(uint256) -> balances[_to]
TMP_53(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_12,_value)
REF_11 (->balances) := TMP_53(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_value)

IRs:
REF_13(mapping(address => uint256)) -> allowed[_from]
REF_14(uint256) -> REF_13[msg.sender]
REF_15(mapping(address => uint256)) -> allowed[_from]
REF_16(uint256) -> REF_15[msg.sender]
TMP_54(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_16,_value)
REF_14 (->allowed) := TMP_54(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from._to._value)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyPayloadSize(3)

IRs:
MODIFIER_CALL, SafeMath.onlyPayloadSize(uint256)(3)"];
8->1;
}
