digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_58(bool) = msg.sender == owner
TMP_59(None) = SOLIDITY_CALL require(bool)(TMP_58)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(i >= 0 && i < unfreezeTimeMap.length)

IRs:
TMP_60(bool) = i >= 0
REF_26 -> LENGTH unfreezeTimeMap
TMP_61(bool) = i < REF_26
TMP_62(bool) = TMP_60 && TMP_61
TMP_63(None) = SOLIDITY_CALL require(bool)(TMP_62)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(now >= unfreezeTimeMap[i].unfreezeTime && unfreezeTimeMap[i].freezed)

IRs:
REF_27(MeetOneToken.FreezeStruct) -> unfreezeTimeMap[i]
REF_28(uint256) -> REF_27.unfreezeTime
TMP_64(bool) = now >= REF_28
REF_29(MeetOneToken.FreezeStruct) -> unfreezeTimeMap[i]
REF_30(bool) -> REF_29.freezed
TMP_65(bool) = TMP_64 && REF_30
TMP_66(None) = SOLIDITY_CALL require(bool)(TMP_65)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_balances[0x01] >= eachUnfreezeValue)

IRs:
REF_31(uint256) -> _balances[1]
TMP_67(bool) = REF_31 >= eachUnfreezeValue
TMP_68(None) = SOLIDITY_CALL require(bool)(TMP_67)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_balances[0x01] = sub(_balances[0x01],eachUnfreezeValue)

IRs:
REF_32(uint256) -> _balances[1]
REF_33(uint256) -> _balances[1]
TMP_69(uint256) = INTERNAL_CALL, MeetOneTokenBase.sub(uint256,uint256)(REF_33,eachUnfreezeValue)
REF_32 (->_balances) := TMP_69(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_balances[owner] = add(_balances[owner],eachUnfreezeValue)

IRs:
REF_34(uint256) -> _balances[owner]
REF_35(uint256) -> _balances[owner]
TMP_70(uint256) = INTERNAL_CALL, MeetOneTokenBase.add(uint256,uint256)(REF_35,eachUnfreezeValue)
REF_34 (->_balances) := TMP_70(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
freezedValue = sub(freezedValue,eachUnfreezeValue)

IRs:
TMP_71(uint256) = INTERNAL_CALL, MeetOneTokenBase.sub(uint256,uint256)(freezedValue,eachUnfreezeValue)
freezedValue(uint256) := TMP_71(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
unfreezeTimeMap[i].freezed = false

IRs:
REF_36(MeetOneToken.FreezeStruct) -> unfreezeTimeMap[i]
REF_37(bool) -> REF_36.freezed
REF_37 (->unfreezeTimeMap) := False(bool)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(0x01,owner,eachUnfreezeValue)

IRs:
Emit Transfer(1.owner.eachUnfreezeValue)"];
}
