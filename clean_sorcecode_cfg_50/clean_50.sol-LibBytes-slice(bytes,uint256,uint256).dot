digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(from <= to,FROM_LESS_THAN_TO_REQUIRED)

IRs:
TMP_3(bool) = from <= to
TMP_4(None) = SOLIDITY_CALL require(bool,string)(TMP_3,FROM_LESS_THAN_TO_REQUIRED)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(to < b.length,TO_LESS_THAN_LENGTH_REQUIRED)

IRs:
REF_0 -> LENGTH b
TMP_5(bool) = to < REF_0
TMP_6(None) = SOLIDITY_CALL require(bool,string)(TMP_5,TO_LESS_THAN_LENGTH_REQUIRED)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
result = new bytes(to - from)

IRs:
TMP_8(uint256) = to - from
TMP_9 = new bytes(TMP_8)
result(bytes) := TMP_9(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
memCopy(result.contentAddress(),b.contentAddress() + from,result.length)

IRs:
TMP_10(uint256) = LIBRARY_CALL, dest:LibBytes, function:LibBytes.contentAddress(bytes), arguments:['result'] 
TMP_11(uint256) = LIBRARY_CALL, dest:LibBytes, function:LibBytes.contentAddress(bytes), arguments:['b'] 
TMP_12(uint256) = TMP_11 + from
REF_3 -> LENGTH result
INTERNAL_CALL, LibBytes.memCopy(uint256,uint256,uint256)(TMP_10,TMP_12,REF_3)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
result

IRs:
RETURN result"];
}
