digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceOf[_from] >= _value)

IRs:
REF_53(uint256) -> balanceOf[_from]
TMP_115(bool) = REF_53 >= _value
TMP_116(None) = SOLIDITY_CALL require(bool)(TMP_115)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balanceOf[_to] + _value > balanceOf[_to])

IRs:
REF_54(uint256) -> balanceOf[_to]
TMP_117(uint256) = REF_54 + _value
REF_55(uint256) -> balanceOf[_to]
TMP_118(bool) = TMP_117 > REF_55
TMP_119(None) = SOLIDITY_CALL require(bool)(TMP_118)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[_from] = SafeMath.safeSub(balanceOf[_from],_value)

IRs:
REF_56(uint256) -> balanceOf[_from]
REF_58(uint256) -> balanceOf[_from]
TMP_120(uint256) = INTERNAL_CALL, SafeMath.safeSub(uint256,uint256)(REF_58,_value)
REF_56 (->balanceOf) := TMP_120(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to],_value)

IRs:
REF_59(uint256) -> balanceOf[_to]
REF_61(uint256) -> balanceOf[_to]
TMP_121(uint256) = INTERNAL_CALL, SafeMath.safeAdd(uint256,uint256)(REF_61,_value)
REF_59 (->balanceOf) := TMP_121(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from._to._value)"];
}
